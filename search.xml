<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++从零开始（二）：基础语法（上）之快速入门</title>
      <link href="/p/52463/"/>
      <url>/p/52463/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不正确，请重试.." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0fcd223a4421b8c262f41149f0fa3fb34c652fdbb76b4a535977b728ae9acd8b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此处输入正确密码，【回车】确定</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 从零开始 </category>
          
          <category> C++基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 教程 </tag>
            
            <tag> C++基础 </tag>
            
            <tag> 基础语法 </tag>
            
            <tag> 快速入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++从零开始（一）：环境搭建（上）之VSCode远程开发</title>
      <link href="/p/18652/"/>
      <url>/p/18652/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>🌟<a href="https://hwh.zone/p/62712/">《C++从零开始》</a> 系列，开始更新中…</p></blockquote><div class="tag link"><a class="link-card" title="C++从零开始" href="https://hwh.zone/p/62712"><div class="left"><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/cat-modified.png"/></div><div class="right"><p class="text">C++从零开始</p><p class="url">https://hwh.zone/p/62712</p></div></a></div><p>实习的时候，公司会给每个人配置一台远程服务器，用于日常开发。体验下来感觉很不错的：</p><ul><li>所有的开发代码、环境均运行在云端，任何一台机器可直连快速开发，<strong>本地无需任何部署环境或者代码</strong>等；</li><li>实际C/C++开发大部分也是在<strong>Linux</strong>环境上完成的，拥有一台自己的（云）Linux开发机还是很有必要的（<strong>省去了Win上开发各种怪问题</strong>）。</li></ul><p>因此，在这个C++系列中，所有的代码也将以：本地（Win）+远程（Linux）形式进行开发。</p><p>好了，让我们快速开始吧。</p><h3 id="快速开始">快速开始</h3><blockquote><p>本文开发环境如下：</p><ul><li>本地：Win10 + VSCode</li><li>远程：CentOS 7 （腾讯云）</li></ul></blockquote><h4 id="云上开发">云上开发</h4><p>腾讯云/阿里云服务器都有学生优惠≈10元/月，以下是撸羊毛详细过程。</p><ol><li><p>进入学生优惠购买界面，以腾讯云为例：<a href="https://cloud.tencent.com/act/campus">腾讯云学生优惠</a></p><p>地区可选 <code>上海三区</code> &amp; <code>广州四区</code>等，广州离重庆更近一点所以选择 <code>广州四区</code> 。</p><p>选择操作系统为：<code>CentOS 7.6.64</code></p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/qiJSVvHcUyPTGOr.png" alt="1579750584238"></p></li><li><p>付费&amp;设置密码</p><p>点击立即购买后，<strong>记得设置好相应root密码</strong>。</p><p>现在你可以右上角点击：控制台–&gt;云服务器，查看你购买的云服务器：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/s7R9KFTe1oaYIcC.png" alt="1579755304749"></p><p>你应该看到上图类似界面。红框部分是对应 <strong>内网&amp;公网IP</strong>，记录下来后面多次要用到。</p></li></ol><h4 id="本地配置">本地配置</h4><ol><li><p>配置SSH</p><p>Win10默认自带安装OpenSSH，下面我们直接进入到环境变量配置环节。</p><ul><li><p>用<a href="https://www.voidtools.com/zh-cn/">everything</a>进行搜索<code>ssh.exe</code> ，并记录OpenSSH文件夹路径：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206162135005.png" alt="image-20211206162135005"></p></li><li><p>win10搜索环境变量—&gt;编辑系统环境变量—&gt;环境变量，找到系统变量(S)—&gt;选择Path—&gt;编辑：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206162428787.png" alt="image-20211206162428787"></p></li><li><p>选择：新建–&gt;输入OpenSSH路径</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206162532446.png" alt="image-20211206162532446"></p><p>保存后退出。</p></li><li><p>测试：打开CMD，输入<code>ssh</code> ，出现如下则环境变量配置成功（被系统成功识别）：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206162726410.png" alt="image-20211206162726410"></p></li></ul></li><li><p>安装相关插件</p><ul><li><p>安装Remote-SSH：左侧Extension图标 —&gt; 输入 <code>Remote-SSH</code> —&gt;安装即可。注意，需要<strong>远程和本地都进行安装</strong>。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206163014391.png" alt="image-20211206163014391"></p></li><li><p>安装C/C++插件：同上安装不再赘述。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206163953436.png" alt="image-20211206163953436"></p></li></ul></li><li><p>配置Remote-SSH</p><p>如图所示选择<code>.ssh/config</code> 文件进行配置：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206163445062.png" alt="image-20211206163445062"></p><p>打开文件后，需要设置以下字段：</p><ul><li>Host：自定义即可</li><li>HostName：云主机公网IP</li><li>User：登陆的用户</li></ul><p>以下为示例：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206163758522.png" alt="image-20211206163758522"></p></li><li><p>登陆测试</p><p>点击下图按钮进行登陆：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206164334870.png" alt="image-20211206164334870"></p><p>输入密码后，便可以看到远程服务器已经成功连接。</p></li><li><p>hello cpp!</p><p>现在我们来编写一个简单的cpp文件，体验远程编码的快感。</p><ul><li><p>打开远程服务器文件夹</p><p>File—&gt;Open Folder—&gt;指定文件夹路径。</p></li><li><p>hello.cpp文件编写</p><p>新建文件hello.cpp–&gt;编写如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;Hello Cpp!&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -g hello.cpp -o hello.out </span><br></pre></td></tr></table></figure><p>执行我们刚刚生成的可执行文件：<code>hello.out</code></p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206165317305.png" alt="image-20211206165317305"></p></li></ul></li></ol><p>至此，顺利完成了初步的远程开发环境配置。</p><p>或许聪明的你已经想到：<strong>远程开发怎么在本地进行debug呢？</strong></p><h3 id="远程Debug">远程Debug</h3><p>VSCode中进行远程调试，通常需配置以下文件<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="vscode中c++的三个配置文件的作用：https://blog.csdn.net/zhxue_11/article/details/89457545 ">[1]</span></a></sup>：</p><ol><li><code>launch.json</code>：最重要的文件，配置<strong>调试器</strong>与<strong>需要调试的可执行文件</strong>进行调试；</li><li><code>c_cpp_properties.json</code>： c与cpp选项，实际开发主要作用是，<strong>解决系统环境的头文件找不到</strong>的情况；</li><li><code>setting.json</code> ：可以对VS Code进行页面风格、代码格式、字体颜色大小等的编辑设置，这里只用来<strong>将其它语言识别为cpp</strong>；<ul><li>更多作用可参考：<a href="https://www.zhihu.com/question/366164002">settings.json是什么?对VS Code有什么用？</a></li></ul></li><li><code>tasks.json</code>：通常用来执行<strong>比较简单的编译指令</strong>，所以一般不用，不进行过多介绍。</li></ol><p>下面正式进行相关配置介绍<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="vscode C++远程调试运行：https://zhuanlan.zhihu.com/p/104131448">[2]</span></a></sup>。</p><blockquote><p>⚠️ 以下过程执行前提：</p><ol><li>你已经根据前面步骤，成功编译生成了一个可执行文件，如：<code>hello.out</code> ；</li><li>编译生成的执行文件<strong>可以被Debug</strong>，e.g.，g++带上<code>-g</code>参数。</li></ol></blockquote><h4 id="launch-json">launch.json</h4><p>菜单栏依次选择：Debug —&gt; Add Configuration—&gt; 选择C++ (GDB/LLDB) —&gt; 选择g++ build and debug active file。</p><blockquote><p>如果以上创建过程报错：<strong>VScode找不到任务c/c++：g++.exe生成活动文件</strong> 。</p><ul><li>需要你<strong>先打开一个cpp文件</strong>，再执行上面步骤。</li></ul></blockquote><p>VSCode<strong>会根据你的机器环境</strong>，自动创建<code>launch.json</code> 。正如前所言该文件的作用，我们需进行以下配置：</p><ul><li><p><strong>配置调试器信息</strong>：创建文件时系统自动配置好了，所以不用管；</p></li><li><p><strong>配置可执行文件</strong>：也就是我们<strong>编译生成的可执行文件路径</strong></p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206173236205.png" alt="image-20211206173236205"></p><p>当然我们还可以为可执行文件<strong>设置参数</strong>，格式如下：<br><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206173526162.png" alt="image-20211206173526162" style="zoom:67%;" /></p></li><li><p><strong>注释多余参数</strong>：<code>preLaunchTask</code>（调试会话开始前执行的任务），不需要。</p></li></ul><p>最终完整的配置示例文件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;(gdb) Launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="comment">// 将要进行调试的可执行文件的路径</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/bin/hello.out&quot;</span>,   </span><br><span class="line">            <span class="comment">// 调试的可执行文件参数</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="comment">// &quot;miDebuggerPath&quot;: &quot;/usr/bin/gdb&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="c-cpp-properties-json">c_cpp_properties.json</h4><p>VSCode开发过程中，经常容易出现：<strong>明明路径正确引用其它头文件，但VSCode就是一直提示无法找到</strong>。所以在这个文件中，提供了<code>includePath</code>参数，让编译器顺利找到其它路径的文件。</p><p>在菜单栏中：F1—&gt;选择C/Cpp: Edit configurations，让VSCode根据实际环境自动生成c_cpp_properties.json。</p><p>以下给出示例配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Linux&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;defines&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span>: <span class="string">&quot;/usr/bin/gcc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span>: <span class="string">&quot;c89&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span>: <span class="string">&quot;gnu++98&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span>: <span class="string">&quot;linux-gcc-x64&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="setting-json">setting.json</h4><p>这里只用来，将其它语言识别为CPP，不太重要。按以下配置好了就行。</p><p>在菜单栏中：F1—&gt;输入 “Open Settings”—&gt; 选择 “Preferences: Open Settings (JSON)” ，自动生成该文件。</p><p>编辑以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;*.tcc&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cctype&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;clocale&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cstdarg&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cstdint&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cstdio&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cstdlib&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cwchar&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cwctype&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;exception&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;initializer_list&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;iosfwd&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;iostream&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;istream&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;limits&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;new&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ostream&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;streambuf&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;type_traits&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;typeinfo&quot;</span>: <span class="string">&quot;cpp&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;C_Cpp.errorSquiggles&quot;</span>: <span class="string">&quot;Enabled&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试">测试</h4><p>现在让我们波澜不惊的在<code>hello.cpp</code> ，打上断点，按上<code>F5</code> 进行调试。</p><p>发现可以顺利进行远程调试，跨越了你离技术专家的一小步 😃 。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206180754574.png" alt="image-20211206180754574"></p><h3 id="体验优化">体验优化</h3><h4 id="免密登陆">免密登陆</h4><p>每次连接到远程服务器要输入密码，实在让暴躁开发的我难以忍受。现在让我们来配置免密登陆，减少服务器被我再次remake的风险。</p><ol><li><p><strong>本地</strong>生成密钥对</p><p>打开cmd —&gt; 输入 <code>ssh-keygen -t  rsa</code> 生成密钥对。</p><ul><li>在该过程会有三个系统提示，一直回车即可；</li><li>该过程会显示<strong>密钥保存路径</strong>，记录下来。</li></ul><p>打开密钥保存路径—&gt;打开<code>id_rsa.pub</code> 文件，并<strong>复制其全部内容</strong>。</p></li><li><p><strong>远程</strong>密钥配置</p><p>在VSCode打开远程服务器终端，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>按下 <code>i</code> 进入插入模式 —&gt; 粘贴刚刚复制的密钥—&gt;按下<code>:</code>，输入<code>wq!</code> 进行保存。</p></li><li><p>登陆测试</p><p>现在你可以重新登陆远程服务器，发现可以愉快的免密登陆了。</p><ul><li>如果依旧不行，建议在第一步生成密钥对时，<strong>选择覆盖之前密钥</strong>。</li></ul></li></ol><h4 id="文件同步">文件同步</h4><p>工作中经常需要<strong>同步本地和服务器之间的文件</strong>，通常有以下几种方式：</p><ol><li><code>FileZilla</code>软件同步 ；</li><li>VSCode 中<code>STFP</code>插件同步；</li><li>命令行<code>SCP</code>命令同步。</li></ol><p>在这里我们主要介绍1、2两种方式。</p><div class="tabs" id="文件同步方式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#文件同步方式-1">STFP插件</button></li><li class="tab"><button type="button" data-href="#文件同步方式-2">FileZilla</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="文件同步方式-1"><p>因为本文主要是基于VSCode开发，所以介绍一下使用VSCode相关插件进行同步<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="vscode使用sftp快速同步服务器文件：https://blog.csdn.net/qq_24798295/article/details/90228795">[3]</span></a></sup>。</p><ol><li><p>安装SFTP插件</p><p>左侧Extension图标 —&gt; 输入 <code>STFP</code> —&gt;安装即可。注意，需要<strong>远程和本地都进行安装</strong>。</p></li><li><p>工作区：准备</p><p>在<strong>本地</strong>路径下：创建新文件夹—&gt;使用VSCode打开，文件夹被自动加入到工作区中。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206154403565.png" alt="image-20211206154403565"></p></li><li><p>配置<code>sftp.json</code></p><p>在：F1—&gt; 输入SFTP —&gt;选择 SFTP: config ，进行文件配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;roy-cpp&quot;</span>, <span class="comment">// 随意</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;119.111.111.111&quot;</span>, <span class="comment">// 你的云主机公网IP</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;sftp&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;port&quot;</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>,  <span class="comment">// 登陆用户名</span></span><br><span class="line">    <span class="attr">&quot;remotePath&quot;</span>: <span class="string">&quot;/home/royhuang/syn&quot;</span>, <span class="comment">// 随意，不存在会自动创建</span></span><br><span class="line">    <span class="attr">&quot;uploadOnSave&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指定本地同步文件夹</p><p>在：F1—&gt;输入SFTP —&gt;选择SFTP: Sync Local -&gt; Remote ，将会显示本地工作区的文件夹。</p><p>选择一个文件夹，作为我们同步到远端的本地路径（输入登陆用户密码后确定）。</p><p>同步设置完成后，在VSCode底部会显示SFTP标识：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211206160159444.png" alt="image-20211206160159444"></p></li><li><p>（可选）BUG解决：No Such File</p><p>这是SFTP的一个Bug，参考<a href="https://stackoverflow.com/questions/67506693/error-no-such-file-sftp-liximomo-extension">stackoverflow</a>进行解决。</p><ul><li><p>找到<code>sftp.js</code>（Win下可用<a href="https://www.voidtools.com/zh-cn/">everything</a>进行搜索），通常是在以下路径：<code>C:\Users\account_name\.vscode\extensions\liximomo.sftp-1.12.9\node_modules\ssh2-streams\lib\sftp.js</code></p></li><li><p>修改第388行，将 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( code === STATUS_CODE . OK ) &#123;</span><br></pre></td></tr></table></figure><p>替换为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (code === STATUS_CODE.OK || code === STATUS_CODE.NO_SUCH_FILE) &#123;</span><br></pre></td></tr></table></figure></li><li><p>保存文件后，重启VSCode一般可解决。</p></li></ul></li><li><p>测试</p><ul><li><p>本地</p><ol><li>准备测试文件，放入之前设置的<strong>本地同步文件夹</strong>中</li><li>用VSCode打开该同步文件夹：选择测试文件–&gt;右击–&gt;选择<strong>底部Upload</strong> 上传</li></ol></li><li><p>远程服务器</p><ol><li>VSCode打开<strong>远程服务器同步文件夹</strong> ，发现文件已经被顺利上传</li><li>当然远程文件也可同步到本地：选择测试文件–&gt;右击–&gt;选择<strong>底部DownLoad</strong>下载即可。</li></ol></li></ul><p>尽情愉快玩耍吧！</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="文件同步方式-2"><blockquote><p>这里引用<a href="https://github.com/Wanghui-Huang/CQU_bigdata/blob/master/Experiment/Ex2_WordCount/ex2.md">之间写的教程</a> ，文件路径可能有点奇怪，但不影响阅读。</p></blockquote><p>该小节将介绍如何使用FTP软件将本地（Windows）文件上传到服务器(Linux)。</p><ol><li><p>下载软件</p><p>FTP工具我们选择<code>Filezilla</code> ，下载地址：<a href="https://pc.qq.com/search.html#!keyword=fielzilla">Filezilla下载</a></p><p><img src="https://i.loli.net/2020/09/17/RLvUt4bDNa69X1Y.png" alt="1579960280360"></p><p>点击进行下载安装，安装过程较为简单不再赘述。</p></li><li><p>连接服务器</p><p>依次点击：文件 --&gt; 站点管理器 --&gt;  新站点</p><p><img src="https://i.loli.net/2020/09/17/snKEbvuzyc2CXLR.png" alt="1580056871863"></p></li><li><p>上传文件</p><p>如下图所示，左侧为本地文件，右侧为服务器文件目录（默认为 <code>/home/hadoop</code>）</p><p><img src="https://i.loli.net/2020/09/17/aWGltFuJnEXmvpV.png" alt="1580057006302"></p><p>上传完毕后，可在服务器上查看文件：</p><p><img src="https://i.loli.net/2020/09/17/c12v7n9fI4h5BSi.png" alt="1580057304136"></p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="写在最后">写在最后</h3><p>看到这里，相信聪明的你已经将远程开发环境顺利搭建起来。同时，使用g++编译了个小demo，还顺手进行了一次不错的调试体验。</p><p>但在实际开发中，对于<strong>如何优雅去编译我们的项目</strong>，是个不小的问题。为此，我们还需要学习下：</p><ul><li>g++/Makefile/CMake 原理及基础命令；</li><li>项目构建逻辑及编译。</li></ul><p>在下一篇文章：<a href="https://www.hwh.zone/p/2834">环境搭建（下）g++/Makefile/CMake快速入门</a> ，和我一起学习下吧。</p><h3 id="更新记录">更新记录</h3><div class="timeline"><div class="timenode"><div class="meta"><p><p>2021-12-06 ：第一次更新</p></p></div><div class="body"><ol><li>初稿完成并发布</li></ol></div></div></div><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">vscode中c++的三个配置文件的作用：https://blog.csdn.net/zhxue_11/article/details/89457545<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">vscode C++远程调试运行：https://zhuanlan.zhihu.com/p/104131448<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">vscode使用sftp快速同步服务器文件：https://blog.csdn.net/qq_24798295/article/details/90228795<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 从零开始 </category>
          
          <category> C++基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 教程 </tag>
            
            <tag> C++基础 </tag>
            
            <tag> 远程开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++从零开始（一）：环境搭建（下）g++/Makefile/CMake快速入门</title>
      <link href="/p/2834/"/>
      <url>/p/2834/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>🌟<a href="https://hwh.zone/p/62712/">《C++从零开始》</a> 系列，开始更新中…</p></blockquote><div class="tag link"><a class="link-card" title="C++从零开始" href="https://hwh.zone/p/62712"><div class="left"><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/cat-modified.png"/></div><div class="right"><p class="text">C++从零开始</p><p class="url">https://hwh.zone/p/62712</p></div></a></div><p>作为一名C/C++程序员，g++/Makefile/CMake等相关工具是必备的基础。但之前使用中一直存在一些困惑，因此参考了一些资料<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="g++，CMake和Makefile了解一下 ： https://zhuanlan.zhihu.com/p/55027085">[1]</span></a></sup><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Linux下使用CMake编译C++：https://zhuanlan.zhihu.com/p/373256365">[2]</span></a></sup><sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="阮一峰--编译器的工作过程：http://www.ruanyifeng.com/blog/2014/11/compiler.html">[3]</span></a></sup>，动笔写了这篇文章，希望可以帮助自己或大家：</p><ul><li>对编译处理过程有个基本认知；</li><li>能初步使用编译工具g++/Makefile/CMake；</li><li>能初步使用CMake编译大型项目。</li></ul><p>才疏学浅，若有错误不吝指正。</p><h3 id="g">g++</h3><p>在下文中，我们将多次利用了g++编译代码。为了方便后续学习Makefile和CMake，我们先进行简单总结。</p><p>以hello.cpp为例。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt;endl;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速入门">快速入门</h4><p>程序 g++ 是将 gcc 默认语言设为 C++ 的一个特殊的版本，链接时它自动使用 C++ 标准库而不用 C 标准库。</p><p>当然，用 gcc 来编译链接 C++ 程序是可行的，如下例所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc hello.cpp -lstdc++ -o hello.out</span><br></pre></td></tr></table></figure><p>不过我们还是主要熟悉g++基本用法来编译C++代码。</p><ol><li><p>g++最简单的编译方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> g++ hello.cpp</span></span><br></pre></td></tr></table></figure><p>由于命令行中未指定可执行程序的文件名，编译器采用默认的 a.out。程序可以这样来运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./a.out</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></li><li><p>指定可执行程序文件名</p><p>我们使用 <strong>-o</strong> 选项指定可执行程序的文件名，以下实例生成一个 名为hello.out 的可执行文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ hello.cpp -o hello.out</span><br></pre></td></tr></table></figure><p>执行 hello.out:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./hello.out</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></li><li><p>多个 C++ 代码文件</p><p>如 a.cpp、b.cpp，编译命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ a.cpp cpp、b.cpp -o test.out</span><br></pre></td></tr></table></figure><p>生成一个 test.out可执行文件。</p></li></ol><p>g++ 有些系统默认是使用 C++98，我们可以指定使用 C++11 来编译 hello.cpp 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -g -Wall -std=c++11 hello.cpp -o hello.out.</span><br></pre></td></tr></table></figure><h4 id="g-常用命令选项">g++ 常用命令选项</h4><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">-ansi</td><td style="text-align:center">只支持 ANSI 标准的 C 语法。这一选项将禁止 GNU C 的某些特色， 例如 asm 或 typeof 关键词。</td></tr><tr><td style="text-align:center">-c</td><td style="text-align:center">只编译并生成目标文件。</td></tr><tr><td style="text-align:center">-DMACRO</td><td style="text-align:center">以字符串&quot;1&quot;定义 MACRO 宏。</td></tr><tr><td style="text-align:center">-DMACRO=DEFN</td><td style="text-align:center">以字符串&quot;DEFN&quot;定义 MACRO 宏。</td></tr><tr><td style="text-align:center">-E</td><td style="text-align:center">只运行 C 预编译器。</td></tr><tr><td style="text-align:center">-g</td><td style="text-align:center">生成调试信息。GNU 调试器可利用该信息。</td></tr><tr><td style="text-align:center">-IDIRECTORY</td><td style="text-align:center">指定额外的头文件搜索路径DIRECTORY。</td></tr><tr><td style="text-align:center">-LDIRECTORY</td><td style="text-align:center">指定额外的函数库搜索路径DIRECTORY。</td></tr><tr><td style="text-align:center">-lLIBRARY</td><td style="text-align:center">连接时搜索指定的函数库LIBRARY。</td></tr><tr><td style="text-align:center">-m486</td><td style="text-align:center">针对 486 进行代码优化。</td></tr><tr><td style="text-align:center">-o</td><td style="text-align:center">FILE 生成指定的输出文件。用在生成可执行文件时。</td></tr><tr><td style="text-align:center">-O0</td><td style="text-align:center">不进行优化处理。</td></tr><tr><td style="text-align:center">-O</td><td style="text-align:center">或 -O1 优化生成代码。</td></tr><tr><td style="text-align:center">-O2</td><td style="text-align:center">进一步优化。</td></tr><tr><td style="text-align:center">-O3</td><td style="text-align:center">比 -O2 更进一步优化，包括 inline 函数。</td></tr><tr><td style="text-align:center">-shared</td><td style="text-align:center">生成共享目标文件。通常用在建立共享库时。</td></tr><tr><td style="text-align:center">-static</td><td style="text-align:center">禁止使用共享连接。</td></tr><tr><td style="text-align:center">-UMACRO</td><td style="text-align:center">取消对 MACRO 宏的定义。</td></tr><tr><td style="text-align:center">-w</td><td style="text-align:center">不生成任何警告信息。</td></tr><tr><td style="text-align:center">-Wall</td><td style="text-align:center">生成所有警告信息。</td></tr></tbody></table><h3 id="编译过程初探">编译过程初探</h3><p>现在让我们从一个简单的例子，来一步步探讨下编译过程。</p><p>准备的<code>hello.cpp</code>程序如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt;endl;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们对它进行简单的编译&amp;输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++  hello.cpp -o hello.out  <span class="comment"># 文件名可包含指定路径</span></span><br></pre></td></tr></table></figure><p>可以看到，当前路径生成了<code>hello.out</code>文件，这是一个可执行的二进制文件。</p><p>让我们执行一下试试：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211208140718480.png" alt="image-20211208140718480"></p><p>我们的代码被正确执行了。但这整个过程的细节被隐藏了，如果不了解清楚对我们以后的学习工作阻碍很大。</p><p>正式开始接触细节前，我们先大致了解下上述编译过程（四步）：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/20200423003518622.png" alt="C/C++程序编译的过程| 码农家园"></p><ol><li><code>预处理</code>：资源进行等价替换，生成<strong>预编译文件</strong>（<strong>.i</strong>文件）；</li><li><code>编译</code> ：生成<strong>汇编代码</strong>（<strong>.s</strong>文件）；</li><li><code>汇编</code> ：将汇编代码最终生成<strong>机器代码</strong>（<strong>.o</strong>文件）；</li><li><code>链接</code>：动态或静态链接外部函数/库(lib)/变量，生成<strong>可执行的二进制(hex)文件/静态库(.a)文件/动态库(.so)文件</strong>。</li></ol><p>现在让我们来逐步分析。</p><h4 id="预处理">预处理</h4><p>预处理的主要作用：通过内建功能对<strong>预处理指令进行等价文本替换</strong>。</p><p>一般地，<code>C/C++</code> 程序的源代码中包含以 <code>#</code> 开头的各种编译指令，被称为<strong>预处理指令</strong>。根据ANSI C 定义，主要包括：<strong>文件包含、宏定义、条件编译和特殊控制</strong>等4大类<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="gcc编译生成可执行文件的过程中发生了什么：https://blog.csdn.net/albertsh/article/details/89309107">[7]</span></a></sup>。</p><ul><li><p><strong>文件包含</strong>：例如常用的预处理指令 <code>#include &lt;iostream&gt;</code> ，预编译阶段会使用系统目录下<code>iostream</code>文件中的全部内容，替换 <code>#include &lt;iostream&gt;</code> 。</p><blockquote><p><code>#include &quot;xxx.h&quot;</code> ，表示使用当前目录下xxx.h文件，<code>&lt;&gt;</code> 是在系统目录下查找。</p></blockquote></li><li><p><strong>宏定义展开及处理</strong>： 预处理阶段会将定义的常量符号进行等价替换，e.g. <code>#define A 100</code> , 所有的宏定义符号A都会被替换成<code>100</code>。还会将一些内置的宏展开，比如用于显示文件全路径的<code>__FILE__</code>。</p></li><li><p><strong>条件编译处理</strong>: 如 <code>#ifdef，#ifndef，#else，#elif，#endif</code>等，这些条件编译指令的引入，使得程序员可以通过定义不同的宏来决定编译程序对哪些代码进行处理。预处理时会将那些不必要的代码过滤掉，防止文件重复包含等。</p></li><li><p>其它：特殊控制处理…</p></li></ul><p>特别的，预处理过程还会发生：</p><ul><li><strong>添加行号和文件名标识</strong>： 比如在文件<code>hello.i</code>中就有类似 <code># 2 &quot;main.c&quot; 2</code> 的内容，以便于编译时编译器产生调试用的行号信息，编译时产生编译错误或警告时能够显示行号；</li><li>清理注释内容等。</li></ul><p>在这一步，我们亲眼瞧瞧<strong>预处理的等价文本替换</strong>究竟做了什么：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -E hello.cpp &gt; hello.i  <span class="comment"># 输出文件重定向到hello.i中</span></span><br></pre></td></tr></table></figure><p>可以看到：</p><ol><li><p><strong>文件包含</strong>：我们之前引入的头文件 <code>#include &lt;iostream&gt;</code> ，<strong>预处理后会将<code>#include &lt;iostream&gt;</code> 代码替换为iostream文件的内容，插入到<code>hello.i</code>中</strong>。</p><p>文件过长，以下是部分截图：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211208235953948.png" alt="image-20211208235953948"></p><p>特别的，<strong>iostream文件本身也#include了头文件，同样会被替换</strong>，也就是进行大杂烩嵌套拼接。</p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/20200422202617233.png" alt="在这里插入图片描述" style="zoom:80%;" /></li><li><p>其它，<u>条件编译处理</u>、<u>添加行号和标识</u>等也一并可以（左图）观察到。</p></li></ol><h4 id="编译">编译</h4><p>编译过程是整个程序构建的核心部分，也是最复杂的部分之一，其工作就是把预处理完生成的 <code>.i</code> 文件进行一系列的<strong>词法分析、语法分析、语义分析以及代码优化</strong>，最终产生相应的汇编代码文件，也就是 <code>.s</code> 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -S hello.cpp -o hello.s  <span class="comment"># 该命令包含等价替换过程</span></span><br></pre></td></tr></table></figure><p>打开当前目录下<code>hello.s</code> ，入目即是熟悉的汇编天书：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211208150625682.png" alt="image-20211208150625682"></p><h4 id="汇编">汇编</h4><p>相对来说比较简单，每个汇编语句都有相对应的机器指令，只需根据汇编代码语法和机器指令的对照表翻译过来就可以了。</p><p>有了上述汇编代码后，我们便可以将其转换为机器码（<code>.o</code>文件，即object file）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -c hello.cpp -o hello.o  <span class="comment"># -c 表示不进行链接</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211208151441286.png" alt="image-20211208151441286"></p><p>但是在这一步还不能直接执行，会报错：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211208151833947.png" alt="image-20211208151833947"></p><p>这是因为我们还<strong>没有链接其它相应的文件</strong>，因此会报错。我们来试试链接再生成可执行代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ hello.o -o hello.out</span><br></pre></td></tr></table></figure><p>然后执行：<code>./hello.out</code></p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211208160023661.png" alt="image-20211208160023661"></p><p>假装惊喜的发现（是的就是这么戏精），文件确实已经被成功执行了。</p><p>那么，<strong>链接过程中究竟发生了什么？为什么一定要链接后才能执行</strong>？</p><h4 id="链接">链接</h4><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/807220-3b44242bee5ba363" alt="img" style="zoom:80%;" /><h5 id="链接过程究竟做了什么？">链接过程究竟做了什么？</h5><p>一言蔽之：就是<strong>进行符号解析和重定位</strong>的过程<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="符号解析：https://www.jianshu.com/p/2786533a34c9">[4]</span></a></sup>。</p><ul><li>比如我们上一步生成的可执行文件<code>hello.o</code> 执行出错，就是因为<strong>没有符号解析和重定位</strong>。</li></ul><p><strong>为什么一定要进行符号解析和重定位</strong>？</p><p>例如，在前面预处理阶段，我们将 <code>#include&lt;iostream&gt;</code> 预处理指定替换为头文件<code>iostream</code>中的内容。但实际上，<code>iostream</code>中的<code>cout</code>只是被定义，并没有实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> ostream cout;<span class="comment">/// Linked to standard output</span></span><br></pre></td></tr></table></figure><p>具体是在<code>libstdc++.so</code>中被实现的。我们必须要让编译器找到<code>libstdc++.so</code>，并将<strong>cout符号解析重定向libstdc++.so中</strong>。这样，<code>cout</code>才可以被正常执行。</p><h5 id="准备代码片段">准备代码片段</h5><p>为了更清楚的说明整个过程，我们不妨换一个例子，<strong>不使用系统库文件</strong>（预处理后的文件太复杂）。</p><ul><li><p>Main.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> shared;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>*,<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">   <span class="built_in">swap</span>(&amp;a, &amp;shared);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Libtest.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> shared = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   *a ^= *b ^= *a ^= *b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>可以看到：Libtest.cpp<strong>不引用</strong>任何外部变量符号，但Main.cpp文件会<strong>引用</strong>Libtest.cpp中的<strong>shared变量</strong> 和 <strong>swap函数</strong>。</p><p>那么，<strong>Main.cpp中外部符号即shared和swap，怎么样才能被正确解析到Libtest.cpp中</strong>？</p><h5 id="链接前置知识">链接前置知识</h5><blockquote><p>下面有不理解的地方，建议阅读：<a href="https://www.cnblogs.com/fellow1988/p/6158240.html">ELF学习–重定位文件</a></p></blockquote><p>继续讲解前，我们还需补充几个基本概念<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="计算机原理系列之七-链接过程分析：https://luomuxiaoxiao.com/?p=572">[5]</span></a></sup>：</p><ul><li><p><strong>符号和外部符号</strong></p><ul><li>在链接中，我们将函数和变量统称为<strong>符号</strong>（<strong>Symbol</strong>）；</li><li>在本目标文件中使用，而又没有在本目标文件中定义的全局符号，称为<strong>外部符号</strong>（<strong>External Symbol</strong>）。</li></ul></li><li><p><strong>重定位表</strong></p><p>由于<strong>外部符号在编译后并不能确定其位置地址（链接重定位后才能确定</strong>）。所以需要这么一个文件：<strong>将需要重定位的外部符号进行标记</strong>。</p><p>比如，编译后<code>Main.o</code> 文件符号表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ -c Main.cpp -o Main.o # -c参数表示不进行链接</span><br><span class="line">objdump -r Main.o</span><br></pre></td></tr></table></figure><ul><li><p>可见，<code>shared</code>和<code>swap()</code>为外部符号被标记记录，显然，<strong>这些符号是需要被解析重定向</strong>的。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211227201402682.png" alt="image-20211227201402682"></p></li></ul><p>但是<strong>Libtest.o中没有外部符号</strong>，因此其重定位表为空。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ -c Libtest.cpp -o Libtest.o</span><br><span class="line">objdump -r Libtest.o</span><br></pre></td></tr></table></figure><p>重定位表为空。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211227215524264.png" alt="image-20211227215524264"></p></li><li><p><strong>符号表</strong></p><p>目标文件使用<strong>符号表</strong>（<strong>Symbol Table</strong>）来记录本目标文件中的<strong>全局符号</strong>的信息。</p><p>e.g. <strong>自定义的全局符号地址</strong>，这样别的文件中引用了该自定义的全局符号，就可以查找其真实地址。</p><ul><li><p><strong>Main.o符号表</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -s Main.o</span><br></pre></td></tr></table></figure><ul><li><p>Main.o定义了全局符号<code>main</code>，使用到了外部符号<code>shared</code>和<code>swap</code>。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211227201514728.png" alt="image-20211227201514728"></p><p><code>UND</code> 即表示未定义需要重定义。</p></li></ul></li><li><p><strong>Libtest.o的符号表</strong></p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -s Libtest.o</span><br></pre></td></tr></table></figure><ul><li><p>Libtest.o定义了符号<code>shared</code>和<code>swap</code>，没有使用到外部符号</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211227201608874.png" alt="image-20211227201608874"></p></li></ul></li></ul><h5 id="静态链接过程">静态链接过程</h5><blockquote><p><strong>静态链接的主要目的：1）将多个目标文件合并，2）并处理各目标文件用到的外部符号（e.g. main.cpp 中的 swap和shared）</strong>，对外部符号重定位（ 调整地址到真正定义实现的地方，e.g.，<strong>Libtest.cpp</strong>），最后生成<strong>可独立运行</strong>的可执行文件。</p></blockquote><p>现在我们进行静态链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -static Main.cpp Libtest.cpp -o main.out</span><br></pre></td></tr></table></figure><p>静态链接一般采用<strong>两步链接</strong>（<strong>Two-pass Linking</strong>）的方法，下面以链接 Main.cpp 和 Libtest.cpp为例具体说明。</p><p><strong>第一步，空间与地址分配。</strong></p><p>扫描<strong>所有的编译生成的可重定向文件（Main.o和Libtest.o）并合并</strong>，同时获得其以下信息：</p><ol><li><p><strong>全局符号表</strong>：包含所有的符号定义和符号引用；</p><table><thead><tr><th style="text-align:center">符号名</th><th style="text-align:center">状态</th><th style="text-align:center">所在目标文件</th><th style="text-align:center">…</th></tr></thead><tbody><tr><td style="text-align:center">main</td><td style="text-align:center">定义</td><td style="text-align:center">Main</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">shared</td><td style="text-align:center"><strong>引用</strong></td><td style="text-align:center">Main</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">swap</td><td style="text-align:center"><strong>引用</strong></td><td style="text-align:center">Mian</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">shared</td><td style="text-align:center">定义</td><td style="text-align:center">Lib</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">swap</td><td style="text-align:center">定义</td><td style="text-align:center">Lib</td><td style="text-align:center"></td></tr></tbody></table></li><li><p><strong>段信息</strong>：各个段的长度、属性和位置。</p></li></ol><p><strong>第二步，符号解析与重定位。</strong></p><ol><li><p>查看<strong>全局符号表</strong>，发现<code>shared</code>需要重定位；</p></li><li><p>在<strong>全局符号表</strong>发现Libtest.o定义了<code>shared</code>；</p></li><li><p>查看<strong>Libtest.o的符号表</strong>以及第一步的<strong>段信息</strong>，确定<code>shared</code>的地址；</p></li><li><p>再查看<strong>Main.o的重定位表</strong>，找到所有<code>shared</code>需要重定位的地址，修改为<code>shared</code>的真实地址；</p><blockquote><p>Main.o和Libtest.o被合并，必须要查看重定位表，知道哪些是属于Main的<code>share</code>，进行重定位。</p></blockquote></li><li><p>继续查看<strong>全局符号表</strong>，发现<code>swap</code> 需要重定位，过程同上；</p></li><li><p>直至所有的<strong>符号引用都被修改为真实地址</strong>，结束。</p></li></ol><p>我们可以反编译一下最后的可执行文件，看看是否如上所示已经全部重定义完成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -d main.out &gt; tmp.txt</span><br></pre></td></tr></table></figure><p>例如，主函数中调用的swap函数的地址被修正为40050d。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211227204728883.png" alt="image-20211227204728883"></p><p>在静态链接下，链接器通过将<strong>各个目标文件的代码段和数据段【合并拷贝】到可执行文件</strong>，因此静态链接下可执行文件当中<strong>包含了所依赖的所有代码和数据</strong>。</p><ul><li><p>在本例中，Main.o和Libtest.o被合并拷贝到可执行文件中，然后进行解析重定位。</p></li><li><p>特别的，如果还包含静态库，【<strong>静态库中需要的目标文件，e.g.，下图静态库.a中的c.o】，在链接时也会一并被拷贝合并</strong>到可执行文件中。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/807220-2e1bc10a88be493b" alt="img"></p></li></ul><p>看到这里，相信你已经明白，在静态链接中外部符号：</p><ul><li><strong>为什么要被解析重定位</strong>：外部符号能被定位到真正实现的地方；</li><li><strong>如何被解析重定位</strong>：通过符号表实现。</li></ul><p>同时，静态链接还会将需要的目标文件进行合并，因此体积比较大。</p><h5 id="动态链接过程">动态链接过程</h5><p><strong>为什么需要动态链接</strong>？</p><p>试试想想以下两种糟糕的情况：</p><ul><li><p><strong>空间浪费</strong>： 假设你是个腾讯技术专家，你写的代码Libtest.cpp性能挺好，于是开源出来<strong>生成一个静态库</strong>给其它人也用用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c Libtest.cpp -o libtest.o</span><br><span class="line">ar cqs libtest.a libtest.o</span><br></pre></td></tr></table></figure><p>github反应不错，你的大作很受欢迎，基本机器上每个程序都调用了你的库。但是<strong>由于每个程序都静态链接你的静态库libtest.a，导致每个程序都会【拷贝】Libtest.a中的代码</strong>，造成了很大的空间浪费。</p></li><li><p><strong>更新困难</strong>： 不幸的是，你不但技术精湛<s>头发稀少</s>同时精力旺盛，经常对你的大作libtest.a进行更新。这样你每更新一次，<strong>为了跟上你技术专家的步伐，所有的程序都要重新编译一次，来静态链接拷贝你的最新代码</strong>。情况严重的话，这可能收到一些礼貌的问候。</p></li></ul><p>聪明的你，自然想到号召大家使用<strong>动态链接</strong>：</p><ul><li>对那些组成程序的目标文件，比如你的libtest，不进行直接链接，而只是将<strong>必要信息写入了可执行文件，等到程序要运行时才进行链接</strong>。这样他们只用下载你大作libtest.so最新的版本，可执行文件运行时就会自动（动态）链接新版本，从而<strong>不用重新编译</strong>了。</li></ul><p>于是你开心地开始尝试下动态链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成动态库</span></span><br><span class="line"><span class="comment"># 生成的动态库的名字必须是lib+名字.so</span></span><br><span class="line">g++ -shared  -o libtest.so Libtest.cpp</span><br><span class="line"><span class="comment"># 保存在/usr/lib64/下</span></span><br><span class="line">mv libtest.so  /usr/lib64/</span><br><span class="line"><span class="comment"># 动态链接你的大作libtest.so，可以直接使用-ltest来引用</span></span><br><span class="line">g++  Main.cpp  -L/usr/lib64/ -ltest -o main.out</span><br></pre></td></tr></table></figure><p>得到可执行文件<code>main.out</code>。</p><p>但是<code>main.out</code><strong>仅包含了<code>libtest.so</code> 的符号信息</strong>，并没有将 <code>libtest.so</code>相关代码 和 <code>main.out</code>合并。只有当我们执行 <code>./main.out</code> ，此时才会动态加载<code>Libtest.so</code>中需要的代码 。</p><p>从上也回答本节开头的问题：<strong>动态链接生成的可执行文件体积小，避免了空间浪费，同时灵活性强</strong>。这也就是使用动态链接的主要原因。</p><p>那么，动态链接的需要的动态库，和静态链接需要的静态库又是什么呢？</p><h5 id="静态库和动态库">静态库和动态库</h5><blockquote><p>Windows下的静态库和动态库分别为<code>.lib</code>和<code>.dll</code> 结尾的文件，本节中仅以在Linux系统中说明相关概念。</p></blockquote><p>Linux 下的库有两种<sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="C/C++中关于静态链接库(.a)、动态链接库（.so）的编译与使用：https://blog.csdn.net/qq_27825451/article/details/105700361">[8]</span></a></sup>：<strong>静态库</strong>和<strong>共享库（动态库）</strong> ，都采用以下方式进行链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 【例】Main.cpp动态链接libtest.so，静态链接需加上-static参数</span></span><br><span class="line"><span class="comment"># -L：指定搜素路径，:可分隔多个路径</span></span><br><span class="line"><span class="comment"># -l：指定库名，前缀&quot;lib&quot;和后缀&quot;.a&quot; 或&quot;.so&quot;省略</span></span><br><span class="line">g++  Main.cpp  -L/usr/lib64/ -ltest -o main.out</span><br></pre></td></tr></table></figure><ul><li><p><strong>静态库</strong></p><ul><li><p><strong>特点</strong>：编译过程中已经被载入可执行程序，因此体积较大；</p></li><li><p><strong>命名</strong>：.a为后缀，lib为前缀， 例如 <code>libtest.a</code> ；</p></li><li><p><strong>生成</strong>：先生成<code>.o</code> 文件，再用<code>ar</code>工具可生成；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ -c Libtest.cpp -o libtest.o</span><br><span class="line">ar cqs libtest.a libtest.o</span><br></pre></td></tr></table></figure></li><li><p><strong>链接路径</strong>：</p><ol><li><strong>参数-L</strong>：ld会去找gcc/g++命令中的参数<code>-L</code>指定的路径；</li><li><strong>环境变量</strong>：gcc的环境变量<code>LIBRARY_PATH</code>，它指定程序<strong>静态</strong>链接库文件搜索路径；</li><li><strong>默认库</strong>：再找默认库目录 <code>/lib</code>、 <code>/usr/lib</code>、 <code>/usr/local/lib</code>。</li></ol></li></ul></li><li><p><strong>动态库</strong></p><ul><li><p><strong>特点</strong>：可执行程序运行时才载入内存的，在编译过程中仅简单的引用，因此代码体积较小；</p></li><li><p><strong>命名</strong>：.so为后缀，lib为前缀，通常还会加上版本号， 例如 <code>libtest.a.0.1</code> ;</p></li><li><p><strong>生成</strong>：<code>g++</code>工具可生成；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ -c Libtest.cpp -o libtest.o</span><br><span class="line">g++ -shared  libtest.o -o libtest.so.1.0</span><br></pre></td></tr></table></figure></li><li><p><strong>链接路径</strong>：</p><ol><li><strong>参数-L</strong>：ld会去找gcc/g++命令中的参数<code>-L</code>指定的路径；</li><li><strong>环境变量</strong>：gcc的环境变量<code>LD_LIBRARY_PATH</code>，它指定程序<strong>动态</strong>链接库文件搜索路径；</li><li><strong>配置文件</strong>：配置文件 <code>/etc/ld.so.conf</code> 中指定动态库路径；</li><li><strong>默认库</strong>：再找默认库目录 <code>/lib</code>、 <code>/usr/lib</code>。</li></ol></li></ul></li></ul><h3 id="g-Makefile-CMake">g++/Makefile/CMake</h3><p>在前面我们简单使用g++进行文件编译、执行。当然，主要还是偏“<strong>务虚</strong>”探讨了下编译的过程及原理。</p><p>接下来，我们将偏”<strong>务实</strong>“的介绍一下基本三大编译工具的使用 ：g++/Makefile/CMake。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/catkin.jpg" alt="ROS课程讲义--2.1 Catkin编译系统_jinking01的专栏-CSDN博客"></p><p>三者关系如上图所示。</p><ul><li><strong>gcc/g++</strong>：Linux编译器有gcc/g++，随着源文件的增加，直接用gcc/g++命令的方式<strong>效率较低</strong>，于是发明了Makefile来进行编译；</li><li><strong>Makefile</strong>： Makefile描述了整个工程的编译、链接等规则，可以<strong>有效的减少大工程中需要编译和链接的文件，只编译和链接那些需要修改的文件</strong>。然而随着工程体量的增大，Makefile也不能满足需求，于是便出现了Cmake工具；</li><li><strong>CMake</strong>：CMake是一个跨平台的编译(Build)工具，可以用简单的语句来描述所有平台的编译过程。早期的make需要程序员写Makefile文件进行编译，而现在CMake能够通过对<a href="https://www.zhihu.com/search?q=cmakelists.txt&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A%2255027085%22%7D">CMakeLists.txt</a>的编辑，<strong>轻松实现对复杂工程的组织</strong>。</li></ul><p>下面我们来进行具体实操练习掌握。</p><h3 id="Makefile">Makefile</h3><h4 id="快速入门-2">快速入门</h4><p>Makefile基本格式如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;target&gt; : &lt;prerequisites&gt; </span><br><span class="line">[tab]  &lt;commands&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>target（目标）</strong> ： 目标文件, 可以是 Object File, 也可以是可执行文件；</p></li><li><p><strong>prerequisites（前置条件）</strong> ： 生成target所需要的文件或者目标；</p></li><li><p><strong>command（命令）</strong>： make需要执行的命令(任意的shell命令)，Makefile中的命令必须以 <code>[tab],即四个空格</code> 开头。</p></li></ul><p><strong>基本语法</strong></p><blockquote><p>先熟悉以下偏理论总结上的东西，实践时互相验证效果更好~</p></blockquote><p>Makefile包含了五个重要的东西：<strong>显示规则、隐晦规则、变量定义、文件指示和注释</strong>。</p><ul><li><strong>显示规则</strong>： 即<strong>需要指明target和prerequisite文件</strong>。<ul><li><u>一条规则可以包含多个target</u>，这意味着其中每个target的prerequisite都是相同的；</li><li><u>当其中的一个target被修改后</u>，整个规则中的其他target文件都会被重新编译或执行。</li></ul></li><li><strong>隐晦规则</strong>：make自动推导功能所执行的规则。</li><li><strong>变量和定义</strong>：Makefile中定义的变量，一般是字符串。</li><li><strong>文件指示</strong>：通常指以下<ol><li>Makefile中引用其他Makefile；</li><li>指定Makefile中有效部分；</li><li>定义一个多行命令。</li></ol></li><li><strong>注释</strong>：只有行注释<code>#</code> 。</li></ul><h5 id="一起试试">一起试试</h5><p>我们准了一段代码<code>DisplayImage.cpp</code>：使用c++和opencv对图片进行读取和显示。</p><p>为了方便阅读，代码已经尽量精简。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 读取</span></span><br><span class="line">    Mat image = cv.<span class="built_in">imread</span>( argv[<span class="number">1</span>], <span class="number">1</span> );</span><br><span class="line">    <span class="comment">// 显示</span></span><br><span class="line">    cv.<span class="built_in">namedWindow</span>(<span class="string">&quot;Display Image&quot;</span>, WINDOW_AUTOSIZE );</span><br><span class="line">    cv.<span class="built_in">imshow</span>(<span class="string">&quot;Display Image&quot;</span>, image);</span><br><span class="line">    cv.<span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先给出已完成的Makefile文件：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/home/royhuang/lib/pkgconfig</span><br><span class="line"></span><br><span class="line">CXXFLAGS:=<span class="variable">$(<span class="built_in">shell</span> pkg-config --cflgs --libs opencv)</span></span><br><span class="line"></span><br><span class="line"><span class="section">DispalyImage:DispalyImage.o</span></span><br><span class="line">g++ DispalyImage.o -o DispalyImage</span><br><span class="line"><span class="section">DispalyImage.o:DispalyImage.cpp</span></span><br><span class="line">        g++ -c DispalyImage.cpp -o DispalyImage.o</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm *o test</span><br></pre></td></tr></table></figure><p>现在建议我们<strong>从下往上</strong>分析：</p><ol><li><p><strong>编写clean</strong> ：删除所有的.o文件和可执行文件，避免过多的中间文件产生；</p></li><li><p><strong>编写 DispalyImage.o:DispalyImage.cpp</strong> ：根据之前的格式，<code>target  : prerequisites</code> ，这个时候 <code>target</code> 为   <strong>DispalyImage.o</strong> ，<code>prerequisites</code> 为<strong>DispalyImage.cpp</strong> 。</p><p>下一行的g++命令，将cpp文件进行编译为object file（<code>.o</code> 文件）。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">DispalyImage.o:DispalyImage.cpp</span></span><br><span class="line">        g++ -c DispalyImage.cpp -o DispalyImage.o</span><br></pre></td></tr></table></figure></li><li><p><strong>编写 DispalyImage:DispalyImage.o</strong> ：在上一步我们得到了编译后的目标文件 DispalyImage.o 。现在我们可以build生成可执行文件DispalyImage。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">DispalyImage:DispalyImage.o</span></span><br><span class="line">g++ DispalyImage.o -o DispalyImage</span><br></pre></td></tr></table></figure></li><li><p><strong>应用OpenCV库和头文件</strong> 。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/home/royhuang/lib/pkgconfig</span><br><span class="line"></span><br><span class="line">CXXFLAGS:=<span class="variable">$(<span class="built_in">shell</span> pkg-config --cflgs --libs opencv)</span></span><br></pre></td></tr></table></figure><ul><li><p><code>PKG_CONFIG_PATH</code> ：添加指定路径到环境变量。如上例，添加了路径<code>/home/royhuang/lib/pkgconfig</code>到环境变量 ，这样我们就可以直接在命令行中使用<code>pkg-config</code>命令 。</p></li><li><p><code>CXXFLAGS</code> ：指定文件（.h文件或lib文件）的路径，使得编译时可以找到相应头文件和库文件。</p><p>在本例中，<code>pkg-config</code>命令可查看opencv的include头文件的路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --libs 参数可查看库文件</span></span><br><span class="line">shell pkg-config --cflgs  opencv</span><br></pre></td></tr></table></figure><p>同时引入头文件和库文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-config opencv --cflgs --libs opencv</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>有了<code>makefile</code>文件后，我们就可以make生成可执行文件<code>DisplayImage</code>了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动查找当前目录下叫“Makefile”或“makefile”的文件</span></span><br><span class="line">make </span><br><span class="line"><span class="comment"># 显示图像</span></span><br><span class="line">./DisplayImage ../01.jpg</span><br></pre></td></tr></table></figure><p>从上也可总结出：<strong>Makefile 包含了所有的规则和目标，而 make 则是为了完成目标而去解释 Makefile 规则的工具</strong>。</p><p>总的来说，Makefile的基本套路就是以上，熟练使用需要实际项目多练习下。</p><h4 id="进阶学习">进阶学习</h4><p>这里准备举一些较复杂的项目，怎么来编写Makefile文件。</p><p>但是一般较复杂的项目我现在一般用<strong>CMake</strong>，也是后文需要介绍的。因此这里复杂项目Makefile编写案例，暂时留白，后续补上。</p><p>当然，你可以先看看：<a href="https://www.ruanyifeng.com/blog/2015/02/make.html">Make 命令教程 - 阮一峰</a> 。</p><h3 id="CMake">CMake</h3><p>早期的make需要程序员写Makefile文件，进行编译。而现在CMake能够通过对<code>CmakeLists.txt</code>的编辑，轻松实现对复杂工程的组织。</p><h4 id="快速入门-3">快速入门</h4><p>首先，我们在Linux系统（CentOS）下安装下CMake：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install cmake</span><br></pre></td></tr></table></figure><p>一般使用CMake生成Makefile并编译的流程如下：</p><ol><li>编写<code>CMakeLists.txt</code>，假定其路径为<code>PATH</code>；</li><li>执行命令<code>cmake PATH</code>生成Makefile；</li><li>最后使用<code>make</code>进行编译。</li></ol><h5 id="一起试试-2">一起试试</h5><p>我们准备一个<code>hello.cpp</code> 文件，它所在的目录如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|-- build  <span class="comment"># cmake生成的中间文件都放这</span></span><br><span class="line">|-- hello.cpp</span><br><span class="line">|-- CMakeLists.txt <span class="comment"># 每个子目录下都要有CMakeLists.txt文件</span></span><br></pre></td></tr></table></figure><p>文件内容很简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* hello.cpp */</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello Cpp!&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们编写的<code>CMakeLists.txt</code>，每一行代码解释如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式：&lt;命令名&gt;(参数 参数值) ，中间参数空格隔开</span></span><br><span class="line"><span class="comment"># 设置项目名</span></span><br><span class="line"><span class="keyword">project</span>(helloDemo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限定CMAKE最低版本</span></span><br><span class="line"><span class="keyword">CMAKE_MINIMUM_REQUIRED</span>(VERSION <span class="number">2.6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索当前目录所有源代码文件，并赋值给PROJECT_ROOT_SRCS</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. PROJECT_ROOT_SRCS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加C++11特性</span></span><br><span class="line"><span class="keyword">add_definitions</span>(-std=c++<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add_executable 从一组源文件编译出一个可执行文件 </span></span><br><span class="line"><span class="comment"># 这里将$&#123;PROJECT_ROOT_SRCS&#125;中文件编译，生成可执行文件hello.out</span></span><br><span class="line"><span class="keyword">add_executable</span>(hello.out <span class="variable">$&#123;PROJECT_ROOT_SRCS&#125;</span>)</span><br></pre></td></tr></table></figure><p>开始编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成makefile等中间文件</span></span><br><span class="line"><span class="comment"># 生成的可执行文件 【如果要可以被调试】，还要带上参数：cmake -DCMAKE_BUILD_TYPE:STRING=Debug</span></span><br><span class="line"><span class="built_in">cd</span> ./build  &amp;&amp; cmake ..</span><br><span class="line"><span class="comment"># 生成可执行文件</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>最后执行刚刚生成的可执行文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.out</span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211209221810181.png" alt="image-20211209221810181"></p><p>看到这里，相信你对CMake有了个基本的认知。在前面我们也知道，CMake通常是用来编译大型项目的。</p><p>那么，<strong>大型项目结构是什么样的？又如何进行编译呢</strong>？</p><h4 id="大型项目结构">大型项目结构</h4><blockquote><p>主要参考：<a href="https://github.com/hattonl/cpp-project-structure">cpp-project-structure</a>。</p></blockquote><p>这里假定项目名为 <code>my_poject</code> ，一个完整的大项目结构通常如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">my_poject  </span><br><span class="line">├── deploy <span class="comment"># 存放部署、交付的文件 </span></span><br><span class="line">│   └── bin      <span class="comment"># 项目生成的可执行文件</span></span><br><span class="line">│   └── lib      <span class="comment"># 项目生成的库文件</span></span><br><span class="line">│   └── include  <span class="comment"># 项目对外提供的头文件</span></span><br><span class="line">├── build  <span class="comment"># 存放cmake产生的中间文件</span></span><br><span class="line">│   └── release</span><br><span class="line">│   └── debug  </span><br><span class="line">├── doc      <span class="comment"># 存放项目文档</span></span><br><span class="line">├── src      <span class="comment"># 存放资源文件</span></span><br><span class="line">│   └── pic            </span><br><span class="line">├── 3rdparty <span class="comment"># 存放第三方库</span></span><br><span class="line">│   └── lib       <span class="comment"># 库文件  </span></span><br><span class="line">│   └── include   <span class="comment"># 头文件</span></span><br><span class="line">├── my_poject <span class="comment"># 项目【代码源文件】</span></span><br><span class="line">|   └── module_1</span><br><span class="line">│        ├── 1.cpp</span><br><span class="line">│        ├── 1.h</span><br><span class="line">│        ├── CMakeLists.txt</span><br><span class="line">|   └── module_2</span><br><span class="line">│        ├── 2.cpp</span><br><span class="line">│        ├── 2.h</span><br><span class="line">│        ├── CMakeLists.txt</span><br><span class="line">├── tools     <span class="comment"># 项目构建支持工具，如编译器</span></span><br><span class="line">├── scripts   <span class="comment"># 脚本文件，如预处理脚本</span></span><br><span class="line">├── config    <span class="comment"># 配置文件</span></span><br><span class="line">│   └── xxx.yml       </span><br><span class="line">│   └── yyy.yml   </span><br><span class="line">├── <span class="built_in">test</span>      <span class="comment"># 测试代码</span></span><br><span class="line">├── LICENSE   <span class="comment"># 版权信息</span></span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── build.sh  <span class="comment"># 构建项目的脚本</span></span><br><span class="line">├── .gitignore</span><br><span class="line">├── README.md <span class="comment"># 项目说明文件</span></span><br><span class="line">└── sample    <span class="comment"># 示例代码</span></span><br></pre></td></tr></table></figure><h4 id="编译复杂项目">编译复杂项目</h4><p>现在我们举一个复杂点的，<strong>多层级项目</strong>如何用CMake进行编译。</p><p>整个目录结构如下（为方便，进行了精简）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">|-- 3rdparty </span><br><span class="line">|   |-- include</span><br><span class="line">|   `-- lib</span><br><span class="line">|-- deploy </span><br><span class="line">|   |-- bin</span><br><span class="line">|   `-- lib</span><br><span class="line">|-- build</span><br><span class="line">|-- hello  <span class="comment"># 整个项目源码</span></span><br><span class="line">|   |-- module1</span><br><span class="line">|   |   |-- people.cpp</span><br><span class="line">|   |   |-- people.h</span><br><span class="line">|   |   `-- CMakeLists.txt</span><br><span class="line">|   |-- module2</span><br><span class="line">|   |   |-- bird.cpp</span><br><span class="line">|   |   |-- bird.h</span><br><span class="line">|   |   `-- CMakeLists.txt</span><br><span class="line">|   |-- hello.cpp</span><br><span class="line">|   |-- CMakeLists.txt</span><br><span class="line">|-- LICENSE</span><br><span class="line">|-- README.md</span><br><span class="line">|-- src</span><br><span class="line">|   `-- video</span><br><span class="line">|       `-- 1577414323962.mp4</span><br></pre></td></tr></table></figure><p>其中<code>hello</code>目录下各源文件如下：</p><ul><li><p><code>moule1/people</code> 相关源码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*people.cpp*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;people.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">people_hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;people say : Hello Cpp!&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*people.h*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">people_hello</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p><code>moule2/bird</code> 相关源码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*bird.cpp*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bird.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bird_hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;bird say : Hello Cpp!&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*bird.h*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bird_hello</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p><code>hello/hello.cpp</code> 源码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;./module1/people.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;./module2/bird.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">people_hello</span>();</span><br><span class="line">    <span class="built_in">bird_hello</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最后给出各个目录下的CMakeLists.txt文件。</p><div class="tabs" id="tags"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tags-1">module1</button></li><li class="tab"><button type="button" data-href="#tags-2">module2</button></li><li class="tab"><button type="button" data-href="#tags-3">hello</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tags-1"><ul><li><p><strong>module1</strong></p><p>编译生成动态库<code>libmodule1.so</code> 。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找当前目录（module1）下的相关文件,并赋值给MODULE1_SRC</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. MODULE1_SRC)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将指定的源文件（MODULE1_SRC）生成库文件libmodule1.so</span></span><br><span class="line"><span class="comment"># 【注1】不需要写全libmodule1.so，只需写module即可，cmake会自动补全。</span></span><br><span class="line"><span class="comment"># 【注2】SHARED参数指定生成动态库（.so文件），不加参数默认生成静态库（.a）文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(module1 SHARED <span class="variable">$&#123;MODULE1_SRC&#125;</span>)</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-2"><ul><li><p><strong>module2</strong></p><p>编译生成动态库<code>libmodule2.so</code> ，基本同前。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找当前目录（module2）下的相关文件,并赋值给MODULE2_SRC</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. MODULE2_SRC)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将指定的源文件（MODULE1_SRC）生成库文件libmodule1.so</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(module2 SHARED <span class="variable">$&#123;MODULE2_SRC&#125;</span>)</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-3"><ul><li><p><strong>hello</strong></p><p>编译生成可执行文件<code>hello.out</code> ，然后链接<code>libmodule1.so</code>和 <code>libmodule2.so</code>。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式：&lt;命令名&gt;(参数 参数值) ，中间参数空格隔开</span></span><br><span class="line"><span class="comment"># 设置项目名</span></span><br><span class="line"><span class="keyword">project</span>(helloDemo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置可执行文件保存路径</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/../deploy/bin)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限定CMAKE最低版本</span></span><br><span class="line"><span class="keyword">CMAKE_MINIMUM_REQUIRED</span>(VERSION <span class="number">2.6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将module1和module2文件夹加入子目录,这样cmake就可以去其中查找编译</span></span><br><span class="line"><span class="comment"># 【注1】没有这个会报错，ld:找不到 -lmoudle1 和 -lmoudle2</span></span><br><span class="line"><span class="comment"># 【注2】这里只能用相对路径，不是hello项目下的路径，是指</span></span><br><span class="line"><span class="comment">#       build下的相对路径。</span></span><br><span class="line"><span class="comment">#       因为最后make是在build路径下，libmoudule1.so和</span></span><br><span class="line"><span class="comment">#       libmoudule2.so是分别保存在build/moudle1 和build/module2下</span></span><br><span class="line"><span class="keyword">ADD_SUBDIRECTORY</span>(./module1) </span><br><span class="line"><span class="keyword">ADD_SUBDIRECTORY</span>(./module2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索当前目录所有源代码文件，并赋值给PROJECT_ROOT_SRCS</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. PROJECT_ROOT_SRCS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加C++11特性</span></span><br><span class="line"><span class="keyword">add_definitions</span>(-std=c++<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 【编译】</span></span><br><span class="line"><span class="comment"># add_executable 从一组源文件编译出一个可执行文件 </span></span><br><span class="line"><span class="comment"># 这里将$&#123;PROJECT_ROOT_SRCS&#125;中文件编译，生成可执行文件hello.out</span></span><br><span class="line"><span class="keyword">add_executable</span>(hello.out <span class="variable">$&#123;PROJECT_ROOT_SRCS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 【链接】</span></span><br><span class="line"><span class="comment"># 将目标文件与库文件进行链接，不显示指示文件后缀（如 module1.so），优先链接动态库</span></span><br><span class="line"><span class="keyword">TARGET_LINK_LIBRARIES</span>(</span><br><span class="line">    hello.out </span><br><span class="line">    module2 </span><br><span class="line">    module1</span><br><span class="line">) </span><br></pre></td></tr></table></figure><p>特别的，如果你还引用了第三方库，还应该做如下修改。</p><blockquote><p>假设你引用的第三方库为<code>ffmpeg</code> ，相关头文件和库文件都放在<code>3rdparty</code>目录下。</p></blockquote><ul><li><p>增加ffmpeg库文件和头文件搜索路径</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 头文件搜索路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>../<span class="number">3</span>rdparty/inclue)</span><br><span class="line"><span class="comment"># 库文件搜索路径</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>../<span class="number">3</span>rdparty/lib)</span><br></pre></td></tr></table></figure></li><li><p>链接ffmepeg相应库</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 链接ffmpeg库</span></span><br><span class="line"><span class="comment"># 将目标文件与库文件进行链接</span></span><br><span class="line"><span class="keyword">TARGET_LINK_LIBRARIES</span>(</span><br><span class="line">    hello.out </span><br><span class="line">    module2 </span><br><span class="line">    module1</span><br><span class="line">    libavcodec.so   <span class="comment"># 显示指定动态库</span></span><br><span class="line">    libavdevice.so  </span><br><span class="line">    libavfilter.so</span><br><span class="line">    libavformat.so</span><br><span class="line">    libavutil.so</span><br><span class="line">    libpostproc.so</span><br><span class="line">    libswresample.so</span><br><span class="line">    libswscale.so</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>准备好所有的文件后，我们开始进行cmake构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./build</span><br><span class="line">cmake ../hello &amp;&amp; make</span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211210122630662.png" alt="image-20211210122630662"></p><p>在<code>bin</code> 下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../deploy/bin/hello.out </span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211210122942175.png" alt="image-20211210122942175"></p><p>👨‍💻 CMake相关介绍到此完结。</p><h3 id="写在最后">写在最后</h3><p>这篇博客主要介绍了编译的基本过程和原理，以及常用的编译工具（g++/Makefile/CMake）使用。</p><p>从构思大纲到最后初步完工大概用了五天，比最初预估的进度多花了一倍时间。最主要的原因就是中间我一直在删删改改，特别是写<u>编译过程初探</u>这一节：<strong>每写完一个版本，我就自己先看一遍再问自己：你真的能看明白吗</strong>？还是有些不理解的地方，就继续Google些资料看，直到把自己说服----至少文章逻辑上自恰了。同时也更深刻地体会到了：<strong>自己觉得懂了可能不是真的懂了，能把别人讲明白才可能算是懂了</strong>。</p><p>C++环境相关介绍就先告一段落了，接下来准备整理一下<strong>C++基础相关知识</strong>（有事情做的感觉还不错😀 ），回复完论文评审意见后尽快开始更新。</p><h3 id="更新记录">更新记录</h3><div class="timeline"><div class="timenode"><div class="meta"><p><p>2021-12-20 ：更新笔记</p></p></div><div class="body"><ol><li>增加g++相关介绍</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-12-10 ：上传初稿</p></p></div><div class="body"><ol><li>第一次更新，发布初稿</li></ol></div></div></div><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">g++，CMake和Makefile了解一下 ： https://zhuanlan.zhihu.com/p/55027085<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Linux下使用CMake编译C++：https://zhuanlan.zhihu.com/p/373256365<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">阮一峰--编译器的工作过程：http://www.ruanyifeng.com/blog/2014/11/compiler.html<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">符号解析：https://www.jianshu.com/p/2786533a34c9<a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">计算机原理系列之七-链接过程分析：https://luomuxiaoxiao.com/?p=572<a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">静态链接与动态链接在链接过程和文件结构上的区别：https://www.polarxiong.com/<a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">gcc编译生成可执行文件的过程中发生了什么：https://blog.csdn.net/albertsh/article/details/89309107<a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">C/C++中关于静态链接库(.a)、动态链接库（.so）的编译与使用：https://blog.csdn.net/qq_27825451/article/details/105700361<a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">cpp_new_features：https://github.com/0voice/cpp_new_features/blob/main/<a href="#fnref:9" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 从零开始 </category>
          
          <category> C++基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 教程 </tag>
            
            <tag> C++基础 </tag>
            
            <tag> CMake </tag>
            
            <tag> Makefile </tag>
            
            <tag> g++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++从零开始（零）</title>
      <link href="/p/62712/"/>
      <url>/p/62712/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>🖋 《C++从零开始》系列，持续更新中…</p></blockquote><p>这个系列虽然名为：《C++从零开始》，但细细算来，我已经不止系统性地学过C++一次了。说来惭愧，每次目的也都是为了对付考试，取个不错的成绩而下点苦工罢了。</p><p>阴差阳错，<a href="https://hwh.zone/p/29708/">我明年即将入职腾讯，并以C++开始自己职业生涯的第一站</a>，正好在校还有段较清闲的时光，于是下笔写了这个C++系列笔记。<strong>一是分享记录</strong>，希望能对同样学习C++的读者有点帮助；<strong>二是好记性不如烂笔头</strong>，能帮助自己时时记忆和温习。</p><p>动笔前，我仔细构思了下该系列笔记的整体结构，下节会开始介绍具体介绍。</p><ul><li>特别的，这个系列处于初建状态，文章可能会由于更新等原因和之前版本有所不同；</li><li>所有的文章更新记录变化，可以在第三大节：<strong>更新记录</strong>中查看。</li></ul><h3 id="总目录">总目录</h3><blockquote><p>⏰ 最后更新时间：<code>2021/12/05 18:00</code> 。</p></blockquote><p>系列总结构暂分为：C++基础<sup id="fnref:0"><a href="#fn:0" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="C++教程从0到1入门编程：https://www.bilibili.com/video/BV1et411b73Z">[0]</span></a></sup><sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="腾讯云C++教程：https://cloud.tencent.com/edu/learning/course-1844-21296">[5]</span></a></sup>、C++进阶<sup id="fnref:0"><a href="#fn:0" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="C++教程从0到1入门编程：https://www.bilibili.com/video/BV1et411b73Z">[0]</span></a></sup><sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="腾讯云C++教程：https://cloud.tencent.com/edu/learning/course-1844-21296">[5]</span></a></sup>、C++面经<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="阿秀的求职笔记：https://interviewguide.cn/">[1]</span></a></sup>、C++开源<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="zavar开源地址: https://github.com/zyearn/zaver">[2]</span></a></sup><sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="ffmpeg-trancode开源地址: https://github.com/leichn/exercises/tree/master/source/ffmpeg/ffmpeg_transcode">[3]</span></a></sup><sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="SRS开源地址：https://github.com/ossrs/srs">[4]</span></a></sup>，四大板块。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><strong>文章</strong></th><th style="text-align:center"><strong>备注</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>C++基础</strong></td><td style="text-align:center"><a href="https://hwh.zone/p/18652/">C++从零开始（一）：环境搭建（上）之VSCode远程开发</a></td><td style="text-align:center">✔️更新完成</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://www.hwh.zone/p/2834">C++从零开始（一）：环境搭建（下）g++/Makefile/CMake快速入门</a></td><td style="text-align:center">✔️更新完成</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="">C++从零开始（二）：基础语法（上）之快速入门</a></td><td style="text-align:center">🔨 更新ing</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="">C++从零开始（二）：基础语法（中）之面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="">C++从零开始（二）：基础语法（下）之模板</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>C++进阶</strong></td><td style="text-align:center"><a href="">C++从零开始（三）：STL（上）之快速入门</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="">C++从零开始（三）：STL（中）之容器</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="">C++从零开始（三）：STL（下）之实战</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="">C++从零开始（四）：C++新特性之C++11</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>C++面经</strong></td><td style="text-align:center"><a href="">C++从零开始（五）：C++面经之基础语法</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="">C++从零开始（六）：C++面经之内存管理</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="">C++从零开始（七）：C++面经之C++11</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="">C++从零开始（八）：C++面经之STL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="">C++从零开始（九）：C++面经之其它补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>C++开源</strong></td><td style="text-align:center"><a href="">C++从零开始（十）：C++开源之Zaver源码分析</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="">C++从零开始（十一）：C++开源之实现自己的ffmpeg转码器</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="">C++从零开始（十二）：C++开源之SRS源码分析</a></td><td style="text-align:center"></td></tr></tbody></table><h3 id="写在最后">写在最后</h3><blockquote><p>⏲ 更新时间：<code>2021/12/05 17:00</code> 。</p></blockquote><p>从玩到无聊开始学习到十二月初给自己挖了个大坑，<code>play hard study hard</code> 居然不知不觉成了我的行为习惯。当然，玩到胖了十多斤并不是我本意…</p><p>借此机会，提前许下几个新年愿望（是的，就是这么突然）：</p><ul><li>三个月内顺利更新完这个系列大部分文档；</li><li>多花点时间学习，不能过分玩乐；</li><li>少熬夜，多喝茶；</li><li>如意考试顺利。</li></ul><p>敬请期待~ 😋 （顺便分享一下<s>我的新插件</s>一首应景的小诗）</p><div class='poem'><div class='poem-title'>[飞鸟集]</div><div class='poem-author'>[泰戈尔]</div><p>闲暇在动作时</p><p>便是工作。<br>静止的海水荡动时</p><p>便成波涛。</p></div><h3 id="更新记录">更新记录</h3><div class="timeline"><div class="timenode"><div class="meta"><p><p>2021-12-10 ：文章更新</p></p></div><div class="body"><ol><li><a href="https://www.hwh.zone/p/2834">C++从零开始（一）：环境搭建（下）g++/Makefile/CMake快速入门</a>更新完毕</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-12-06 ：文章更新</p></p></div><div class="body"><ol><li><a href="https://hwh.zone/p/18652/">C++从零开始（一）：环境搭建（上）之VSCode远程开发</a> 更新完毕</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-12-05 ：第一次更新</p></p></div><div class="body"><ol><li>初步确定《C++从零开始系列》大纲</li><li>即将更新：<code>C++基础系列</code></li></ol></div></div></div><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:0"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">0.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">C++教程从0到1入门编程：https://www.bilibili.com/video/BV1et411b73Z<a href="#fnref:0" rev="footnote"> ↩</a></span></li><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">阿秀的求职笔记：https://interviewguide.cn/<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">zavar开源地址: https://github.com/zyearn/zaver<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">ffmpeg-trancode开源地址: https://github.com/leichn/exercises/tree/master/source/ffmpeg/ffmpeg_transcode<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">SRS开源地址：https://github.com/ossrs/srs<a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">腾讯云C++教程：https://cloud.tencent.com/edu/learning/course-1844-21296<a href="#fnref:5" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 从零开始 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github Pages快速打造属于自己的网站</title>
      <link href="/p/56326/"/>
      <url>/p/56326/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>⚠️ 阅读本文前，默认你具有：</p><ol><li>git操作基本知识</li><li>Linux操作基本知识</li><li>网络相关基本知识</li></ol><p>如果操作遇到困难，可在文章下方进行留言😃。</p></blockquote><h3 id="前言">前言</h3><blockquote><p>迫不及待？建站效果实时预览：<a href="https://hwh.zone/">royhuang‘s blog</a> 。</p></blockquote><div class="tag link"><a class="link-card" title="royhuang's blog" href="https://www.hwh.zone"><div class="left"><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/cat-modified.png"/></div><div class="right"><p class="text">royhuang's blog</p><p class="url">https://www.hwh.zone</p></div></a></div><p>第一次建站时还是三年前用<strong>WordPress</strong>搭建，网站放在腾讯云VPS上运行。因为机器配置较低比较卡，有次暴躁debug把整个服务器remake了，不了了之。再后面又因为对<strong>Java Web开发</strong>比较感兴趣，折腾了SpringBoot Web开发和前后端相关知识，打算自己<strong>完全前后端自主开发</strong>一个博客。因为主客观各种原因，做了一个残次品，阴差阳错最后要以C++开始自己职业生涯第一站，也没有最终完善。</p><p>趁着这段时间，使用<strong>Hexo+Github Pages</strong> 作为最终建站方案折腾了几天，总体来说效果还比较满意。为了后来人少踩点坑，同时为自己糟糕的记忆留点回忆，特此记录。</p><h3 id="主流建站方式比较">主流建站方式比较</h3><p>在正式开始前，我们不妨先来分析下主流建站方式，做到心中有数。自然，此节也可以略过。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">建站难度</th><th style="text-align:center">所需知识</th><th style="text-align:center">定制化程度</th><th style="text-align:center">适合人群</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>WordPress</strong></td><td style="text-align:center">⭐️⭐️</td><td style="text-align:center">Linux、Git基本知识</td><td style="text-align:center">一般</td><td style="text-align:center">Web开发小白人群</td><td style="text-align:center">之前写的教程：<a href="https://blog.csdn.net/hwh1996/article/details/90666775">教练,我想建网站！</a></td></tr><tr><td style="text-align:center"><strong>Java Web</strong></td><td style="text-align:center">⭐️⭐️⭐️⭐️</td><td style="text-align:center">Web前后端开发知识，多且杂</td><td style="text-align:center">非常高，前后端代码全栈开发</td><td style="text-align:center">Java Web开发人员</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>Hexo + Github Pages</strong></td><td style="text-align:center">⭐️⭐️</td><td style="text-align:center">Linux、Git基本知识</td><td style="text-align:center">较高，基于配置文件修改较方便</td><td style="text-align:center">Web开发小白人群</td><td style="text-align:center"><strong>不需要备案域名</strong></td></tr><tr><td style="text-align:center"><strong>Hexo + 腾讯云</strong></td><td style="text-align:center">⭐️⭐️</td><td style="text-align:center">同上</td><td style="text-align:center">同上</td><td style="text-align:center">同上</td><td style="text-align:center"><strong>域名需要备案</strong>，但网站访问速度会变快很多</td></tr></tbody></table><p>根据以上，我们可以根据不同情况进行选择：</p><ul><li><p><strong>Java Web全栈搭建</strong>？</p><ul><li>适合Java Web为技术栈的<strong>专业人员</strong>，可以作为个小项目；</li><li>但如果你<strong>并非专业</strong>的Java Web开发人员，不想学习复杂的Java Web体系，但是又具备开发基础知识，想搭建一个漂亮的博客：<strong>WordPress 和 Hexo是你不二的选择</strong>。</li></ul></li><li><p><strong>WordPress还是Hexo</strong><sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="从wordpress到hexo：https://www.wenjinyu.me/zh/from-wordpress-to-hexo-my-blog-should-have-been-like-this/">[3]</span></a></sup>  ？</p><p>作为都体验过的人，我说说一下自己比较主观的对比：</p><ul><li>WordPress优点：很简单，适合特别小白的同学；</li><li>WordPress缺点：占用资源多，<strong>响应慢</strong>；<strong>不支持原生markdown</strong>（每次要导出.html太痛苦了）；主题也不够合心意（不美观）。</li></ul><p>所以我自己（有开发基础）还是推荐使用Hexo。</p></li><li><p><strong>Hexo + Github Pages 还是 Hexo + 腾讯云</strong>?</p><ul><li><strong>Github Pages 托管网站</strong>：因为服务器在国外（Github），域名无需备案，但访问速度会比较慢，也无需购买云服务器；</li><li><strong>腾讯云托管网站</strong>：需要购买云服务器（或COS），且域名需要备案，但访问速度会很快。</li></ul></li></ul><p>因为本文考虑<strong>更低成本，我也比较懒不想备案，访问速度虽然慢点但还能接受</strong>，所以采用Hexo + Github Pages作为最终的建站方案。</p><p>好了，现在让我们开始激动人心的环节吧，动手搭建自己的网络快乐小窝。</p><h3 id="Hexo-Github-Pages">Hexo + Github Pages</h3><p>Hexo是一款基于Node.js的静态博客框架，<strong>依赖少易于安装使用</strong>，可以方便的生成静态网页<strong>托管在GitHub Pages上</strong>（<u>无需云服务器</u>），是搭建博客的首选框架<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Hexo 知乎教程：https://zhuanlan.zhihu.com/p/26625249">[2]</span></a></sup>。</p><p>用大白话来说就是：</p><ul><li>Hexo：用来将我们写的文章，渲染<strong>生成本地生成静态网页</strong> ，但只有你自己能看到；</li><li>Github Pages : 将Hexo生成的静态网页，<strong>部署托管到云服务器（Github Pages，VPS，COS均可）上</strong>，这样别人也可以访问。</li></ul><h4 id="快速开始">快速开始</h4><blockquote><p>以下主要操作均已在虚拟机中经过二次验证。</p></blockquote><h5 id="准备工作：Github-Git">准备工作：Github &amp; Git</h5><ol><li><p>创建Github个人仓库</p><p>⚠️ 注意命令方式必须为：<code>你的Github用户名.github.io</code> ，这种形式。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211202204544684.png" alt="image-20211202204544684"></p><ul><li><p><strong>登陆用户名和昵称分不清</strong>?你的个人主页，下面红框所示才是你的用户名。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211209194854716.png" alt="image-20211209194854716"></p></li><li><p>我已创建过该项目，故显示重复</p></li></ul></li><li><p>安装Git</p><p><a href="https://git-scm.com/downloads">Git下载地址</a> , 安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，则Git安装成功。</p><p>同时还需配置基本Github相关信息，主要是用户名和邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Wanghui-Huang&quot;</span>    </span><br><span class="line">$ git config --global user.email <span class="string">&quot;380141202@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>本文默认你具备基本Git相关知识，故不再赘述，如果不具备可以学习：<a href="https://hwh.zone/p/43848/">Git基础笔记</a> 。</p></li><li><p>安装Node.js</p><blockquote><p>Hexo基于Node.js，自然需要安装相关组件。</p></blockquote><p>下载 <a href="https://nodejs.org/en/download/">Node.js </a>  , 一直默认安装即可（不要随意勾选）。</p><p>安装成功后，分别输入 <code>node -v</code> &amp; <code>npm -v</code>，出现以下版本信息则安装成功：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211202211811979.png" alt="image-20211202211811979"></p></li></ol><h5 id="搭建Hexo">搭建Hexo</h5><ol><li><p>新建文件夹</p><p>我们在合适的路径新建一个文件夹，命名随意，我命名为：<code>www.hwh.zone</code>。</p></li><li><p>安装Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure></li><li><p>初始化博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./www.hwh.zone/</span><br><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></li><li><p>本地测试验证</p><blockquote><p>⚠️ 注意以下命令全部都在：<code>./www.hwh.zone/blog</code> 路径下执行。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./blog/</span><br><span class="line">hexo new test_my_site  <span class="comment"># 生成一篇新文章</span></span><br><span class="line">hexo g  <span class="comment"># 生成静态文件（网页）</span></span><br><span class="line">hexo s  <span class="comment"># 本地生成静态网站预览</span></span><br></pre></td></tr></table></figure><p>执行完毕后，输入：<a href="http://localhost:4000">http://localhost:4000</a> ，出现以下页面则生成成功：</p><blockquote><p>如果<code>hexo s</code> 执行成功，浏览器却打不开，通常是端口（4000）被占用。可以设置hexo使用别的端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p 4001</span><br></pre></td></tr></table></figure><p>然后输入：<a href="http://localhost:4001">http://localhost:4001</a> ，重新打开即可。</p></blockquote><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/53_21AIX_V3NIT9L0O6_H$8.png" alt="img"></p><p>现在你已经初步搭建好了自己的网站，现在让我们开始<strong>发布自己的网站</strong>，让更多人看到~</p></li><li><p>配置远程推送信息</p><p>在 <code>./www.hwh.zone/blog</code> 路径下，找到<strong>主配置文件：__config.yml</strong> ：</p><ul><li>[注1]：因为这个文件<strong>很重要</strong>，特附图示例 。</li><li>[注2]：该配置文件对<strong>缩进</strong>等都严格要求，建议用IDE打开编辑（比如VScode），不易出错。</li></ul><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211202214234731.png" alt="image-20211202214234731" style="zoom:80%;" /><p>在文件最下方配置相关信息：</p><ul><li>⚠️ 注意： <code>:</code> 后面需要留一个空格 ，repo地址最后需要带上 <code>.git</code> !</li></ul><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211202214436348.png" alt="image-20211202214436348" style="zoom:80%;" /></li><li><p>安装Git插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>写一篇自己的文章</p><blockquote><p><code>_posts</code>  路径下的 <code>md</code> 文件，会被Hexo自动解析、渲染生成网页。我们所有的博客都是放在这个目录的。</p></blockquote><p>我们在：<code>www.hwh.zone\blog\source\_posts</code> 路径下，写一篇属于自己的文章：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211202220312686.png" alt="image-20211202220312686"></p></li><li><p>开始发布网站</p><p>以上命令如果不出错，依次执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除缓存网页</span></span><br><span class="line">hexo clean  </span><br><span class="line"><span class="comment"># 生成静态网页</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 推送发布网站，要输入Github账号和token（注意不是密码，github从上月开始已经使用token验证身份，生成token可参考：https://zhuanlan.zhihu.com/p/38800965）</span></span><br><span class="line">hexo d  </span><br></pre></td></tr></table></figure><p>🐛 解决BUG：<strong>OpenSSL SSL_read：Connection was reset，erron 10054</strong>。</p><ul><li><p>第一种情况：未解除SSL验证</p><ol><li><p>打开<code>git</code>，切换到<code>www.hwh.zone/blog</code> 目录下</p></li><li><p>取消SSL验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>第二种情况：开了小飞机，让小飞机重新换个服务器重新连接。</p></li></ul></li><li><p>欣赏你自己的网站~！</p><p>现在我们在浏览器输入：<code>Wanghui-Huang.github.io</code> , 可以看到我们第一篇博客已经正式发布了！🤙</p><p>愉快的多欣赏一下吧~</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211202220438110.png" alt="image-20211202220438110"></p></li><li><p>TIPS</p><p>💡 一般我们发布文章（或修改主题CSS样式等）, 流程如下：</p><ul><li><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> ，打开 <code>localhost:4000</code>本地预览；</li><li><strong>本地</strong>进行修改，e.g. 文章增改、CSS样式修改；</li><li><strong>F5刷新下网页</strong>即可看到修改后的文章或样式，一般<strong>不需要</strong>重新执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code> ；</li><li>但是如果<strong>出现刷新无效</strong>，此时最好重新执行下以上三个命令；</li><li>最后再执行<code>hexo d</code> , 发布文章。</li></ul></li></ol><h4 id="主题-美化：以Butterfly为例">主题&amp;美化：以Butterfly为例</h4><p>hexo的众多开发者，无私提供了非常多主题供我们进行主题美化。去<a href="https://hexo.io/themes/">Hexo官网</a>或在<a href="https://github.com/search?q=hexo+theme">Github-hexo theme</a> ，搜索一个你喜欢的主题：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211202221852344.png" alt="image-20211202221852344"></p><p>在这里，我使用主题 <a href="https://github.com/jerryc127/hexo-theme-butterfly">Github-Butterfly</a> ，作为最终的选择。</p><h5 id="快速开始-2">快速开始</h5><ol><li><p>下载主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>⚠️ 下载完毕后，文件重命名为 <code>butterfly</code> ， 放在 <code>www.hwh.zone\blog\themes</code> 目录下。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211202222937528.png" alt="image-20211202222937528"></p></li><li><p>应用主题</p><p>在Hexo根目录下主配置文件 <code>_config.yml</code> , 进行配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure></li><li><p>安装必要插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>测试查看</p><p>重新生成静态网页：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>打开 ：<a href="http://localhost:4000">http://localhost:4000</a>  , 可看到主题已经被成功替换。</p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/UP$@K0WX1%602JNDTP%60~DLFZM.png" alt="img" style="zoom:80%;" /></li></ol><h5 id="基本配置">基本配置</h5><blockquote><p>如果你想参考我的配置信息，可在进行<strong>附录</strong>中查看。</p></blockquote><p>在这一节我们将进行主题的基本信息设置，包括但不限于：</p><ul><li>网站基本信息设置</li><li>背景图片设置</li><li>目录相关设置</li><li>…</li></ul><p>但是在本文<strong>并不准备将以上设置过程详细列出</strong>，因为官网对这些的描述已经非常清晰和简洁。因此，<strong>强烈建议</strong>你参考官网文档：<a href="https://butterfly.js.org/posts/21cfbf15/">butterfly主题配置官方文档</a> ，根据个人喜欢进行这些基本设置。</p><p>在这里将主要记录：<strong>官网文档未提及的优化</strong>，以及根据<strong>官网文档配置时遇到的问题解决办法</strong>。</p><h5 id="Markdowm渲染优化">Markdowm渲染优化</h5><p>本节涉及：数学公式、脚注、表情、标题大小等设置。</p><div class="tabs" id="markdown"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#markdown-1">数学公式</button></li><li class="tab"><button type="button" data-href="#markdown-2">表情</button></li><li class="tab"><button type="button" data-href="#markdown-3">脚注</button></li><li class="tab"><button type="button" data-href="#markdown-4">标题大小</button></li><li class="tab"><button type="button" data-href="#markdown-5">标签外挂</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="markdown-1"><p>按照 <a href="https://butterfly.js.org/posts/ceeb73f/#Math-%E6%95%B8%E5%AD%B8">官方文档</a> , 进行配置：</p><ol><li><p>修改<strong>主题配置文件</strong>，加载katex.min.css</p><blockquote><p>⚠️ per_page 属性不能设置true，否则会出现bug：公式被渲染两次。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">katex:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># true 表示每一頁都加載katex.js</span></span><br><span class="line">  <span class="comment"># false 需要時加載，須在使用的Markdown Front-matter 加上 katex: true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span>   <span class="comment"># 不要选择为true！！</span></span><br><span class="line">  <span class="attr">hide_scrollbar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后在需要打开数学公式渲染的文章，开头设置：<code>katex: true</code></p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211202231613955.png" alt="image-20211202231613955"></p></li><li><p>安裝 hexo-renderer-markdown-it</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save <span class="comment"># 如果有安裝這個的話，卸載</span></span><br><span class="line">npm un hexo-renderer-kramed --save <span class="comment"># 如果有安裝這個的話，卸載</span></span><br><span class="line"></span><br><span class="line">npm i hexo-renderer-markdown-it --save <span class="comment"># 需要安裝這個渲染插件</span></span><br><span class="line">npm install @neilsustc/markdown-it-katex --save <span class="comment">#需要安裝這個katex插件</span></span><br></pre></td></tr></table></figure></li><li><p>修改Hexo根目录配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">markdown:</span><br><span class="line">  plugins:</span><br><span class="line">    - plugin:</span><br><span class="line">      name: <span class="string">&#x27;@neilsustc/markdown-it-katex&#x27;</span></span><br><span class="line">      options:</span><br><span class="line">        strict: <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="markdown-2"><p>表情插件配置过程如下：</p><ol><li><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install markdown-it-emoji --save</span><br></pre></td></tr></table></figure></li><li><p>根目录配置文件添加插件</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211202233532272.png" alt="image-20211202233532272"></p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="markdown-3"><p>脚注直接安装插件即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-reference --save</span><br></pre></td></tr></table></figure><p>如果安装后，本地（typora）可以正确渲染，hexo无法正确渲染：多半是脚注使用出现<strong>语法错误</strong>。</p><ul><li>在正文中：严格按照[^1] 写入脚注，<strong>不要用任何空格</strong>！</li><li>在链接中：严格按照[^1]: 写入引用链接，<strong>不要用任何空格</strong>！</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="markdown-4"><p>butterfly主题标题大小默认的过小，不易于和正文进行区分。</p><p>为此，我们需要：</p><ol><li>找到<code>\www.hwh.zone\blog\themes\butterfly\source\css\_third-party</code> 路径下的<code>normalize.min.css</code> 文件</li><li>手动设置 h1~h5标题大小<br><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211202234443112.png" alt="image-20211202234443112"></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="markdown-5"><p>标签外挂插件 <code>Tag Plugins Plus</code> ，提供了丰富的<strong>markdown文件编写美化</strong>：</p><ul><li>时间轴</li><li>各种卡片</li><li>音频、视频插入</li><li>…</li></ul><p>可以让你的文章看起来美观许多，具体配置请参考：<a href="https://akilar.top/posts/615e2dec/">Tag Plugins Plus官网</a> 。</p><p>文档清晰简洁，这里不再赘述。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="支持评论功能">支持评论功能</h5><p>官网文档虽然给了很多种设置的评论方式，但就我自己尝试而言，<strong>Utterances和Twikoo</strong>属于比较方便的方式。</p><p>Utterances主要优点：</p><ul><li>和Gitalk类似，但不需要过多的权限设置；</li><li>相比Facebook Comments 等无需翻墙；</li><li>相比Disqus等UI更简洁美观。</li></ul><p>唯一美中不足的便是<strong>不能匿名评论</strong>，留言必须要用Github账号先登录。<strong>Twikoo</strong>在下文进行介绍。</p><div class="tabs" id="tags"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tags-1">Utterances（免费）</button></li><li class="tab"><button type="button" data-href="#tags-2">Twikoo（付费）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tags-1"><p>以下是Utterances设置过程：</p><ol><li><p>在Github创建一个public的项目</p><p>不再赘述过程，我使用的是：<a href="https://github.com/Wanghui-Huang/gittalk">https://github.com/Wanghui-Huang/gittalk</a> ，这个项目。</p></li><li><p>安装 utterances</p><p>点击：<a href="https://github.com/apps/utterances">https://github.com/apps/utterances</a> ，安装app（右上方处<code>Install</code>按钮）。</p><p>安装成功后，会出现下面<code>Configure</code>按钮：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203105709777.png" alt="image-20211203105709777"></p></li><li><p>设置相关信息</p><p>点击<code>Configure</code>按钮，进入设置界面，注意<strong>红框处</strong>相关信息设置：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203105915848.png" alt="image-20211203105915848"></p><p>设置完毕后保存。</p></li><li><p>主题文件配置</p><p>修改主题配置文件：repo修改为你刚刚创建的repo，形式为 <code>你的用户名.项目名</code></p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203110208806.png" alt="image-20211203110208806"></p><p>继续修改配置文件，指定评价插件名：<br><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203110412952.png" alt="image-20211203110412952"></p></li><li><p>测试 &amp; bug解决</p><p>选择任意一篇文章，可以看到评论框已经顺利出现：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203110741161.png" alt="image-20211203110741161"></p><p>经过实际测试，依旧会出现评论框无法显示的问题：</p><ul><li>我的问题是因为使用了自己的域名，<code>https</code>不安全便会出现这个问题；</li><li>如何使用自己的域名，后续小节有详细教程 &amp; 踩坑记录。</li></ul><p>可以在 Github项目：<code>Wanghui-Huang.github.io</code> → <code>Setting</code>→<code>Pages</code>   ，勾选<code>Enforce HTTPS</code>  ：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203111826078.png" alt="image-20211203111826078"></p><p>三连重新生成静态网页：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>便可以看到评论框已经正确显示了。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-2"><p>虽然Utterances已经足够简洁优秀且免费，但是Twikoo基于腾讯云开发，<strong>在国内速度很快&amp;支持匿名</strong>，价格也足够实惠（包年大约6元/月）。另一方面，支持下东家业务最后选择了这个方案。</p><ol><li><p>腾讯云函数配置</p><p>这一部分看<a href="https://twikoo.js.org/quick-start.html">官网文档</a>即可，很详细不再赘述。</p></li><li><p>Butterfly主题配置</p><p>修改 <code>主題配置文件</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">blog-comments-5g2cfs*******</span>  <span class="comment"># 腾讯云函数配置完后的id</span></span><br><span class="line">  <span class="attr">region:</span> <span class="string">ap-shanghai</span>  <span class="comment"># 默认上海 </span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span>        <span class="comment"># 显示文章浏览数</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><p>静态网页生成三连，便可以看到已经生成成功了：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203160342989.png" alt="image-20211203160342989"></p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="其它补充">其它补充</h4><blockquote><p>链接太长不好分享？</p><p>想要一个属于自己的漂漂域名？</p><p>网站发布后本地图片全挂？</p><p>…</p></blockquote><p>在这里我们依次进行解决各种问题，让你的网络小窝看起来更加的专业。</p><h5 id="使用短连接">使用短连接</h5><p>hexo 默认生成文章<strong>长链接具有以下几个缺点</strong>：</p><ol><li>如果文章名包含中文，将会被转码，链接不雅观且长；</li><li>长链接不利于搜索引擎收录；</li><li>长链接不方便分享给他人。</li></ol><p>因此，参考<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Hexo-abbrlink插件生成唯一文章链接：https://zhuanlan.zhihu.com/p/112318081">[4]</span></a></sup>，我们利用Hexo-abbrlink插件，生成唯一文章短链接。</p><ol><li><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure></li><li><p>修改根目录配置文件</p><ul><li><code>url</code>：你的域名 ，如果是Github Pages命令方式为 <code>https://你的用户名.github.io</code></li><li><code>permalink</code>：按下图修改</li><li><code>permalink_defaults</code>：注释掉</li></ul><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203120905856.png" alt="image-20211203120905856"></p></li><li><p>三连重新生成</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>测试</p><p>生成完毕后，可以看到，在每一篇文章开头，自动多出了以下属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">abbrlink:</span> <span class="number">56326</span>  <span class="comment"># 这个id每篇文章都不一样</span></span><br></pre></td></tr></table></figure><p>文章链接也变成了短链接的形式：<br><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203121301172.png" alt="image-20211203121301172"></p></li></ol><h5 id="使用图床">使用图床</h5><p>使用markdown最头疼的地方，估计就是图片问题了：文章图片通常保存在<strong>本地</strong>，发布网站还是分享给他人通常还需要单独保存图片。显然，这一点也不cool。</p><p>幸运的是，我们可以使用<strong>图床</strong>，将图片通通保存在<strong>云端</strong>，本地只需像如下引用个链接即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![image-20211203121301172](https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203121301172.png)</span><br></pre></td></tr></table></figure><p>特别的，配合<a href="https://typora.io/">Typora</a>，所有本地图片可以自动上传到云端，可以说是很方便了。</p><p>因此，本文参考<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Typora+PicGo+腾讯云COS实现图片上传功能：https://www.daimajiaoliu.com/daima/56a7c8410d4cc09">[5]</span></a></sup>，使用<strong>Typora配合腾讯云COS存储搭建图床</strong>。</p><blockquote><p><strong>为什么选择要付费的腾讯云COS？</strong></p><p>在这之前我也选择了其它的免费图床，使用体验不太佳：</p><ul><li>速度很慢，而且限制一天上传的数量和频率，有时候需要集中上传本地文件的大量图片便很不友好了；</li><li>腾讯云COS虽然付费，但是价格很便宜，10元可以租10G/年。</li></ul><p>因此，最终我还是选择了腾讯云COS存储作为图床。</p></blockquote><ol><li><p>下载Typora</p><p>下载地址：<a href="https://pc.qq.com/search.html#!keyword=typora">腾讯云高速下载</a> ，默认安装即可。</p></li><li><p>下载PicGo</p><p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">官网下载</a> ，默认安装即可。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203123433623.png" alt="image-20211203123433623"></p></li><li><p>腾讯云创建COS存储</p><p>进入腾讯云对象存储，在存储桶列表中点击创建存储桶：</p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/736d7f4664f36fc1d2b286ac0859e814.png" alt="在这里插入图片描述" style="zoom:80%;" /><p>设置存储信息如下：</p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/56fdfdd3b03104661de1abc72ea521fe.png" alt="在这里插入图片描述" style="zoom:80%;" /></li><li><p>密钥管理</p><p>密钥需要等会儿在配置文件中用到，因此我们需要提前设置好。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/604771ab575b32e30683e83e058c49a5.png" alt="在这里插入图片描述"></p><p>如果没有密钥，则新建密钥：</p><ul><li>记录以下：<strong>SecretID 和 SecretKey</strong>，等下要用到。</li></ul><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/a0c7902b4f48200a071bf216d574aba4.png" alt="在这里插入图片描述"></p></li><li><p>配置PicGo</p><p>打开PicGo后，图片上传选择腾讯云COS，然后进行以下设置：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1cf828eadf1b5b060fdd6f9337afa205.png" alt="在这里插入图片描述"></p></li><li><p>测试PicGO</p><p>在左上【上传区】，任意拖拽一张图片，如果上传成功则说明配置成功。</p></li><li><p>配置Typora</p><p>打开Typora：<code>文件</code>→<code>偏好设置</code>→<code>图像</code>：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/5b009f6cfef200d2b3ef58655730777d.png" alt="在这里插入图片描述"></p></li><li><p>测试Typora配置</p><ol><li>在右侧栏中左下角，找到【验证图片上传选项】，测试是否成功；</li><li>打开typora，任意在文章中粘贴一张本地图片，看是否会<strong>自动上传</strong>。</li></ol><p>以上成功，便可以愉快的开始编写文章了，开始你的大文豪生活了。</p></li></ol><h5 id="使用自己的域名">使用自己的域名</h5><blockquote><p><code>xxxxx.github.io</code> 看起来丑丑的，怎么拥有一个自己的漂漂域名呢？</p></blockquote><ol><li><p>买一个属于自己的域名</p><p>点击：<a href="https://dnspod.cloud.tencent.com/">腾讯云域名注册</a> ，注册一个自己的域名。</p></li><li><p>实名认证</p><p>参考官方文档：<a href="https://cloud.tencent.com/document/product/242/6707">域名实名认证</a> , 不进行实名认证可能无法进行正常域名解析。</p></li><li><p>域名解析设置</p><p>进入腾讯云解析设置：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203130549613.png" alt="image-20211203130549613"></p><p>分别添加以下解析记录：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203130911464.png" alt="image-20211203130911464"></p><ul><li>配置CNAME：我的域名 <code>www.hwh.zone</code>  可以解析到原本域名<code>Wanghui-Huang.github.io</code>  ，这个时候 <code>www.hwh.zone</code>相当是个别名，也就是<strong>暴露给别人看到的名字</strong>。</li><li>配置A记录：可以把域名<code>www.hwh.zone</code> <strong>直接解析</strong>到 <code>Github IP地址</code> （二次保障能解析到Github IP地址）。</li></ul><p><strong>不理解CNAME作用？有了A记录解析为什么还要CNAME</strong>？可参考：<a href="https://www.zhihu.com/question/22916306">cname记录是什么？他存在的意义是什么？</a></p></li><li><p>申请免费SSL证书</p><p>参考官方文档：<a href="https://cloud.tencent.com/document/product/400/6814">域名型（DV）免费 SSL 证书申请流程</a></p></li><li><p>Github Page设置</p><p>在 Github项目：<code>Wanghui-Huang.github.io</code> → <code>Setting</code>→<code>Pages</code>   ，设置你自己的域名  ：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203132157159.png" alt="image-20211203132157159"></p></li><li><p>创建CNAME文件</p><p>进入本地博客文件夹目录，例如我的：<code>www.hwh.zone\blog\source</code> ：</p><ul><li><p><strong>新建文件CNAME→输入你的域名</strong></p><p>⚠️ 注意：域名不要带<code>www.</code></p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211203132639333.png" alt="image-20211203132639333"></p></li><li><p><strong>保存文件</strong></p><p>⚠️ 保存文件<strong>类型为所有文件</strong>，不是TXT文件！</p></li></ul></li><li><p>测试</p><p>网站三连发布后，浏览器输入：<code>你的域名</code> ，便可以正常开始解析了。</p><p>如果遇到错误，可以在下方评论留言。</p></li></ol><h5 id="网站备案">网站备案</h5><p>网站备案后通常有不少好处<sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="网站域名备案的好处有哪些？https://www.ggcx.com/news/2105/251639.html">[6]</span></a></sup>，对于个人博客来说最重要的三个便是：</p><ol><li>加快网站的访问速度；</li><li>利于搜索引擎收录；</li><li>Github Pages访问较慢，备案后可以<strong>将服务器部署到（国内服务器）腾讯云COS或者腾讯云VPS</strong>上，访问速度极大加快。</li></ol><p>但这<strong>不影响网站域名的正常解析（除了慢点</strong>），因为毕竟网站部署在<strong>国外服务器</strong>（Github）上。</p><p>另外，网站备案经过我的尝试相比之前简便很多，只需要在<a href="https://cloud.tencent.com/product/ba">腾讯云全程线上备案</a>登记注册就好。但因为我身份证归属省份（江西），根据当地政策<strong>备案需要关闭网站</strong>，所以放弃折腾了。后续有时间补上。</p><h3 id="写在最后">写在最后</h3><p>断断续续写了大概一天，终于记录完了Hexo建站的基本所有的过程。因为没怎么运动，肩膀一直隐隐酸痛还是坚持写完了，可以说是身残志坚了。</p><p>后续的话可能会继续更新这篇文章，更好的打造自己的小窝，但主要还是更新一些C++和音视频相关博文：</p><ul><li>C++从零开始系列：C++基础、C++11特性学习、C++八股总结、C++开源源码分析；</li><li>音视频系列：待定；</li><li>其它：<strong>备案完成后</strong>，更新部署到腾讯云COS上教程。</li></ul><p>欢迎继续关注，一起学习。</p><img src="https://thumb.jfcdns.com/thumb/up/2017-8/201788194159800965660810_460_0.jpg" alt="溜了表情包-溜了溜了表情包下载全套无水印--pc6下载" style="zoom: 50%;" /><h3 id="更新记录">更新记录</h3><div class="timeline"><div class="timenode"><div class="meta"><p><p>2021-12-06 ：更新文档</p></p></div><div class="body"><ol><li>修改备案相关描述；</li><li>新增腾讯云COS相关描述。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-12-05 ：更新文档</p></p></div><div class="body"><ol><li>支持标签外挂，并新增安装教程</li><li>优化文章版式：分栏书写</li><li>更新配置文件</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-12-01 ：第一次更新</p></p></div><div class="body"><ol><li>上传初稿并发布</li></ol></div></div></div><h3 id="附录">附录</h3><blockquote><p>以下配置文件最终更新时间：2021/12/05  00:00 。</p></blockquote><ul><li><p><strong>royhuang’s 主配置文件</strong></p><p>点击这里查看：<a href="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/hwh.zone/p/hexo-build-site/_config.yml">_config.yml</a></p></li><li><p><strong>royhuang’s Butterfly配置文件</strong></p><p>点击这里查看：<a href="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/hwh.zone/p/hexo-build-site/_config.butterfly.yml">_config.butterfly.yml</a></p></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Butterfly 官方教程：https://butterfly.js.org/posts/21cfbf15/<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Hexo 知乎教程：https://zhuanlan.zhihu.com/p/26625249<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">从wordpress到hexo：https://www.wenjinyu.me/zh/from-wordpress-to-hexo-my-blog-should-have-been-like-this/<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Hexo-abbrlink插件生成唯一文章链接：https://zhuanlan.zhihu.com/p/112318081<a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Typora+PicGo+腾讯云COS实现图片上传功能：https://www.daimajiaoliu.com/daima/56a7c8410d4cc09<a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">网站域名备案的好处有哪些？https://www.ggcx.com/news/2105/251639.html<a href="#fnref:6" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站建设 </tag>
            
            <tag> hexo </tag>
            
            <tag> github pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（八）_计算机基础_场景&amp;智力题</title>
      <link href="/p/31667/"/>
      <url>/p/31667/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我的校招记录：<a href="https://www.hwh.zone/p/29708/">校招笔记（零）_写在前面</a> ，以下是校招笔记总目录。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><h1>八、场景题&amp;智力题</h1><h2 id="8-1-场景题">8.1 场景题</h2><h4 id="1-设计一个微信运动排行榜？（Redis）">1. <strong>设计一个微信运动排行榜？（Redis</strong>）</h4><ul><li><p><strong>被CSIG伤过的的心还可以爱谁（第一次回答</strong>）</p><blockquote><p>“可以使用mysql, 将用户的好友列表关联的运动记录查询出来，然后通过order by 来进行排序，就可以实现了。”</p></blockquote><p>一旦数据量大达到千万级别的时候，不可避免地会出现慢查询，效率就会降低。所以<u>这不是面试官想听到的回答！</u></p></li><li><p><strong>Redis–高效</strong></p><p>使用Redis的有序集合 zset（<strong>有序且不重复</strong>） 。因为 zset 排序的下标从0 开始，自带一个score 值，该值可以当作排行的标准 。</p><ul><li><strong>添加用户和步数</strong>： <code>zadd key score member</code></li><li><strong>查询指定排名范围内用户</strong>： （从小到大）<code>zrange key start stop withscores </code>or （从大到小）<code>zrevrange key start stop withscores</code></li></ul><p>根据上面，所以用户按score从小到大排序完毕了，如果还要获取排名也可以使用下面命令：</p><ul><li><strong>查询指定用户排名</strong> ： <code>zrank key member</code> or <code>zrevrank key member</code></li></ul><p>一个简单的排行榜就设计完成了。</p><blockquote><p>如果面试官进一步问：一周排行榜怎么设计？</p></blockquote><p>一周的数据其实就是7天数据的累加，累加完后再排序，一个月的数据原理也是一样。可以使用 ：</p><ul><li><p><code>ZINTERSTORE</code> ： 计算给定一个或多个有序集的交集并将结果放到一个新的有序集合destination中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]</span><br></pre></td></tr></table></figure><p>默认情况使用的函数是求和。</p></li></ul><p>所以可以使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zunionstore last_seven_days 7 20210315  20210316 20210317 20210318 20210319 20210320 20210321</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-海量数据问题">2. <strong>海量数据问题</strong></h4><blockquote><p>参考：<a href="https://blog.csdn.net/v_JULY_v/article/details/6279498">https://blog.csdn.net/v_JULY_v/article/details/6279498</a></p></blockquote><p>在海量数据中，针对top K类问题，通常比较好的方案是：</p><ul><li><p><strong>Top数问题：小根堆</strong></p><blockquote><p><strong>有1亿个浮点数，如何找出其最大的10000个</strong>？</p></blockquote><p>直接进行排序，大约需要10^8*4字节 = 400M ，如果内存够可以直接进行排序；如果内存不够采用：</p><ol><li><strong>最小堆法</strong> ：（1）先读入10000个数来创建大小为10000的<strong>最小堆</strong>（假设这10000个数是最大的10000个，然后每次和这10000中最小的比较）（2）遍历后续数字，和堆顶最小数字比较：如果小于堆顶数字，继续；如果大于堆顶数字，则替换堆顶并重新调整为最小堆（3）整个过程直至1亿个数全部遍历完为止</li><li><strong>分治法</strong>。 （1）1亿分为100份，每份100万个数据，找到每份的<strong>最大的1万</strong>个 （2）在剩下的100*1万个数据找到最大的1万个</li><li><strong>哈希法</strong>。 <u>如果这1亿个书里面有很多重复的数</u>，先通过Hash法，把这1亿个数字去重复。 然后再采用方法 1 或 2 。</li></ol></li><li><p><strong>最多重复（频率最高）：Hash映射+HashMap频率计算</strong></p><blockquote><p><strong>【最多重复】海量日志数据，提取出某日访问百度次数最多的那个IP。</strong></p></blockquote><ul><li><strong>分治法（基于Hash</strong>）。 （1）按照IP地址的<code>Hash(IP)%1024</code>值，把海量IP日志分别存储到1024个小文件中 （2）对于每一个小文件，可以构建一个IP为key，出现次数为value的<strong>Hash map</strong> （3）可以得到1024个小文件中的出现次数最多的IP ，再根据常规排序得到。</li></ul><p><u>⚠️ 使用Hash分散ip可以保证相同ip都在同一个文件夹</u>，如果只是简单均分是不行的。</p><blockquote><p><strong>【最多重复】有一个1G大小的一个文件，里面每一行是一个词，词的大小不超过16字节，内存限制大小是1M。返回频数最高的100个词</strong>。</p></blockquote><ul><li>同上，<strong>分治法（基于Hash</strong>）。 首先计算下：1G / 1M = 1000个小文件，为保险分为2000个（1）<code>Hash(词)%2000</code> 映射到2000个文件中（2）分别计算2000个文件频率最高的那个单词，然后常规排序即可（2000个单词占：2k*16B=32KB&lt;&lt;1M）</li></ul><blockquote><p><strong>【最多重复】有10个文件，每个文件1G，每个文件的每一行存放的都是用户的query，每个文件的query都可能重复。要求你按照query的频度排序</strong>。</p></blockquote><ul><li>同上，<strong>分治法（基于Hash</strong>）。 顺序读取10个文件，然后将query重新映射到若干个文件中，保证相同query都在同一个文件。其余同上。</li></ul></li><li><p><strong>不重复数：位图</strong></p><blockquote><p>【<strong>不重复</strong>】 <strong>在2.5亿个整数中找出不重复的整数。注，内存不足以容纳这2.5亿个整数</strong>。</p></blockquote><ul><li><p><strong>采用2位图（<a href="https://www.cnblogs.com/54chensongxia/p/11591979.html">BitMap</a></strong>）。00表示不存在，01表示出现一次，10表示多次，11无意义，需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2.5</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup><mi>b</mi><mo>=</mo><mn>2.5</mn><mo>∗</mo><mn>0.1</mn><mi>G</mi><mi>b</mi><mo>=</mo><mn>0.25</mn><mi>G</mi><mi>b</mi><mo>=</mo><mn>25</mn><mi>M</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">2.5*10^8b = 2.5*0.1Gb=0.25Gb=25MB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2.5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2.5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">0.1</span><span class="mord mathnormal">G</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">0.25</span><span class="mord mathnormal">G</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">25</span><span class="mord mathnormal" style="margin-right:0.05017em;">MB</span></span></span></span>。但是我们<strong>需要把所有的整数都表示出来</strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>∗</mo><msup><mn>2</mn><mn>32</mn></msup><mi>b</mi><mi>i</mi><mi>t</mi><mo>=</mo><mn>1</mn><mi>G</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">2*2^{32}bit=1GB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">bi</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.05017em;">GB</span></span></span></span>（1）扫描这2.5亿个整数，查看Bitmap中相对应位，如果是00变01，01变10，10保持不变（2）查看bitmap，<u>把对应位是<strong>01</strong></u> 的整数输出即可。</p><p>注，int类型占32个字节，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding="application/x-tex">2^{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span></span></span></span></span></span></span></span> 表示其能表示的整数个数。</p></li></ul><blockquote><p>【<strong>不重复·腾讯</strong>】<strong>给40亿个不重复的unsigned int的整数，没排过序的，然后再给一个数，如何快速判断这个数是否在那40亿个数当中</strong>？</p></blockquote><ul><li><strong>采用2位图（<a href="https://www.cnblogs.com/54chensongxia/p/11591979.html">BitMap</a></strong>）。 需要40亿bit，大约500M，但实际是要表示所有整数，故还是1GB。其余同上。</li></ul></li><li><p><strong>共同数</strong></p><blockquote><p>【<strong>相同数</strong>】 给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？</p></blockquote><ul><li><strong>分治法（基于Hash</strong>）。 （1）分别将a，b两个大文件各自映射为10000个小文件，这样相同url会映射到a,b相同哈希值小文件中。（2）在a,b每一对小文件找到相同的url。</li></ul></li></ul><h4 id="3-分布式相关">3. <strong>分布式相关</strong></h4><blockquote><p><strong>谈一谈，分布式集群中如何保证线程安全</strong>？</p></blockquote><ul><li><p>对于单一服务来说，只要保证一台机器上的对于共享资源的访问是同步进行的就能保证线程安全了；但是对于分布式系统而已，保证一台服务器的同步，并不能保证访问共享资源是同步的；</p></li><li><p>所以可以考虑使用<strong>分布式锁</strong>的方式来保证分布式中的线程的安全线，这样不同的服务不同的线程通过竞争分布式锁来获取共享资源的操作权限；</p></li><li><p>例如<u><strong>redis的分布式锁、zookeeper锁</strong></u>，都可以作为分布式线程安全的手段。</p></li></ul><blockquote><p><strong>在淘宝购物，这个场景下，你会怎样来设计消息队列</strong>？</p></blockquote><ul><li><p><a href="https://juejin.cn/post/6844903817348136968">什么是消息队列？</a></p><p>消息队列（MQ）可以简单理解为：<strong>把要传输的数据放在队列中</strong>，一种先进先出的结构。</p></li><li><p><strong>怎么去设计淘宝消息队列</strong>？</p><p>待补充。</p></li></ul><h4 id="4-微信抢红包">4. <strong>微信抢红包</strong></h4><blockquote><p><a href="https://www.cnblogs.com/alimayun/p/12795698.html">例如一个人在群里发了100块钱的红包，群里有10个人一起来抢红包，每人抢到的金额随机分配。</a></p><ol><li><p>所有人抢到的金额之和要等于红包金额，不能多也不能少。</p></li><li><p>每个人至少抢到1分钱。</p></li><li><p>要保证红包拆分的金额尽可能分布均衡，不要出现两极分化太严重的情况。</p></li></ol></blockquote><p><strong>二倍均值法</strong>：假设剩余红包金额为m元，剩余人数为n，那么有如下公式：</p><ul><li><p><strong>每次抢到的金额 =  [0.01，m /n × 2 - 0.01]</strong></p></li><li><p>这个公式，保证了每次随机金额的平均值是相等的，不会因为抢红包的先后顺序而造成不公平。</p></li></ul><p>举例说明：</p><ul><li>假设有5个人，红包总额100元。100÷5×2 = 40，所以第1个人抢到的金额随机范围是[0.01，39.99]元，在正常情况下，平均可以抢到20元。假设第1个人随机抢到了20元，那么剩余金额是80元。80÷4×2 = 40，所以第2个人抢到的金额的随机范围同样是[0.01，39.99]元，在正常的情况下，还是平均可以抢到20元。假设第2个人随机抢到了20元，那么剩余金额是60元。60÷3×2 = 40，所以第3个人抢到的金额的随机范围同样是[0.01，39.99]元，平均可以抢到20元。以此类推，每一次抢到金额随机范围的均值是相等的。</li></ul><h2 id="8-2-智力题">8.2 智力题</h2><h4 id="1-厉害了我的杯">1. <strong>厉害了我的杯</strong></h4><blockquote><p>有一种玻璃杯质量确定但未知，需要检测。 有一栋100层的大楼，该种玻璃杯从某一层楼扔下，刚好会碎。 现给你两个杯子，问怎样检测出这个杯子的质量，即找到在哪一层楼刚好会碎？</p></blockquote><p>参考：<a href="https://cloud.tencent.com/developer/article/1497944">https://cloud.tencent.com/developer/article/1497944</a></p><h4 id="2-赛马问题">2. <strong>赛马问题</strong></h4><blockquote><p>64匹马，8个跑道，问最少比赛多少场，可以选出跑得最快的4匹马。</p><ul><li>Assumptions：每场比赛每个跑道只允许一匹马，且不存在并列情形。</li></ul></blockquote><h4 id="3-三人三鬼过桥">3. 三人三鬼过桥</h4><blockquote><p>有三个人跟三个鬼要过河,河上没桥只有条小船,然后船一次只能渡一个人和一个鬼,或者两个鬼或者两个人,无论在哪边岸上,只有是人比鬼少的情况下(如两鬼一人,三鬼两人,三鬼一人)人会被鬼吃,然而船又一定需要人或鬼操作才能航行(要有人或鬼划船),问,如何安全的把三人三鬼渡过河对岸?</p></blockquote><p>参考回答</p><ul><li>先两鬼过去。在一鬼回来。对面有一鬼。这边有三人两鬼。</li><li>再两鬼过去。在一鬼回来。对面有两鬼。这边有三人一鬼。</li><li>再两人过去。一人一鬼回来。对面一人一鬼。这边两人两鬼。</li><li>最后两人过去。一鬼回来。对面三人。这边三鬼。</li><li>剩下的就三个鬼二个过去一个回来在接另外个就OK了。</li></ul><h4 id="3-给定随机函数，生成别的随机数">3. 给定随机函数，生成别的随机数</h4><blockquote><p>给定生成1到5的随机数Rand5()，如何得到生成1到7的随机数函数Rand7()？</p></blockquote><p>由大的生成小的容易，比如由Rand7()生成Rand5()，所以我们先构造一个大于7的随机数生成函数。 记住下面这个式子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成1到N^2之间的随机数,可以看作是在数轴上撒豆子。N是跨度/步长，是RandN()生成的数的范围长度</span></span><br><span class="line"><span class="comment">// RandN()-1的目的是生成0到N-1的数，是跳数。后面+RandN()的目的是填满中间的空隙Copy to clipboardErrorCopied</span></span><br><span class="line"></span><br><span class="line">RandNN= N( RandN()<span class="number">-1</span> ) + RandN() ;</span><br></pre></td></tr></table></figure><p>比如<code>Rand25= 5( Rand5()-1 ) + Rand5()</code>可以生成1到25之间的随机数。我们可以只要1到21（3*7）之间的数字，所以可以这么写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand7</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x=INT_MAX;</span><br><span class="line">  <span class="keyword">while</span>(x&gt;<span class="number">21</span>)&#123;</span><br><span class="line">    x=<span class="number">5</span>*(<span class="built_in">rand5</span>()<span class="number">-1</span>)+<span class="built_in">rand5</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x%<span class="number">7</span>+<span class="number">1</span>;</span><br><span class="line">&#125;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h4 id="4-砝码称轻重，找出最轻的">4. 砝码称轻重，找出最轻的</h4><p>其实这都是一类题，这里列举几个经典的：</p><blockquote><p>1、有一个天平，九个砝码，其中一个砝码比另八个要轻一些，问至少要用天平称几次才能将轻的那个找出来？</p></blockquote><p>参考回答：至少2次。第一次，一边3个，哪边轻就在哪边，一样重就是剩余的3个； 第二次，一边1个，哪边轻就是哪个，一样重就是剩余的那个；至少称2次．</p><blockquote><p>2、十组砝码每组十个，每个砝码都是10g重，但是现在其中有一组砝码每个都只有9g重，现有一个能显示克数的秤，最少称几次能找到轻的那组？</p></blockquote><p>参考回答：至少1次。</p><p>将砝码分组1~10，第一组拿一个，第二组拿两个以此类推。。第十组拿十个放到秤上称出克数x，则y = 550 - x，第y组就是轻的那组。</p><h4 id="5-利用空瓶换饮料，最多喝几瓶">5. 利用空瓶换饮料，最多喝几瓶</h4><blockquote><p>1000瓶饮料，3个空瓶子能够换1瓶饮料，问最多能喝几瓶？</p></blockquote><p><strong>第一种思路</strong></p><p>拿走3瓶，换回1瓶，相当于减少2瓶。</p><p>但是最后剩下4瓶的时候例外，这时只能换1瓶。所以我们计算1000减2能减多少次，直到剩下4.（1000-4=996，996/2=498）所以1000减2能减498次直到剩下4瓶，最后剩下的4瓶还可以换一瓶，所以总共是1000+498+1=1499瓶。</p><p><strong>第二种思路</strong></p><ul><li><p>1000瓶饮料，3个空瓶子能换1瓶饮料，最多可以喝几瓶？</p></li><li><p>第一种思维：可以考虑成dp思路</p><ul><li><p>初始情况，3个瓶子时将发生一次交换，因此视为特殊情况</p></li><li><p>之后每增加两个瓶子又可以再换一瓶</p></li><li><p>即dp[i] = dp[i - 2] + (i - (i - 2)) + 1</p></li><li><ul><li>由dp[i - 2]可求得dp[i]</li><li>(i - (i - 2))，即为当前增加的2瓶饮料（写成这样便于理解）</li><li>1即为增加了2个空瓶，之后又可以换一瓶饮料</li></ul></li><li><p>简化为dp[i] = dp[i - 2] + 2 + 1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// n为0/1/2的特殊情况省略了</span></span><br><span class="line">    <span class="comment">// 定义dp数组</span></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 初始状态</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      dp[i] = dp[i - <span class="number">2</span>] + <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line"> &#125;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li></ul></li><li><p>回归正题</p><ul><li>特殊情况：从上面的分析中，留下2个瓶子</li><li>剩下998个瓶子相当于每消耗2个瓶子即可获得一瓶，即为499瓶</li><li>最后剩下的2个瓶子无法再进行兑换，因此总共为1000 + 499 = 1499</li></ul></li><li><p>第二种思维</p><ul><li>因为兑换一瓶饮料需要三个空瓶，这瓶饮料如果是找老板借来的，那么喝完后这个空瓶将会还给他，同时需要附赠给他另外两个空瓶，即每消耗手里两个空瓶就获得一瓶饮料</li><li>但是值得注意的是，上面只是一种假设，实际情况老板是不会借给你的，因此我们至少需要保留2个空瓶，这样可以在998个瓶子剩下一个瓶子时，对其进行补足为3个空瓶，从而兑换一瓶新饮料</li><li>此时使用998个瓶子进行上述的兑换，将获得499瓶饮料</li><li>之前留下的两个瓶子正好无法兑换，最终获得饮料为1000 + 499 = 1499瓶</li></ul></li></ul><h4 id="6-毒药毒白鼠，找出哪个瓶子中是毒药">6. 毒药毒白鼠，找出哪个瓶子中是毒药</h4><blockquote><p>有1000个一模一样的瓶子，其中有999瓶是普通的水，有1瓶是毒药。任何喝下毒药的生命都会在一星期之后死亡。现在你只有10只小白鼠和1个星期的时间，如何检验出哪个瓶子有毒药？</p></blockquote><p>参考回答</p><ol><li><p>将10只老鼠剁成馅儿，分到1000个瓶盖中，每个瓶盖倒入适量相应瓶子的液体，置于户外，并每天补充适量相应的液体，观察一周，看哪个瓶盖中的肉馅没有腐烂或生蛆。（你要是胆子够大就可以这么回答，是个狼人）</p></li><li><p>首先一共有1000瓶，2的10次方是1024，刚好大于1000，也就是说，1000瓶药品可以使用10位二进制数就可以表示。从第一个开始：</p><p>第一瓶 ： 00 0000 0001</p><p>第二瓶： 00 0000 0010</p><p>第三瓶： 00 0000 0011</p><p>……</p><p>第999瓶： 11 1111 0010</p><p>第1000瓶： 11 1111 0011</p><p>需要十只老鼠，如果按顺序编号，ABCDEFGHIJ分别代表从低位到高位每一个位。 每只老鼠对应一个二进制位，如果该位上的数字为1，则给老鼠喝瓶里的药。</p><p>观察，若死亡的老鼠编号为：ACFGJ，一共死去五只老鼠，则对应的编号为 10 0110 0101，则有毒的药品为该编号的药品，转为十进制数为：613号。（这才是正解，当然前提是老鼠还没被撑死）</p></li></ol><blockquote><p>类似问题：8瓶酒一瓶有毒，用小老鼠测试。每次测试结果8小时后才会得出，而你只有8个小时的时间。最少需要（ ）老鼠测试？</p><ul><li>A 、2  B、3  C、4  D、6</li></ul></blockquote><p>解析：用3位2进制代表8瓶酒，如下表所示</p><p>瓶序号 二进制 中毒情况</p><p>第一瓶 000 全没中毒</p><p>第二瓶 001 只有第一个老鼠中毒</p><p>第三瓶 010 只有第二个老鼠中毒</p><p>第四瓶 011 第一个老鼠、第三个老鼠同时中毒</p><p>第五瓶 100 只有第三个老鼠中毒</p><p>第六瓶 101 第一个老鼠、第三个老鼠同时中毒</p><p>第七瓶 110 第二个老鼠、第三个老鼠同时中毒</p><p>第八瓶 111 三个老鼠同时中毒</p><p>其中，第一个老鼠喝下最低位为1对应的酒，第二个老鼠喝下中间位为1对应的酒，第三个老鼠喝下最高位为1对应的酒。</p><p>最后将所有中毒的老鼠，对应的位次进行与操作即可以知道那瓶毒药有毒了。</p><h4 id="7-利用烧绳子计算时间">7. 利用烧绳子计算时间</h4><blockquote><p>现有若干不均匀的绳子，烧完这根绳子需要一个小时，问如何准确计时15分钟，30分钟，45分钟，75分钟。。。</p></blockquote><ul><li><p>计算15分钟：对折之后两头烧(要求对折之后绑的够紧，否则看45分钟解法)</p></li><li><p>计算30分钟：两头烧</p></li><li><p>计算45分钟：两根，一根两头烧一根一头烧，两头烧完过了30分钟，立即将第二根另一头点燃，到烧完又过15分钟，加起来45分钟</p></li><li><p>计算75分钟：将30和45分钟的方式加起来就可以了</p></li></ul><p>其余类似</p><h4 id="8-在24小时里面时针分针秒针可以重合几次">8. 在24小时里面时针分针秒针可以重合几次</h4><p>24小时中时针走2圈，而分针走24圈，时针和分针重合24-2=22次，而只要时针和分针重合，秒针一定有机会重合，所以总共重合22次。</p><h4 id="9-100个奴隶猜帽子颜色">9. 100个奴隶猜帽子颜色</h4><blockquote><p>一百个奴隶站成一纵列，每人头上随机带上黑色或白色的帽子，各人不知道自己帽子的颜色，但是能看见自己前面所有人帽子的颜色． 然后从最后一个奴隶开始，每人只能用同一种声调和音量说一个字：”黑”或”白”， 如果说中了自己帽子的颜色，就存活，说错了就拉出去斩了，说的参考回答所有奴隶都能听见。 是否说对，其他奴隶不知道。</p><p>在这之前，所有奴隶可以聚在一起商量策略，问如果奴隶都足够聪明而且反应足够快，100个人最大存活率是多少？</p></blockquote><p>参考回答：这是一道经典推理题</p><ol><li><p>最后一个人如果看到奇数顶黑帽子报“黑”否则报“白”，他可能死</p></li><li><p>其他人记住这个值（实际是黑帽奇偶数），在此之后当再听到黑时，黑帽数量减一</p></li><li><p>从倒数第二人开始，就有两个信息：记住的值与看到的值，相同报“白”，不同报“黑”</p></li></ol><p>99人能100%存活，1人50%能活</p><blockquote><p>变种：每个奴隶只能看见前面一个人帽子颜色又能最多存活多少人？</p></blockquote><p>增加限制条件后，上面的方法就失效了，此时只能约定偶数位奴隶说他前一个人的帽子颜色，奇数奴隶获取信息100%存活，偶数奴隶50几率存活。</p><h4 id="10-小猴子搬香蕉">10. 小猴子搬香蕉</h4><blockquote><p>一个小猴子边上有100根香蕉，它要走过50米才能到家，每次它最多搬50根香蕉，（多了就被压死了），它每走 1米就要吃掉一根，请问它最多能把多少根香蕉搬到家里？</p><p>（提示：他可以把香蕉放下往返的走，但是必须保证它每走一米都能有香蕉吃。也可以走到n米时，放下一些香蕉，拿着n根香蕉走回去重新搬50根。）</p></blockquote><p>这种试题通常有一个迷惑点，让人看不懂题目的意图。此题迷惑点在于：走一米吃一根香蕉，一共走50米，那不是把50根香蕉吃完了吗？如果要回去搬另外50根香蕉，则往回走的时候也要吃香蕉，这样每走一米需要吃掉三根香蕉，走50米岂不是需要150根香蕉？</p><p>其实不然，本题关键点在于：猴子搬箱子的过程其实分为两个阶段，第一阶段：来回搬，当香蕉数目大于50根时，猴子每搬一米需要吃掉三根香蕉。第二阶段：香蕉数&lt;=50，直接搬回去。每走一米吃掉1根。</p><ol><li><p>第一阶段：假如把100根香蕉分为两箱，一箱50根</p><p>第一步，把A箱搬一米，吃一根。</p><p>第二步，往回走一米，吃一根。</p><p>第三步，把B箱搬一米，吃一根。</p><p>这样，把所有香蕉搬走一米需要吃掉三根香蕉。这样走到第几米的时候，香蕉数刚好小于50呢？</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>100</mn><mo>−</mo><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mn>3</mn><mo stretchy="false">)</mo><mo>&lt;</mo><mn>50</mn><mi mathvariant="normal">&amp;</mi><mi mathvariant="normal">&amp;</mi><mn>100</mn><mo>−</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>∗</mo><mn>3</mn><mo stretchy="false">)</mo><mo>&gt;</mo><mn>50</mn></mrow><annotation encoding="application/x-tex">100-(n*3)&lt;50 \&amp;\&amp; 100-(n-1*3)&gt;50</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">100</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">50&amp;&amp;100</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">50</span></span></span></span></span></p><p>走到16米的时候，吃掉48根香蕉，剩52根香蕉。这步很有意思，它可以直接搬50往前走，也可以再来回搬一次，但结果都是一样的。</p><p>到17米的时候，猴子还有49根香蕉。这时猴子就轻松啦，直接背着走就行。</p></li><li><p>第二阶段：走一米吃一根</p><p>把剩下的50-17=33米走完。还剩49-33=16根香蕉。</p></li></ol><h4 id="11-N只蚂蚁走树枝，问总距离或者总时间">11. N只蚂蚁走树枝，问总距离或者总时间</h4><blockquote><p>问题：放N只蚂蚁在一条长度为M树枝上，蚂蚁与蚂蚁之间碰到就各自往反方向走，问总距离或者时间为多少？</p></blockquote><p>这个其实就一个诀窍：蚂蚁相碰就往反方向走，可以直接看做没有发生任何事：大家都相当于独立的</p><p>A蚂蚁与B蚂蚁相碰后你可以看做没有发生这次碰撞，这样无论是求时间还是距离都很简单了。</p><h4 id="12-N个强盗分配M个金币，求方案使得自己分配最多">12. N个强盗分配M个金币，求方案使得自己分配最多</h4><blockquote><p>5个海盗抢到了100枚金币，每一颗都一样的大小和价值。 他们决定这么分：</p><ol><li><p>抽签决定自己的号码（1，2，3，4，5）</p></li><li><p>首先，由1号提出分配方案，然后大家5人进行表决，当 半数以上的人同意时（ 不包括半数，这是重点），按照他的提案进行分配，否则将被扔入大海喂鲨鱼。</p></li><li><p>如果1号死后，再由2号提出分配方案，然后大家4人进行表决，当且仅当半超过半数的人同意时，按照他的提案进行分配，否则将被扔入大海喂鲨鱼。</p></li><li><p>依次类推…</p></li></ol><p>假设每一位海盗都足够聪明，并且利益至上，能多分一枚金币绝不少分，那么1号海盗该怎么分金币才能使自己分到最多的金币呢？</p></blockquote><p>从后向前推，如果1至3号强盗都喂了鲨鱼，只剩4号和5号的话，5号一定投反对票让4号喂鲨鱼，以独吞全部金币。所以，4号惟有支持3号才能保命。</p><ul><li><p>3号知道这一点，就会提出“100，0，0”的分配方案，对4号、5号一毛不拔而将全部金币归为已有，因为他知道4号一无所获但还是会投赞成票，再加上自己一票，他的方案即可通过。</p></li><li><p>不过，2号推知3号的方案，就会提出“98，0，1，1”的方案，即放弃3号，而给予4号和5号各一枚金币。由于该方案对于4号和5号来说比在3号分配时更为有利，他们将支持他而不希望他出局而由3号来分配。这样，2号将拿走98枚金币。</p></li><li><p>同样，2号的方案也会被1号所洞悉，1号并将提出（97，0，1，2，0）或（97，0，1，0，2）的方案，即放弃2号，而给3号一枚金币，同时给4号（或5号）2枚金币。由于1号的这一方案对于3号和4号（或5号）来说，相比2号分配时更优，他们将投1号的赞成票，再加上1号自己的票，1号的方案可获通过，97枚金币可轻松落入囊中。这无疑是1号能够获取最大收益的方案了！</p></li></ul><p>1号强盗分给3号1枚金币，分给4号或5号强盗2枚，自己独得97枚。分配方案可写成（97，0，1，2，0）或（97，0，1，0，2）。</p><blockquote><p>变种：就是只需要一半人同意即可，不需要一半人以上同意方案就可以通过，在其他条件不变的情况下，1号该怎么分配才能获得最多的金币？</p></blockquote><ul><li><p>4号：4号提出的方案的时候肯定是最终方案，因为不管5号同意不同意都能通过，所以4号5号不必担心自己被投入大海。那此时5号获得的金币为0，4号获得的金币为100。</p></li><li><p>5号：因为4号提方案的时候 ，自己获取的金币为0 。所以只要4号之前的人分配给自己的金币大于0就同意该方案。</p></li><li><p>4号：如果3号提的方案一定能获得通过（原因：3号给5号的金币大于0， 5号就同意 因此就能通过），那自己获得的金币就为0，所以只要2号让自己获得的金币大于0就会同意。</p></li><li><p>3号：因为到了自己提方案的时候可以给5号一金币，自己的方案就能通过，但考虑到2号提方案的时候给4号一个金币，2号的方案就会通过，那自己获得的金币就为0。所以只要1号让自己获得的金币大于0就会同意。</p></li><li><p>2号：因为到了自己提方案的时候只要给4号一金币，就能获得通过，根本就不用顾及3 号 5号同意不同意，所以不管1号怎么提都不会同意。</p></li><li><p>1号：2号肯定不会同意。但只要给3号一块金币，5号一块金币（因为5号如果不同意，那么4号分配的时候，他什么都拿不到）就能获得通过。</p></li></ul><p>所以参考回答是： 98，0，1，0，1。</p><h4 id="14-火枪手决斗，谁活下来的概率大？">14. 火枪手决斗，谁活下来的概率大？</h4><blockquote><p>问题：彼此痛恨的甲、乙、丙三个枪手准备决斗。甲枪法最好，十发八中；乙枪法次之，十发六中；丙枪法最差，十发四中。如果三人同时开枪，并且每人每轮只发一枪；那么枪战后，谁活下来的机会大一些？</p></blockquote><p>一般人认为甲的枪法好，活下来的可能性大一些。但合乎推理的结论是，枪法最糟糕的丙活下来的几率最大。</p><p>那么我们先来分析一下各个枪手的策略。</p><p>如同田忌赛马一般，枪手甲一定要对枪手乙先。因为乙对甲的威胁要比丙对甲的威胁更大，甲应该首先干掉乙，这是甲的最佳策略。</p><p>同样的道理，枪手乙的最佳策略是第一枪瞄准甲。乙一旦将甲干掉，乙和丙进行对决，乙胜算的概率自然大很多。</p><p>枪手丙的最佳策略也是先对甲。乙的枪法毕竟比甲差一些，丙先把甲干掉再与乙进行对决，丙的存活概率还是要高一些。</p><p>我们根据分析来计算一下三个枪手在上述情况下的存活几率： 第一轮：甲射乙，乙射甲，丙射甲。</p><ul><li><p>甲的活率为24%（40% X 60%）</p></li><li><p>乙的活率为20%(100% - 80%)</p></li><li><p>丙的活率为100%（无人射丙）</p></li></ul><p>由于丙100％存活率，因此根据上轮甲乙存活的情况来计算三人第二轮的存活几率：</p><ul><li>情况1：甲活乙死（24% X 80% = 19.2%） 甲射丙，丙射甲：甲的活率为60%，丙的活率为20%。</li><li>情况2：乙活甲死（20% X 76% = 15.2%） 乙射丙，丙射乙：乙的活率为60%，丙的活率为40%。</li><li>情况3：甲乙同活（24% X 20% = 4.8%） 重复第一轮。 情况4：甲乙同死（76% X 80% = 60.8%） 枪战结束。</li></ul><p>据此来计算三人活率：</p><ul><li>甲的活率为(19.2% X 60%) + (4.8% X 24%) = 12.672%</li><li>乙的活率为(15.2% X 60%) + (4.8% X 20%) = 10.08%</li><li>丙的活率为(19.2% X 20%) + (15.2% X 40%) + (4.8% X 100%) + (60.8% X 100%) = 75.52%</li></ul><p>通过对两轮枪战的详细概率计算，我们发现枪法最差的丙存活的几率最大，枪法较好的甲和乙的存活几率却远低于丙的存活几率。</p><h4 id="15-先手必胜的问题">15. 先手必胜的问题</h4><blockquote><p>100本书，每次能够拿1-5本，怎么拿能保证最后一次是你拿？</p></blockquote><p>寻找每个回合固定的拿取模式，最后一次是我拿，那么上个回合最少剩下6本。那么只要保持每个回合结束后都剩下6的倍数，并且在这个回合中我拿的和对方拿的加起来为6（这样这个回合结束后剩下的还是6的倍数），就必胜。</p><p>关键是第一次我必须先手拿（100%6=4）本（这不算在第一回合里面）。</p><h4 id="16-掰巧克力问题或者参加辩论赛">16. 掰巧克力问题或者参加辩论赛</h4><blockquote><p>1、掰巧克力问题 N<em>M块巧克力，每次掰一块的一行或一列，掰成1</em>1的巧克力需要多少次？</p><p>2、1000个人参加辩论赛，1V1，输了就退出，需要安排多少场比赛？</p></blockquote><p>每次拿起一块巧克力，掰一下（无论横着还是竖着）都会变成两块，因为所有的巧克力共有N<em>M块，所以要掰N</em>M-1次，-1是因为最开始的一块是不用算进去的。</p><p>每一场辩论赛参加两个人，消失一个人，所以可以看作是每一场辩论赛减少一个人，直到最后剩下1个人，所以是1000-1=999场。</p>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校招 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> 场景题 </tag>
            
            <tag> 智力题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（七）_计算机基础_数据结构</title>
      <link href="/p/61434/"/>
      <url>/p/61434/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我的校招记录：<a href="https://www.hwh.zone/p/29708/">校招笔记（零）_写在前面</a> ，以下是校招笔记总目录。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><h1>七、数据结构和算法</h1><h4 id="1-如何对快排进行优化？">1. 如何对快排进行优化？</h4><ul><li><p><strong>三数取中法和随机交换法</strong></p><blockquote><p>快排将选取的基准点经过调整放到合适的位置，之后将这个基准点左右两边的区间分别递归的进行快排。</p><p>如果基准点的数据比较小，将会导致调整后基准点处于靠近两侧的位置，那么两边的区间长度将会严重失去平衡.</p></blockquote><p><strong>三数取中法：指的是选取基准点之前</strong>我们可以拿出数列中间位置元素的值，将它和首尾的元素进行比较，之后将这三个数中的<strong>中间数</strong>交换到<strong>数列首位</strong>的位置，之后将这个数作为基准点，<u>尽量减小之后的分区后左右两边的区间长度之差</u>。</p></li><li><p><strong>三路分割法</strong></p><p><strong>三路法同样是针对含有大量【重复数列】的优化</strong>。</p><p>3路法的思想是将数列分成3个区间，分别是<strong>小于、等于和大于基准点的区间</strong>。那么分区之后，对于等于基准点的区间内的元素，我们就不需要对其做任何处理了，只需要递归的处理小于和大于基准点的元素即可。</p></li><li><p><strong>结合插入排序</strong></p><p>当待排序序列的长度分割到一定大小后，使用<strong>插入排序</strong>。</p><ul><li><strong>对于很小和部分有序的数组，快排不如插排好</strong>。当待排序序列的长度分割到一定大小后，继续分割的效率比插入排序要差，此时可以使用插排而不是快排。</li></ul></li></ul><h4 id="2-快排和堆排的区别？什么时候使用快排和堆排？">2.<strong>快排和堆排的区别</strong>？<strong>什么时候使用快排和堆排</strong>？</h4><ul><li><p><strong>快排和堆排区别</strong>？</p><ul><li><p><strong>综合性能</strong>：实际应用中，虽然<u>堆排序的时间复杂度要比快速排序稳定</u>（快排最差退化成O(N^2)） ，但是统计意义上这种情况较少，所以综合性能还是快排更优；</p></li><li><p><strong>交换次数</strong>： 对于同样的数据，在排序过程中，堆排序算法的数据交换次数要多于快速排序；</p></li><li><p><strong>访问友好</strong>： 堆排序数据访问的方式没有快速排序友好。</p><blockquote><p><strong>对于快速排序来说，数据是顺序访问的；而堆排序来说，数据是跳着访问的</strong>。比如，堆排序中，最重要的一个操作就是数据的堆化。对堆顶节点进行堆化，会一次访问<strong>数组下标1，2，4，8</strong>的元素，而不是像快排那样，局部顺序访问，<u>所以对<strong>CPU缓存</strong>是不友好的</u>。</p></blockquote></li></ul></li><li><p><strong>快排和堆排使用场景</strong>？</p><ul><li><p><strong>快排</strong>： 绝大多数场合。</p></li><li><p><strong>堆排</strong>： topK问题、优先队列（需要在一组不停更新的数据中不停地找最大/小元素）</p><blockquote><p>在N个元素中找到top K，时间复杂度是O(N log K)，空间复杂的是O(K)，而快速排序的空间复杂度是O(N)。</p></blockquote></li></ul></li></ul><h4 id="3-【面试重点】有哪些排序算法，各算法的时间复杂度-哪些是稳定的？为什么是稳定的？">3. 【面试重点】有哪些排序算法，各算法的时间复杂度 ? 哪些是稳定的？为什么是稳定的？</h4><p><img src="https://i.loli.net/2021/05/01/K3s7DFEvyhHkwI9.png" alt="image-20210501224258097"></p><h5 id="3-1-如果数据大致有序的，用什么排序比较好？">3.1 如果数据大致有序的，用什么排序比较好？</h5><p>如果是<strong>大致有序</strong>，用 <u>插入排序</u> 比较好：</p><ul><li><u>直接插入排序</u>是将第i个元素插入到已经排序好的前i-1个元素中 ，当元素基本有序时。和前i-1个元素<strong>末尾比较一次</strong>就可以直接插入。</li></ul><p>在相比使用其它排序：</p><ul><li><p><u>归并排序：</u> 归并排序和数组是否有序无关，都是O(nlgn)。</p><blockquote><p>归并排序是把一个有n个记录的无序文件看成由<strong>n个长度为1</strong>的有序子文件组成的文件，然后进行两两归并，得到[n/2]个长度为2或1的有序文件，再两两归并 。</p></blockquote></li><li><p><u>快速排序：</u> 数组基本有序时，此时如果使用基点是最后一个元素，划分的两个子数组极为不平衡，每次划分比较次数都很多。所以不推荐。</p></li></ul><h4 id="4-二叉查找树，红黑树和平衡二叉树的区别？（有了二叉查找树、平衡树（AVL）为啥还需要红黑树？）">4. 二叉查找树，红黑树和平衡二叉树的区别？（有了二叉查找树、平衡树（AVL）为啥还需要红黑树？）</h4><blockquote><p>总结来说：平衡树是为了解决二叉查找树退化为链表的情况；而红黑树是为了解决平衡树在插入、删除等操作需要频繁调整的情况。</p></blockquote><ul><li><p><strong>二叉查找树退化成单链表</strong></p><p>正常使用二叉查找树是类似于<u>二分查找 O（logn）</u>，但是极端情况：</p><ul><li><p>构建的二叉树所有节点都只有右子树或左子树，此时时间复杂度退化成O(N)</p><p><img src="https://i.loli.net/2021/05/01/38TASb1DB7sYN5k.jpg" alt="preview"></p></li></ul></li><li><p><strong>平衡二叉树频繁左右旋</strong></p><p>平衡二叉树就是为了解决二叉查找树退化成一颗链表而诞生了，平衡树具有如下特点：</p><ol><li><p>具有二叉查找树的全部特性；</p></li><li><p><strong>每个节点的左子树和右子树的高度差至多等于1</strong>。</p></li></ol><p>避免了二叉查找树极端情况产生，但是：</p><ul><li>每次进行插入/删除节点的时候，几乎都会破坏平衡树的第二个规则，进而我们都需要通过<strong>左旋</strong>和<strong>右旋</strong>来进行调整，使之再次成为一颗符合要求的平衡树。</li></ul><p>平衡树性能大打折扣。</p></li><li><p><strong>红黑树规不需要频繁着调整</strong></p><p>红黑树具有如下特点：</p><blockquote><p>最坏情况下，也能在 O(logn) 的时间复杂度查找到某个节点。</p><ul><li>与平衡树不同的是，红黑树在插入、删除等操作，（🚩*1）<strong>不会像平衡树那样，频繁着破坏红黑树的规则，所以不需要频繁着调整</strong>，这也是我们为什么大多数情况下使用红黑树的原因；</li><li>但是，单单在查找方面的效率的话，平衡树比红黑树快。</li></ul></blockquote><p><img src="https://i.loli.net/2021/05/01/sFSaG9POEi73hdo.jpg" alt="img"></p><ol><li>具有二叉查找树的特点；</li><li>根节点是黑色的；</li><li>每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存数据；</li><li><strong>任何相邻的节点都不能同时为红色</strong>，也就是说，红色节点是被黑色节点隔开的；</li><li>每个节点，<strong>从该节点到达其可达的叶子节点是所有路径，都包含相同数目的黑色节点</strong>。</li></ol></li></ul><h5 id="4-1-为什么红黑树不需要频繁调整？">4.1 为什么红黑树不需要频繁调整？</h5><blockquote><p>详细理解红黑树一篇不错的文章：<a href="https://zhuanlan.zhihu.com/p/97523789">百图详解红黑树，想不理解都难</a></p></blockquote><p>平衡二叉树这种高度差为 1 的要求太严格了，尤其是对于频繁删除、插入的场景非常浪费时间。</p><p>但是由于红黑树：</p><ul><li>具有二叉树所有特点。</li><li>每个节点只能是红色或者是黑色。</li><li><strong>根节点只能是黑色</strong>，且黑色根节点不存储数据。</li><li><strong>任何相邻的节点都不能同时为红色</strong>。</li><li>红色的节点，它的子节点只能是黑色。</li><li>从任一节点到其每个叶子的所有路径都包含<strong>相同数目的黑色节点</strong>。</li></ul><p><strong>不追求插入、删除等操作绝对平衡</strong>，只需满足上述条件即可。它的旋转次数少，<strong>插入最多两次旋转</strong>，<strong>删除最多三次旋转</strong>。</p><p>所以在搜索、插入、删除操作较多的情况下，红黑树的效率是优于平衡二叉树的。</p><h4 id="5-快速排序的过程-？">5.快速排序的过程 ？</h4><ul><li><p>手撕一个<a href="">二分查找</a> 和快排？</p><ul><li><p><strong>二分查找</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// binary search</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>,right = arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid ;</span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right) <span class="comment">//*&lt;= 而不是&lt; </span></span><br><span class="line">        &#123;</span><br><span class="line">            mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(value == arr[mid])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> mid; <span class="comment">// 如果数组存在待查找元素，按照逻辑一定会是mid</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>  <span class="keyword">if</span>(value &lt; arr[mid])</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                right = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>  <span class="comment">// value &gt; arr[mid]</span></span><br><span class="line">            &#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>快速排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] quick_sort(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(right&lt;=left)&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选择基准：数组最右数字</span></span><br><span class="line">        <span class="comment">// *如果选择最左，思考交换过程</span></span><br><span class="line">        <span class="comment">// *partition 左侧始终是比pivot小的数</span></span><br><span class="line">        <span class="keyword">int</span> pivot = arr[right];</span><br><span class="line">        <span class="keyword">int</span> partition = left;</span><br><span class="line">        <span class="comment">// 遍历分区元素</span></span><br><span class="line">        <span class="comment">// 小于基准的放基准左边，大于的放基准右边</span></span><br><span class="line">        <span class="comment">// * 终止条件：i &lt; right 而非 right-1！</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=left; i&lt; right;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;pivot) <span class="comment">// 实际只交换小于到左边即可</span></span><br><span class="line">            &#123;</span><br><span class="line">                swap(arr,i,partition);</span><br><span class="line">                partition++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// *基准插入位置partition位置</span></span><br><span class="line">        swap(arr,partition,right);</span><br><span class="line">        <span class="comment">//递归的排序</span></span><br><span class="line">        quick_sort(arr,left,partition-<span class="number">1</span>);</span><br><span class="line">        quick_sort(arr,partition+<span class="number">1</span>,right);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="6-布隆过滤器原理？为什么使用多个哈希函数？其它相关应用？">6. 布隆过滤器原理？为什么使用多个哈希函数？其它相关应用？</h4><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/43263751">详解布隆过滤器的原理，使用场景和注意事项</a></p></blockquote><blockquote><p>“布隆说：<strong>不存在</strong>的那么<strong>一定不存在</strong>”</p><p>“布隆说：<strong>存在</strong>的那么<strong>只是可能存在</strong>”</p></blockquote><h5 id="7-1-从HashMap说起—当你判断某个元素时候你在想什么？">7.1 从HashMap说起—当你判断某个元素时候你在想什么？</h5><blockquote><p>通常我们怎么判断一个数组，是否存在某个元素呢？</p></blockquote><p>聪明的你一定想到HashMap：（1）HashMap将数组所有元素使用哈希函数，映射到HashMap上（HashMap本身也是一个数组）（2）然后就可以在O(1)级别判断某个元素是否存在。</p><p>但是这种做法通常会导致以下问题：</p><ol><li><strong>一旦数组很大</strong>，比如上亿，HashMap将会占据非常大的内存；</li><li>数组很大，不大可能一次性能在内存构建HashMap；</li><li>而且HashMap，通常存在负载因子，是不能充分利用内存的。</li></ol><p>为此，我们可以从以下方向优化：</p><ul><li><p><strong>只存储key。<strong>但是，因为我们</strong>只要判断某个元素（key）是否存在</strong>， 不需要取出对应key的value—也就是<strong>不需要存储value</strong>。</p></li><li><p><strong>key映射为bit数组索引。<strong>key映射为<code>bit</code>数组索引，即</strong>位图对应索引</strong>，  索引对应数值用 <code>0/1</code> 就可以标识为是否存在该key。</p></li></ul><p>为此，我们可以【第一阶段优化】如下：</p><p><img src="https://i.loli.net/2021/05/28/acoknPGdU3DVMEw.png" alt="img"></p><p>看样子似乎是满足我们要求了，但是依旧存在以下问题：</p><ol><li>只使用一个<code>hash</code>函数，<strong>空间利用率低</strong>。</li></ol><p>一个<code>hash</code>函数只能<strong>将key散列到一个位置</strong> ，虽然hash尽量优良映射均匀，但是空间利用率依然不算高。</p><p>因此，我们可以多个函数，将<strong>key同时映射到多个位置</strong>，即使发生哈希冲突，某个位置被覆盖，其它依旧存在，<strong>变相的降低了哈希冲突</strong>。</p><h5 id="7-2-数据结构及原理">7.2 数据结构及原理</h5><p>布隆过滤器，最终结构如下：一个<code>bit</code>数组，采用<strong>多个hash函数</strong>进行映射。</p><p><img src="https://i.loli.net/2021/05/28/zIxX9WcwUoT2lGK.png" alt="img"></p><h5 id="7-3-布隆函数优缺点">7.3 布隆函数优缺点</h5><ul><li><strong>优点</strong><ol><li><code>存储/插入/查询</code>时间复杂度，都是常数级别<code>O(1)</code></li><li><strong>保密性好</strong>，因为不需要存储数据本身</li><li><strong>存储数据大</strong>，可以存储非常大的数据本身</li></ol></li><li><strong>缺点</strong><ol><li>随着元素数量增加，<strong>误算率</strong>会增加</li><li><strong>不能删除</strong>元素，因为删除某个元素，要把其对应所有hash函数散列的位置如A,B，置为<code>0</code> 。其它元素的可能散列到位置A，再去判断这个元素是否存在就会出现<strong>误判</strong>。</li></ol></li></ul><h5 id="7-4-应用场景">7.4 应用场景</h5><ol><li><p><strong>解决缓存穿透</strong>，防止<strong>不存在</strong>的元素去查询数据库</p></li><li><p><strong>防止重复被攻击</strong>，用户第一次请求，将请求参数放入布隆过滤器中，当第二次请求时，先判断请求参数是否被布隆过滤器命中。可以提高缓存命中率</p></li><li><p><strong>判断用户是否阅读过某视频或文章</strong>， 比如抖音或头条，当然会导致一定的误判，但不会让用户看到重复的内容。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校招 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（六）_计算机基础_Redis</title>
      <link href="/p/31215/"/>
      <url>/p/31215/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我的校招记录：<a href="https://www.hwh.zone/p/29708/">校招笔记（零）_写在前面</a> ，以下是校招笔记总目录。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><h1>六、Redis</h1><h2 id="6-1-Redis基本">6.1 Redis基本</h2><h4 id="1-什么是-Redis？">1.<strong>什么是</strong> <strong>Redis？</strong></h4><p>Redis 是一个开源（BSD 许可）、基于<u>内存（读写快）</u>、支持多种数据结构的存储系统，可以作为<u>数据库、缓存和消息中间件</u>。</p><ul><li>支持的数据结构有<strong>5</strong>种：字符串（String）、哈希（hash）、列表（list）、集合（set）、有序集合（sorted set）。</li></ul><h5 id="1-1-有MySQL不就够用了吗？为什么要用Redis这种新的数据库？">1.1 有MySQL不就够用了吗？为什么要用Redis这种新的数据库？</h5><p>主要是因为 Redis <strong>具备高性能和高并发</strong>两种特性。</p><ul><li><strong>高性能</strong>：除了第一次读取硬盘比较慢，后面加载到缓存，读取速度都相关快，性能高；</li><li><strong>高并发</strong>：直接<strong>操作缓存能够承受的并发请求是远远大于直接访问数据库</strong>的，所以我们可以考虑把数据库中的<strong>部分热点数据</strong>转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。</li></ul><h5 id="1-2-C-JAVA-中的Map也是一种缓存型数据结构，为什么不用Map，而选择Redis做缓存？">1.2 C++ / JAVA 中的Map也是一种缓存型数据结构，为什么不用Map，而选择Redis做缓存？</h5><p>缓存分为本地缓存和分布式缓存 。</p><ul><li><strong>本地缓存不具一致性</strong>。以Java为例 ，使用自带的map或者guava实现的是本地缓存，最主要的特点是<strong>轻量以及快速</strong>，生命周期<strong>随着jvm的销毁而结束</strong>，并且在多实例的情况下，<strong>每个实例都需要各自保存一份缓存</strong>，缓存不具有一致性；</li><li><strong>Redis分布式缓存具有一致性</strong>。 使用redis或memcached之类的称为分布式缓存，在多实例的情况下，各实例共用一份缓存数据，缓存具有一致性；</li><li><strong>Redis可以使用更大内存作为缓存</strong>。 Redis可以使用几十G内存作为缓存，Map不行，比如JVM最多使用几个G ；</li><li><strong>Redis可以持久化</strong>。 Redis可以实现持久化，而Map是内存对象，程序重启就没了；</li><li><strong>Redis可以处理百万级别并发；</strong></li><li><strong>Redis有丰富的API &amp; 缓存过期等机制</strong>。</li></ul><h4 id="2-【重点】redis的数据类型，以及每种数据类型的使用场景？">2. 【重点】redis的数据类型，以及每种数据类型的使用场景？</h4><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">使用场景</th></tr></thead><tbody><tr><td style="text-align:center">String</td><td style="text-align:center">存储key-value键值对，注意redis中String可修改。统计在线人数；也可以存储<strong>视频、图片</strong>等</td></tr><tr><td style="text-align:center">hash</td><td style="text-align:center">购物车：<code>hset [key] [field] [value]</code> 命令， 存放键值对，一般可以用来存某个对象的基本属性信息，例如，用户信息，商品信息等</td></tr><tr><td style="text-align:center">set</td><td style="text-align:center">全局去重，JVM自带的set不适合分布式集群情况</td></tr><tr><td style="text-align:center">zset</td><td style="text-align:center">排行榜，比如微信运动排行榜</td></tr><tr><td style="text-align:center">list</td><td style="text-align:center">分页功能，lrange做基于redis的分页功能，性能很好；模仿一个消息队列</td></tr></tbody></table><h4 id="3-说一下-Redis有什么优点和缺点-？">3.<strong>说一下</strong> <strong>Redis</strong>有什么优点和缺点 ？</h4><table><thead><tr><th style="text-align:center">优点</th><th style="text-align:center">缺点</th></tr></thead><tbody><tr><td style="text-align:center"><strong>速度快</strong>：因为在内存中</td><td style="text-align:center"><strong>存储有限</strong>：因为Redis是内存数据库，大小和机器本身内存有关</td></tr><tr><td style="text-align:center"><strong>支持多种数据结构：</strong> String，List，Set，Hash，Sorted Set等</td><td style="text-align:center">完成重同步耗费CPU资源和带宽</td></tr><tr><td style="text-align:center"><strong>持久化存储</strong>：RDB和AOF</td><td style="text-align:center"><strong>当Redis重启后</strong>通过把硬盘文件重新加载到内存，速度比较慢，这个时候redis做不了其它事。</td></tr><tr><td style="text-align:center"><strong>高可用</strong>：内置 <u>Redis Sentinel</u> （哨兵），实现主从故障自动转移。 内置 <u>Redis Cluster</u> ，提供集群方案。</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>丰富特性</strong>：Key过期、计数、分布式锁</td><td style="text-align:center"></td></tr></tbody></table><h4 id="4-Redis的数据结构？key是怎么存储的？">4. Redis的数据结构？key是怎么存储的？</h4><blockquote><p>参考：<a href="https://juejin.cn/post/6862291064624152583">【大课堂】Redis底层数据存储原理</a></p></blockquote><ul><li><p><strong>概述</strong></p><p>Redis底层采用<strong>数组</strong>， key就是对应数组的<strong>索引</strong> ，采用Hash(key)映射到数组上。解决冲突采用<strong>链地址法</strong>。</p><p>具体可看参考下文。</p></li><li><p><strong>底层存储原理</strong></p><p>redis 中以<code>redisDb</code>作为整个缓存存储的核心，保存着我们<strong>客户端需要的缓存</strong>数据。</p><p>其结构如下：</p><p><img src="https://i.loli.net/2021/05/26/tbGEW3eV986aRkj.png" alt="RedisDB主体数据结构"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisDb</span> &#123;</span>    </span><br><span class="line">       dict *dict;           <span class="comment">// 最重要--字典类型，保存数据库的键值对</span></span><br><span class="line">       dict *expires;        <span class="comment">// 重要--字典类型，保存过期的时间          </span></span><br><span class="line">       dict *blocking_keys;  <span class="comment">// 和ready_key 实现BLPOP等阻塞命令         </span></span><br><span class="line">       dict *ready_keys;     <span class="comment">// 同上      </span></span><br><span class="line">       dict *watched_keys;   <span class="comment">// 实现watch命令，记录正在被watch的key         </span></span><br><span class="line">       <span class="keyword">int</span> id;    <span class="comment">// 数据库id，默认16个，支持单个                      </span></span><br><span class="line">       <span class="keyword">long</span> <span class="keyword">long</span> avg_ttl;    <span class="comment">/* Average TTL, just for stats */</span>      </span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure><p>现在我们来查看，<strong>dict</strong> 的结构。</p><ul><li><p><strong>dict的结构</strong></p><p><img src="https://i.loli.net/2021/05/26/kV1JhcrUwFHLznG.png" alt="image-20210526111544663"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  字典 : 每个字典使用两个哈希表，用于实现渐进式 rehash */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span>    </span><br><span class="line">       <span class="comment">// type存储了hash函数，key和value的复制函数等，比较以及销毁函数</span></span><br><span class="line">      dictType *type;   </span><br><span class="line">      <span class="comment">// privdata保存一些私有数据，决定了*type保存的函数，实现了【多态】</span></span><br><span class="line">      <span class="keyword">void</span> *privdata;     </span><br><span class="line">      dictht ht[<span class="number">2</span>];      <span class="comment">// 哈希表（2 个）,  正常使用ht[0],rehash就会扩容使用ht[1]</span></span><br><span class="line">      <span class="keyword">int</span> rehashidx;     <span class="comment">// 记录 rehash 进度的标志，值为 -1 表示 rehash 未进</span></span><br><span class="line">      <span class="keyword">int</span> iterators;    <span class="comment">// 当前正在运作的安全迭代器数量</span></span><br><span class="line">&#125; dict;  </span><br></pre></td></tr></table></figure><p>上述<code>dictht</code>就是个hash表，包含：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span>    </span><br><span class="line">   <span class="comment">// 哈希表节点指针数组（俗称桶，bucket）    </span></span><br><span class="line">   dictEntry **table;    </span><br><span class="line">   <span class="comment">// 指针数组的大小   </span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">long</span> size;    </span><br><span class="line">   <span class="comment">// 指针数组的长度掩码，用于计算索引值，其实永远都是size-1    </span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;   </span><br><span class="line">   <span class="comment">// 哈希表现有的节点数量   </span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure><ul><li><p><strong>dictEntry 指针数组（table</strong>）。key 的哈希值最终映射到这个数组的某个位置上（对应一个 bucket）。如果多个 key 映射到同一个位置，就发生了冲突，那么就拉出一个 dictEntry 链表。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 哈希表节点dictEntry</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span>     </span><br><span class="line">    <span class="keyword">void</span> *key;    <span class="comment">// redis的键</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span>        </span><br><span class="line">    <span class="keyword">void</span> *val;    <span class="comment">// 存储了对应string/set/list/hash/zset的数据     </span></span><br><span class="line">    <span class="keyword">uint64_t</span> u64;        </span><br><span class="line">    <span class="keyword">int64_t</span> s64; </span><br><span class="line">    &#125; v;    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span>  <span class="comment">//链表后续节点</span></span><br><span class="line">&#125;dictEntry;</span><br></pre></td></tr></table></figure></li><li><p><em><strong>size</strong></em>：标识 dictEntry 指针数组的长度。它总是 2 的指数次幂。</p></li></ul><p>上面<code>dictEntry</code> 的<strong>value</strong> 最终指向了<code>redisObject</code>对象，我们来观察下其结构。</p></li><li><p><strong>Redis Object</strong></p><p><img src="https://i.loli.net/2021/05/26/kvhZQdtOuJjE6gY.png" alt="image-20210526112251563"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span>    </span><br><span class="line">     <span class="keyword">unsigned</span> type:<span class="number">4</span>;     <span class="comment">// 类型 ，比如string，set等，才能确定是哪种数据结构使用什么API操作   </span></span><br><span class="line">     <span class="keyword">unsigned</span> encoding:<span class="number">4</span>; <span class="comment">// encoding 表示 ptr 指向的具体数据结构,这个对象使用什么数据结构实现   </span></span><br><span class="line">     <span class="keyword">unsigned</span> lru:REDIS_LRU_BITS;  <span class="comment">// 对象最后一次被访问的时</span></span><br><span class="line">     <span class="keyword">int</span> refcount;    <span class="comment">// 引用计数         </span></span><br><span class="line">     <span class="keyword">void</span> *ptr;  <span class="comment">// 指向底层数据结构的指针 </span></span><br><span class="line"> robj;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="4-1-String、list、hash、set、zset的底层结构是什么？">4.1 String、list、hash、set、zset的底层结构是什么？</h5><blockquote><p>参考：<a href="https://i6448038.github.io/2019/12/01/redis-data-struct/">图解redis五种数据结构底层实现(动图哦)</a></p><p>版本：redis 3.0.6中版本各种数据结构的实现</p></blockquote><ol><li><p><strong>String</strong></p><ul><li>embstr和raw都是由SDS动态字符串构成的 ，底层结构应该都是<strong>char数组</strong>吧 ；</li><li>int ，就是指<strong>int类型</strong>。</li></ul><p><img src="https://i.loli.net/2021/05/26/h4mzJvU9I5BEj1o.png" alt="img"></p></li><li><p><strong>list</strong></p><p><img src="https://i.loli.net/2021/05/26/QSgDl39yIA5uXN2.png" alt="img"></p></li><li><p><strong>hash</strong></p><p><img src="https://i.loli.net/2021/05/26/9X8gPmG6MeDb4V3.png" alt="img"></p></li><li><p><strong>set</strong></p><p>intset是集合键的底层实现方式之一，是int类型数组。</p><p><img src="https://i.loli.net/2021/05/26/KXD9yHLewkIFGha.png" alt="img"></p><img src="https://i.loli.net/2021/05/26/rn3BfhLOT8dsRCH.png" alt="img" style="zoom:67%;" /></li><li><p><strong>zest</strong></p><p><img src="https://i6448038.github.io/img/redis-data-struct/object_zset.png" alt="img"></p></li></ol><h5 id="4-2-讲讲redis的hash表扩容方式？">4.2 讲讲redis的hash表扩容方式？</h5><blockquote><p>参考：<a href="https://luoming1224.github.io/2018/11/12/%5Bredis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5Dredis%E6%B8%90%E8%BF%9B%E5%BC%8Frehash%E6%9C%BA%E5%88%B6/">[redis学习笔记]redis渐进式rehash机制</a></p></blockquote><ul><li><p><strong>扩容条件</strong></p><ul><li>服务器目前没有在执行 BGSAVE 命令或者 BGREWRITEAOF 命令， 并且哈希表的负载因子大于等于 1 （<strong>保存的key超过哈希表大小</strong>）；</li><li>服务器目前正在执行 BGSAVE 命令或者 BGREWRITEAOF 命令， 并且哈希表的负载因子大于等于 5 ；</li></ul></li><li><p><strong>渐进式rehash</strong></p><ol><li><p>新建一个哈希表大小，为<code>2^N</code> 次方，并分配内存，此时字典<strong>同时持有：ht[0] 和 ht[1] 两个哈希表</strong></p><blockquote><p>同hashmap：哈希表掩码sizemask为size-1，当size满足2的n次方时，计算每个key的索引值时只需要用key的hash值与掩码sizemask进行位与操作，替代求余操作，计算更快。</p></blockquote></li><li><p>哈希表赋值给字典的ht[1]，然后将rehashidx赋值为0，表示rehash工作开始</p><blockquote><p>rehashidx也标识了，当前rehash<strong>进行到了哪个槽</strong></p></blockquote></li><li><p>在 rehash 进行期间，：每次对字典执行<strong>添加、删除、查找或者更新操作</strong>时， 程序除了执行指定的操作以外， 还会顺带将 <strong>ht[0] 哈希表在 rehashidx 索引上的所有键值对 rehash 到 ht[1]</strong> 。</p><p>当 rehash 工作完成之后， 程序将 rehashidx 属性的值**+1**</p></li><li><p>随着字典操作的不断执行， 最终在某个时间点上， ht[0] 的所有键值对都会被 rehash 至 ht[1] 。此时<code>rehashidx=-1</code>，表示rehash完成。</p></li></ol><p>采取分而治之的方式， 将 rehash 键值对所需的计算工作<strong>均摊</strong>到对字典的每个添加、删除、查找和更新操作上， 从而<strong>避免了集中式 rehash 而带来的庞大计算量</strong>。</p></li><li><p><strong>渐进式rehas优缺点</strong></p><ul><li>优点：避免redis阻塞</li><li>缺点：rehash需要分配一个新的hash表，会使得<strong>内存爆增，使得大量key被驱逐</strong></li></ul></li></ul><h5 id="4-3-rehash过程中增删查改怎么操作呢？">4.3 rehash过程中增删查改怎么操作呢？</h5><ul><li><p><strong>增加</strong>： 新添加到字典的键值对一律会被保存到 ht[1] 里面， 而 ht[0] 则不再进行任何添加操作</p></li><li><p><strong>删除（delete）、查找（find）、更新（update）等</strong>： 同时在ht[0] &amp; ht[1]两个表进行。</p><blockquote><p>比如：要在字典里面查找一个键的话， 程序会先在 ht[0] 里面进行查找， 如果没找到的话， 就会继续到 ht[1] 里面进行查找。</p></blockquote></li></ul><h4 id="5-说说Redis有序集合zset的底层结构？">5. 说说Redis有序集合zset的底层结构？</h4><p>zset底层的存储结构包括<u>ziplist</u>或<u> skiplist &amp; dic</u> ，<strong>当满足以下两个条件的时候使用ziplist</strong>：</p><ul><li>有序集合保存的元素数量小于128个</li><li>有序集合保存的所有元素的长度小于64字节</li></ul><p>其余情况用skiplist。</p><ul><li><p><strong><a href="https://www.cnblogs.com/exceptioneye/p/7040815.html">什么是ziplist？</a></strong></p><p>ziplist是一个经过特殊编码的<u>双向链表</u>，以O(1)的时间复杂度在表的两端提供push和pop操作。</p><p>ziplist将表中每一项存放在前后连续的地址空间内，一个ziplist整体占用一大块内存。</p><ul><li><p><strong>使用原因</strong>：一个普通的<u>双向链表</u>，链表中每一项都<u>占用独立的一块内存</u>，各项之间用地址指针（或引用）连接起来；这种方式会带来大量的<strong>内存碎片</strong>，而且<strong>地址指针也会占用额外的内存</strong>。</p></li><li><p><strong>具体结构</strong></p><p><img src="https://i.loli.net/2021/05/04/zYwG2PtCZq84hgV.jpg" alt="img"></p><ul><li>entry：表示真正存放数据的数据项，长度不定。一个数据项（entry）也有它自己的内部结构。</li></ul></li></ul></li><li><p><a href="https://segmentfault.com/a/1190000037473381"><strong>什么是skiplist ?</strong></a></p><p>跳表是在单链表上实现多级索引，<strong>可以实现 <u>二分查找</u> 的有序链表</strong>。</p><blockquote><p>跳表插入、删除、查找元素的时间复杂度跟红黑树都是一样量级的，时间复杂度都是O(logn)。</p></blockquote><ul><li><p>主要形式</p><p>在单链表上进行多级索引。</p><p><img src="https://i.loli.net/2021/05/28/Rc6tAuOmELHz5nN.png" alt="image-20210528143426041"></p></li><li><p>构建过程</p><blockquote><p>上面链表是如何构建的呢，请见下图。</p></blockquote><p>⚠️ skiplist为了避免上下两层出现<strong>严格1:2</strong>数量对应关系后，新插入节点会打乱这种关系，而需要<strong>把新插入节点后所以节点都进行调整</strong>。</p><p><strong>它不要求上下相邻两层链表之间的节点个数有严格的对应关系，而是为每个节点随机出一个层数(level)</strong>。</p><img src="https://i.loli.net/2021/05/28/sEy7B6gUHuIfbd3.png" alt="preview" style="zoom: 67%;" /></li><li><p>查找过程</p><blockquote><p>zset : <code>&lt;key&gt; &lt;score&gt; &lt;member&gt;</code></p></blockquote><p>在上图中，我们没有区分member和score，但是实际上链表是<strong>按score进行排序，查找也是在比较score</strong>。</p><blockquote><p>以查找 和 插入23为例。</p></blockquote><ol><li>从最高层（第4）层开始查找，因为<code>7&lt;23</code> ,本应该继续往后查找，但是后继节点为null，所以往下一层进行查找</li><li>此时第3层，满足<code>7&lt;23&lt;37</code> ，继续往下一层继续查找</li><li>此时第2层，<code>7&lt;23 &amp; 19&lt;23</code> ，往下第二层的下一个节点（19）查找；此时满足<code>19&lt;23&lt;37</code> ，继续往下一层</li><li>此时第1层，一直往后遍历到22，发现<code>22&lt;23&lt;26</code> ：<ul><li>如果此时是<strong>查询23</strong>：返回null，不存在</li><li>此时是<strong>插入23</strong>：生成新节点 &amp; 随机生成层数，（1）将新节点各层指针指向对应层的<strong>下一个节点</strong>（不存在则指向null）（2）将新节点节点各层<strong>前一个节点</strong>对应层数的指针指向新节点</li></ul></li></ol></li></ul></li></ul><h5 id="5-1-Redis为什么不用红黑树">5.1 Redis为什么不用红黑树</h5><blockquote><p>参考 ： <a href="https://www.zhihu.com/question/20202931">知乎回答</a></p></blockquote><p>虽然跳表操作<strong>时间复杂度和红黑树相同</strong> ，但是：</p><ol><li><p><strong>实现简单</strong>：跳表代码实现更易读</p></li><li><p><strong>区间查找</strong>：跳表区间查找效率更高</p></li></ol><h4 id="6-Redis持久化方式有哪些？以及有什么区别？">6. <strong>Redis持久化方式有哪些？以及有什么区别</strong>？</h4><p><code>Redis</code> 提供两种持久化机制 <code>RDB</code> 和 <code>AOF</code> 机制。</p><ul><li><p><strong>各自优点</strong></p><table><thead><tr><th style="text-align:center">RDB</th><th style="text-align:center">AOF</th></tr></thead><tbody><tr><td style="text-align:center">【<strong>方便</strong>】只有一个文件 <code>dump.rdb</code> ，方便持久化</td><td style="text-align:center">【<strong>数据安全</strong>】 AOF 持久化有 <code>always</code>，每进行一次命令操作就记录到 AOF 文件中一次。</td></tr><tr><td style="text-align:center">【<strong>容灾性好</strong>】一个文件可以保存到安全的磁盘</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">【<strong>性能</strong>】最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO 最大化</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">【<strong>启动效率高</strong>】相对于数据集大时，比 AOF 的<strong>启动效率</strong>更高</td><td style="text-align:center"></td></tr></tbody></table></li><li><p><strong>各自缺点</strong></p><table><thead><tr><th style="text-align:center">RDB</th><th style="text-align:center">AOF</th></tr></thead><tbody><tr><td style="text-align:center">【<strong>安全性低</strong>】 <code>RDB</code> 是间隔一段时间进行持久化</td><td style="text-align:center">【<strong>启动效率低</strong>】数据集大的时候，比 RDB 启动效率低。</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">【<strong>恢复慢</strong>】<code>AOF</code> 文件比 <code>RDB</code> 文件大，且恢复速度慢。</td></tr></tbody></table></li></ul><h5 id="6-1-AOF-重写了解吗？">6.1 AOF 重写了解吗？</h5><p>AOF重写可以产生一个新的AOF文件，这个新的AOF文件和原有的AOF文件所保存的数据库状态一样，<strong>但体积更小</strong>。</p><blockquote><p>AOF重写是一个有歧义的名字，该功能是通过读取数据库中的<strong>键值</strong>对来实现的，程序<strong>无须对现有AOF文件进行</strong>任伺读入、分析或者写入操作。</p></blockquote><p>具体过程如下：</p><ol><li>在执行 <code>BGREWRITEAOF</code> 命令，开始重写；</li><li>Redis 服务器会维护一个 AOF <strong>重写缓冲区</strong>，该缓冲区会在子进程创建新AOF文件期间，记录服务器执行的所有写命令；</li><li>当子进程完成创建新AOF文件的工作之后，服务器会将重写<strong>缓冲区中的所有内容追加到新AOF文件的末尾</strong> ；</li><li>最后，服务器用新的AOF文件替换旧的 AOF文件，以此来完成AOF文件重写操作。</li></ol><h4 id="7-Redis持久化有两种，那应该怎么选择呢？">7. Redis持久化有两种，那应该怎么选择呢？</h4><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/39412293">https://zhuanlan.zhihu.com/p/39412293</a></p></blockquote><ol><li><strong>如果Redis中的数据完全丢弃也没有关系</strong>（如Redis完全用作DB层数据的cache），那么无论是单机，还是主从架构，都可以不进行任何持久化；</li><li><strong>单机环境</strong>： 如果可以接受十几分钟或更多的数据丢失，选择RDB对Redis的性能更加有利；如果只能接受秒级别的数据丢失，应该选择AOF；</li><li><strong>主从架构</strong>：<ul><li><strong>master</strong>：完全关闭持久化（包括RDB和AOF），这样可以让master的性能达到最好；</li><li><strong>slave：关闭RDB，开启AOF</strong>（如果对数据安全要求不高，开启RDB关闭AOF也可以），并定时对持久化文件进行备份（如备份到其他文件夹，并标记好备份的时间）；然后关闭AOF的自动重写，然后添加定时任务，在每天Redis闲时（如凌晨12点）调bgrewriteaof。</li></ul></li></ol><h4 id="8-（-u-不太理解-u-）pipeline有什么好处，为什么要用-pipeline？">8. （<u>不太理解</u>）pipeline有什么好处，为什么要用 pipeline？</h4><ul><li><p>使用 pipeline（管道）的好处在于可以将多次 I/O 往返的时间缩短为一次，但是要求管道中执行的指令间没有因果关系；</p></li><li><p>用 pipeline 的原因在于可以实现请求/响应服务器的功能，当客户端尚未读取旧响应时，它也可以处理新的请求。如果客户端存在多个命令发送到服务器时，那么客户端无需等待服务端的每次响应才能执行下个命令，只需最后一步从服务端读取回复即可。</p></li></ul><h4 id="9-怎么使用-Redis实现消息队列？-如何实现延时队列？">9.<strong>怎么使用</strong> Redis实现消息队列？ 如何实现延时队列？</h4><ul><li><p><strong>消息队列</strong>：一般使用 <code>list</code> 结构作为队列， <code>rpush</code> 生产消息， <code>lpop</code> 消费消息。当 <code>lpop</code> 没有消息的时候，要适当<code>sleep</code> 一会再重试；</p></li><li><p><strong>延时队列</strong>： ：使用<code>sortedset</code> ，拿<u>时间戳</u>作为 <code>score</code> ，消息内容作为 <code>key</code> 调用 <code>zadd</code> 来生产消息，消费者用<code>zrangebyscore</code> 指令获取符合条件的数据轮询进行处理。</p><blockquote><p>什么是延时队列？</p><p>当用户发送一个消息请求给服务器后台的时候，服务器会检测这条消息是否需要进行延时处理：</p><ul><li>如果需要就放入到延时队列中，由延时任务检测器进行检测和处理；</li><li>如果不需要进行延时处理的任务，服务器会立马对消息进行处理，并把处理后的结果返会给用户。</li></ul><p>【举个例子】</p><ul><li>点外卖时，下单后不会立即安排配送，而是等待一段时间让商户接单才正式安排配送，否则超时取消</li></ul></blockquote></li></ul><h2 id="6-2-Redis单线程模型">6.2 Redis单线程模型</h2><h4 id="1-为什么-Redis-使用单线程模型？单线程模型效率也能那么高？">1.<strong>为什么</strong> <strong>Redis 使用单线程模型？单线程模型效率也能那么高</strong>？</h4><ol><li><p>采用单线程，避免了不要的上下文切换和竞争条件；</p></li><li><p><strong>其次 CPU 不是 Redis 的瓶颈</strong>，Redis 的瓶颈最有可能是机器内存或者网络带宽。</p></li></ol><p>【<strong>效率高的原因</strong>】</p><p>. 1. <strong>C语言</strong>实现，效率高</p><ol start="2"><li><p>纯<strong>内存</strong>操作</p></li><li><p><strong>基于非阻塞的IO复用模型机制</strong>（可能会跟自己挖坑）</p></li><li><p>单线程的话就能避免多线程的频繁上下文切换问题（为什么单线程效率高）</p></li><li><p>丰富的数据结构（<u>全程采用hash结构，读取速度非常快</u>，对数据存储进行了一些优化，<u>比如zset压缩表，跳表等</u>）</p></li></ol><h4 id="2-（新，易忘）说说-Redis-的单线程模型-？">2.<strong>（新，易忘）说说 Redis 的单线程模型</strong> ？</h4><blockquote><p>这问题是因为前面回答问题的时候提到了 Redis 是基于非阻塞的IO复用模型。如果这个问题回答不上来，就相当于前面的回答是给自己挖坑了。</p></blockquote><p>redis 内部使⽤⽂件事件处理器 file event handler ，这个⽂件事件处理器是单线程的，所以redis 才叫做单线程的模型。它采⽤ IO 多路复⽤机制一个线程同时监听多个 socket，根据 socket 上的事件来选择对应的事件处理器进⾏处理。<br>⽂件事件处理器的结构包含 4 个部分：</p><ol><li>多个 socket</li><li>IO 多路复⽤程序</li><li>⽂件事件分派器</li><li>事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）</li></ol><p>（1） IO 多路复⽤程序会监听多个 socket，（2）会将 socket 产⽣的事件<strong>放⼊队列中排</strong>队，（3）事件分派器每次从队列中取出⼀个事件，（4）把该事件交给对应的事件处理器进⾏处理。</p><h4 id="3-你说Redis是单线程的，那如何处理高并发？比如1000个并发请求同时发生？">3. 你说Redis是单线程的，那如何处理高并发？比如1000个并发请求同时发生？</h4><ul><li><p>Redis采用了<strong>IO多路复用机制</strong>，使其在网络IO操作中能并发处理大量的客户端请求。</p><blockquote><p>详见上一个问题。</p></blockquote></li><li><p>Redis可以采用<strong>主从架构</strong>，master负责写，slave负责读。</p></li></ul><h4 id="4-说说你对Redis事务的理解-？">4.<strong>说说你对Redis事务的理解</strong> ？</h4><p>Redis 中的事务是<strong>一组命令的集合</strong>，是 Redis 的最小执行单位。</p><blockquote><p>Redis事务功能是通过MULTI、EXEC、DISCARD和WATCH 四个原语实现的 Redis会将一个事务中的所有命令序列化，然后按顺序执行。</p></blockquote><ul><li><p><strong>需要注意的地方</strong></p><ol><li><p><strong>Redis 事务不支持回滚</strong>：不像 MySQL 的事务一样，要么都执行要么都不执行；</p><blockquote><p>因为回滚需要增加很多工作，而不支持回滚则可以保持简单、快速的特性。</p></blockquote></li><li><p>Redis 服务端在执行事务的过程中，<u><strong>不会被其他客户端发送来的命令请求打断</strong></u>，直到事务命令全部执行完毕才会执行其他客户端的命令。</p></li></ol></li></ul><h4 id="5-为什么Redis的操作是原子性的，怎么保证原子性的？">5.<strong>为什么Redis的操作是原子性的，怎么保证原子性的</strong>？</h4><ul><li><strong>原子性</strong>。 因为Redis是单线程的， Redis本身提供的所有API都是原子操作，Redis中的事务其实是要保证批量操作的原子性。</li><li><strong>事务性</strong>。 Redis中的事务其实是要保证<u>批量操作</u>的原子性。</li></ul><h2 id="6-3-Redis缓存">6.3 Redis缓存</h2><h4 id="1-为什么要用缓存-？怎么提高缓存命中率？">1.<strong>为什么要用缓存</strong> <strong>？怎么提高缓存命中率</strong>？</h4><ul><li><p><strong>为什么用缓存</strong>？</p><p>把热点数据存入内存中，提高读写性能。</p></li><li><p><strong>提高命中率</strong>？</p><ol><li>增加缓存空间</li><li>提升缓存更新频率</li><li>提前加载数据到缓存中</li></ol></li></ul><h4 id="2-缓存雪崩、缓存穿透、缓存击透、缓存预热、缓存更新、缓存降级等？">2.<strong>缓存雪崩、缓存穿透、缓存击透、缓存预热、缓存更新、缓存降级等</strong>？</h4><blockquote><p>参考：<a href="https://juejin.cn/post/6844904173725548557">https://juejin.cn/post/6844904173725548557</a></p></blockquote><ul><li><p><strong>缓存雪崩</strong></p><blockquote><p>简而言之：<strong>Redis 挂掉了</strong>，请求全部走数据库 。</p></blockquote><ul><li><p><strong>例如</strong>： 对缓存数据设置相同的过期时间，导致某段时间内缓存失效，请求全部走数据库；</p><ul><li><strong>key过期解决</strong>： 在缓存的时候给过期时间加上一个随机值，这样就会大幅度的减少缓存在同一时间过期。</li></ul><p>更通用情况的做法：</p><ul><li><strong>事发前</strong>：实现 Redis 的<strong>高可用 (主从架构 + Redis Cluster)</strong>，尽量避免 Redis 挂掉这种情况发生；</li><li><strong>事发中</strong>：万一 Redis 真的挂了，我们可以设置<strong>本地缓存 (ehcache)+ 限流 (hystrix)</strong>，尽量避免我们的数据库被干掉；</li><li><strong>事发后：<strong>redis <strong>持久化</strong>，重启后</strong>自动</strong>从磁盘上加载数据，<strong>快速恢复缓存数据</strong>。</li></ul></li></ul></li><li><p><strong>缓存穿透</strong></p><blockquote><p>查询一个一定<strong>不存在的数据</strong> ，导致<strong>每次请求都要到数据库去查询</strong>，失去了缓存的意义 。</p></blockquote><ul><li><strong>解决1：</strong> 使用布隆过滤器 (BloomFilter) <strong>提前拦截</strong>，不合法就不让这个请求到数据库层；</li><li><strong>解决2：<strong>当我们从数据库找不到的时候，我们也将这个</strong>空对象设置到缓存里边去</strong>，下次再请求的时候，就可以从缓存里边获取了。</li></ul></li><li><p><strong>缓存击穿</strong></p><p>在平常高并发的系统中，大量的请求同时查询一个key时，此时这个<strong>高热key</strong>正好失效了，就会导致大量的请求都打到数据库上面去。这种现象我们称为缓存击穿。</p><ul><li><p><strong>解决1：使用互斥锁(mutex key</strong>)。 是只让一个线程构建缓存，<strong>其他线程等待构建缓存</strong>的线程执行完，重新从缓存获取数据就行。</p><blockquote><p>如果是单机，可以用synchronized或者lock来处理，如果是【<strong>淘特】分布式环境可以用分布式锁</strong>就可以了。</p><p><img src="https://i.loli.net/2021/05/06/4oRvz638eOiEFTf.png" alt="image-20210506115517283"></p></blockquote></li><li><p><strong>解决2：</strong> <strong>key永不过期</strong>。 把过期时间存在key对应的value里，如果发现要过期了，通过一个后台的异步线程进行缓存的构建。</p><p><img src="https://i.loli.net/2021/05/06/jZ9v47kthTmADqg.png" alt="image-20210506115748032"></p></li></ul></li><li><p><strong>缓存预热</strong></p><blockquote><p>系统上线后，将相关的缓存数据直接加载到缓存系统。</p></blockquote><p>这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题。</p></li><li><p><strong>缓存更新</strong></p><ul><li><code>LRU</code>(访问时间最旧淘汰)/<code>LFU</code>(把频次低的淘汰掉)</li><li>超时剔除：设置key过期时间</li><li>主动更新：开发设置生命周期</li></ul></li><li><p><strong>缓存降级</strong></p><p>降级的情况，<u>就是<strong>缓存失效或者缓存服务挂掉</strong>的情况下，我们也不去访问数据库</u>。我们<strong>直接访问内存部分数据缓存</strong>或者直接返回默认数据。</p><blockquote><p>对于应用的首页，一般是访问量非常大的地方，首页里面往往包含了部分推荐商品的展示信息。这些推荐商品都会放到缓存中进行存储，同时我们为了避免缓存的异常情况，对<strong>热点商品数据</strong>也存储到了<strong>内存</strong>中。同时内存中还保留了一些默认的商品信息。</p><p>如下图所示：</p></blockquote><p><img src="https://i.loli.net/2021/05/06/a1XZHWCterV3uR2.png" alt="image-20210506115200276"></p></li></ul><h4 id="3-Redis-设置key过期后如何处理？Redis缓存刷新策略（内存淘汰机制）有哪些？">3. Redis 设置key过期后如何处理？<strong>Redis缓存刷新策略（内存淘汰机制）有哪些</strong>？</h4><ul><li><p><strong>Redis 设置过期时间</strong></p><p>Redis中有个设置时间过期的功能，即对存储在 redis 数据库中的值可以设置⼀个过期时间。</p><ul><li>如我们⼀般项⽬中的 <strong>token</strong> 或者⼀些登录信息，尤其是短信验证码都是有时间限制的，过期后基本不会使用</li></ul></li><li><p><strong>过期后采用什么策略进行删除</strong>？</p><ul><li><strong>定期删除</strong>：redis默认是<strong>每隔 100ms</strong> 就<strong>随机抽取</strong>⼀些设置了过期时间的key，检查其是否过期，如果过期就删除。注意这⾥是随机抽取的。<strong>为什么要随机呢</strong>？你想⼀想假如 redis 存了⼏⼗万个 key ，每隔100ms就遍历所有的设置过期时间的 key 的话，就会给 CPU 带来很大的负载！</li></ul></li><li><p><strong>惰性删除</strong>：<u><strong>定期删除可能会导致很多过期 key 到了时间并没有被删除掉</strong></u>，所以就有了惰性删除。假如你的过期 key，靠定期删除没有被删除掉，还停留在内存⾥，除⾮你的系统去查⼀下那个 key，才会被redis给删除掉。</p><ul><li><strong>内存淘汰策略</strong> ：如果定期删除漏掉了很多过期 key，然后你也没及时去查，也就没⾛惰性删除，此时会怎么样？如果大量过期key堆积在内存⾥，导致redis内存块耗尽了。所以有内存淘汰策略。</li><li><strong>volatile-lru</strong>：从已设置过期时间的数据中挑选最近最少使⽤的数据淘汰<ul><li><p><strong>volatile-ttl</strong>：从已设置过期时间的数据集中挑选<strong>将要过期的数据</strong>淘汰</p></li><li><p><strong>volatile-random</strong>：从已设置过期时间的数据中任意选择数据淘汰</p></li><li><p><strong>allkeys-lru</strong>：当内存不⾜以容纳新写⼊数据时，在键空间中，移除最近最少使⽤的key（这个是最常⽤的）</p></li><li><p><strong>allkeys-random</strong>：从数据集中任意选择数据淘汰</p></li><li><p><strong>no-eviction</strong>：禁⽌驱逐数据，也就是说当内存不⾜以容纳新写⼊数据时，新写⼊操作会报错。这个应该没⼈使⽤吧！</p></li></ul></li></ul></li></ul><h4 id="4-Redis报内存不足怎么处理？">4. Redis报内存不足怎么处理？</h4><ul><li>增加 Redis 可用内存：<ol><li>修改件 <code>redis.conf</code> 的 <code>maxmemory</code> 参数；</li><li>使用分布式集群，提高存储量；</li></ol></li><li><strong>设置缓存淘汰策略</strong>：提高内存的使用效率；</li></ul><h4 id="5-【重点】缓存和数据库谁先更新呢？-（保持缓存和数据库一致性）">5. 【<strong>重点</strong>】<strong>缓存和数据库谁先更新呢</strong>？ <strong>（保持缓存和数据库一致性</strong>）</h4><blockquote><p>参考：<a href="https://learnku.com/articles/22363">https://learnku.com/articles/22363</a></p></blockquote><ul><li><p><strong>对于读（查询）操作</strong></p><p>一般我们对<strong>读操作</strong>的时候有这么一个固定的套路：</p><ol><li>如果我们的数据在缓存里边有，那么就直接取缓存的；</li><li>如果缓存里没有我们想要的数据，我们会先去查询数据库，<u>然后将数据库查出来的数据写到缓存中</u>；</li><li>最后将数据返回给请求。</li></ol><p><strong>不用更新（写）数据库，只用更新（写）缓存</strong>。</p></li><li><p><strong>对于写操作导致双写问题</strong></p><blockquote><p><a href="https://developer.aliyun.com/article/712285">如何保证缓存(redis)与数据库(MySQL)的一致性</a></p></blockquote><p>写操作会更新数据库，那么缓存也要进行更新，此时会发生数据库和缓存不一致的问题。</p><blockquote><p><strong>键的过期时间</strong>：能保证缓存和数据库的数据最终是一致的。</p><p><u>因为只要缓存数据过期了，就会被删除</u>。随后读的时候，因为缓存里没有，就可以查数据库的数据，然后将数据库查出来的数据<strong>重新写入到缓存</strong>中。<br>除了设置过期时间，我们还需要做更多的措施来尽量避免数据库与缓存处于不一致的情况发生。</p></blockquote><p>直接看结论：</p><blockquote><p>不考虑更新缓存而是<strong>直接删除缓存</strong>，因为更新逻辑较为复杂涉及到其它数据，更新cache消耗会比较大。</p></blockquote><ul><li><strong>先删除缓存，再更新数据库</strong><ul><li>在高并发下可能<strong>会导致数据长时间不一致</strong></li><li>采用<u>异步更新缓存</u>的策略，不会导致数据不一致，但在数据库更新完成之前，都需要到数据库层面去读取数据，读的效率不太好——<strong>保证了数据的一致性，适用于对一致性要求高的业务</strong></li></ul></li><li><strong>先更新数据库，再删除缓存</strong> (<strong>Cache Aside Pattern 设计模式</strong>)<ul><li>在高并发下不会导致数据长时间不一致</li><li>在<strong>更新数据库期间，cache中的旧数据会被读取</strong>，可能会有一段时间的数据不一致，但读的效率很好。——<strong>保证了数据读取的效率，如果业务对一致性要求不是很高，这种方案最合适</strong></li></ul></li></ul></li><li><p><strong>先删除缓存，再更新数据库</strong></p><blockquote><p>⚠️ <strong>只有读才会更新缓存！！</strong></p></blockquote><ul><li><p><u>正常情况</u></p><ol><li>A线程进行写操作，先淘汰缓存，再更新数据库</li><li>B线程进行读操作，发现缓存中没有想要的数据，从数据库中读取更新后的新数据 ，并更新缓存</li></ol></li><li><p><u>高并发异常</u></p><ol><li>A线程进行<strong>写</strong>操作，先淘汰缓存，但由于<u>网络原因等未及时更新数据库</u></li><li>B线程<strong>读</strong>取缓存失败，去<u>读取数据库的是旧值</u> ，并将<u>旧数据放入缓存</u></li><li>A线程再更新数据库成功（<strong>同步情况下写操作不更新redis而读操作更新redis</strong>），<u>此时缓存（旧）和数据库（新）不一致</u></li></ol><p>而且没有设置键过期，会保持很长时间的数据不一致。</p></li><li><p><u>解决方案</u></p><ul><li><strong>异步更新缓存</strong> ：B线程读操作不更新缓存，而是由<u>A线程写操作更新数据库成功后，通过binlog异步更新缓存</u></li><li><strong>延时双删</strong>： A线程<u>休眠M秒（确保事务都已提交）</u>，再更新数据库成功后，<strong>再次删除缓存</strong>。其它线程进行<strong>读</strong>操作时，缓存中无数据，从数据库中读取的是更新后的新数据，<u>又再次一致了</u>。</li></ul></li></ul></li><li><p><strong>先更新数据库，再删除缓存</strong></p><ul><li><p><u>正常情况</u></p><ol><li>A线程进行<strong>写</strong>操作，先更新数据库，再删除缓存</li><li>B线程进行<strong>读</strong>操作，发现缓存中没有想要的数据，从数据库中读取更新后的新数据 ，并更新缓存</li></ol></li><li><p><u>高并发异常</u></p><ol><li><p>A线程进行<strong>写</strong>操作，先更新数据库，<u>但未来得及删除缓存</u></p></li><li><p>B线程进行<strong>读</strong>操作，<u><strong>读取缓存的旧数据</strong>（背错一次），此时数据不一致</u></p></li><li><p>A线程再删缓存</p></li></ol><p>但其它线程进行读数据的时候更新缓存，更新缓存又一致了，<u>不一致的时间很短。</u></p><p>但是还可能会考虑：3. <strong>A线程删除缓存失败</strong> ，此后读取的一直都是旧数据了。</p></li><li><p><u>解决方案</u></p><ul><li><strong>消息队列进行删除补偿</strong>。如果Redis删除发现报错，将Redis的key作为消息发送到消息队列中，系统收到消息队列再次对Redis进行删除操作。</li></ul></li></ul></li></ul><h2 id="6-4-集群相关">6.4 集群相关</h2><h4 id="1-Redis的同步机制了解是什么？">1. Redis的同步机制了解是什么？</h4><p>Redis主从复制可以根据是否是全量分为：<u>全量同步</u>和<u>增量同步</u>。</p><blockquote><p>主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。</p></blockquote><ul><li><p><strong>全量同步</strong></p><p>Redis全量复制一般发生在Slave初始化阶段，这时<strong>Slave需要将Master上的所有数据都复制一份</strong>：</p><p>​       1）从服务器连接主服务器，发送<code>SYNC</code>命令；<br>　　2）主服务器接收到SYNC命名后，开始执行<code>BGSAVE</code>命令（1）生成<u>RDB文件</u>  （2）并使用<u>缓冲区记录</u>此后执行的所有<strong>写</strong>命令；<br>　　3）主服务器<code>BGSAVE</code>执行完后，向所有从服务器发送RDB快照文件，并在发送期间继续记录被执行的写命令；<br>　　4）从服务器收到快照文件后丢弃所有旧数据，载入收到的快照；<br>　　5）主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令；从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；</p></li><li><p><strong>增量同步</strong></p><p>Slave初始化后开始正常工作时：<strong>主服务器发生的写操作同步到从服务器的过程</strong>。</p><ol><li>主服务器每执行一个<strong>写命令</strong>就会向从服务器发送相同的写命令；</li><li>从服务器接收并执行收到的写命令。</li></ol></li></ul><h4 id="2-【新补充】-Redis集群架构模式有哪几种？集群的原理是什么？">2.【新补充】 <strong>Redis</strong>集群架构模式有哪几种？集群的原理是什么？</h4><blockquote><p>待补充：<a href="https://blog.csdn.net/zzhongcy/article/details/108446687">Redis 架构模式详解（单机、主从、哨兵、集群模式）</a></p></blockquote><ul><li><p><strong>1. 单机模式</strong></p><blockquote><p>QPS（每秒查询速度）大约在几万左右。</p></blockquote><p>安装一个 Redis，启动起来，业务调用即可。</p><p><img src="https://i.loli.net/2021/05/25/m5euvrDF1UOtYbn.png" alt="image-20210525232444113"></p><ul><li><strong>优点</strong>： 部署简单；成本低；高性能</li><li><strong>缺点</strong>： 单节点宕机风险 ;  单机高性能受限于 CPU 的处理能力</li></ul></li><li><p><strong>2. 主从复制</strong></p><p><img src="https://i.loli.net/2021/05/25/tGy6WCzmKpS4Mfr.png" alt="image-20210525232806643"></p><p>Redis 的复制（Replication）功能允许用户根据一个 Redis 服务器来创建任意多个该服务器的复制品。</p><ul><li>被复制的服务器为主服务器（Master），而通过复制创建出来的复制品则为从服务器（Slave）。</li></ul><p>主要优缺点：</p><ul><li><strong>优点</strong>： Master/Slave 角色方便水平扩展，降低 Master <strong>读</strong>压力，转交给 Slave 节点；</li><li><strong>缺点</strong>： 可靠性保证不是很好，主节点故障便无法提供写入服务；没有解决主节点<strong>写的压力</strong> ；主节点宕机，需要人为干预。</li></ul></li><li><p><strong>3. 哨兵模式</strong></p><blockquote><p>Redis 2.8版本后引入了哨兵的概念。</p></blockquote><p><img src="https://i.loli.net/2021/05/01/81lKSUu7skhM2Yr.png" alt="img"></p><p>主从模式中，当主节点宕机之后，<strong>从节点是可以作为主节点顶上来继续提供服务</strong>，<u>但是需要修改应用方的主节点地址</u>，还需要命令所有从节点去复制新的主节点数据，整个过程需要<strong>人工干预</strong>。</p><p>为此，引入了哨兵（Sentinel）这个概念，在<strong>主从复制的基础</strong>上，哨兵实现了<strong>自动化故障恢复</strong>。哨兵模式由两部分组成，哨兵节点和数据节点：</p><ul><li><p><strong>哨兵节点</strong>：哨兵节点是特殊的 Redis 节点，不存储数据；</p></li><li><p><strong>数据节点</strong>：主节点和从节点都是数据节点。</p></li></ul><p><strong>哨兵工作原理</strong>：</p><ol><li>每个 Sentinel 以每秒一次的频率向它所知的 <strong>Master，Slave 以及其他 Sentinel</strong> 节点发送一个 <code>PING</code> 命令；</li><li>如果一个实例（instance）距离最后一次有效回复 PING 命令的时间<strong>超过配置文件 <code>own-after-milliseconds</code> 选项所指定的值</strong>，则这个实例会被 Sentinel 标记为<strong>主观下线</strong>；</li><li>如果一个 Master 被标记为主观下线，那么正在监视这个 Master 的所有 Sentinel 要以<strong>每秒一次</strong>的频率确认 Master 是否真的进入主观下线状态；</li><li>当有<strong>足够数量的 Sentinel</strong>（大于等于配置文件指定的值）在<strong>指定的时间范围内确认</strong> Master 的确进入了主观下线状态，则 Master 会被标记为<strong>客观下线</strong>；</li><li>如果 Master 处于 <strong>ODOWN 状态</strong>，则投票自动选出新的主节点;将剩余的从节点指向新的主节点继续进行数据复制；</li><li>若没有足够数量的 Sentinel 同意 Master 已经下线，Master 的客观下线状态就会被移除。<u>若 Master 重新向 Sentinel 的 PING 命令返回有效回复</u>，Master 的主观下线状态就会被移除。</li></ol><p><u><strong>哨兵模式优缺点</strong></u>：</p><ul><li><strong>优点</strong>：（1）主从自动切换，更加健壮</li><li><strong>缺点</strong>： （1）主从切换需要时间还是会丢失数据；（2）没有解决主节点<strong>写</strong>压力 （3）动态扩容复杂</li></ul></li><li><p><strong>4. 集群模式</strong></p><blockquote><p>Redis 3.0 版本引入了Redis Cluster集群模式。</p></blockquote><img src="https://i.loli.net/2021/05/25/yfskJDK3vrzUoWp.png" alt="img" style="zoom:80%;" /><ul><li>如上图所示：该集群中包含 6 个 Redis 节点，3 主 3 从，分别为 M1，M2，M3，S1，S2，S3。除了主从 Redis 节点之间进行数据复制外，所有 Redis 节点之间采用 <strong>Gossip</strong> 协议进行通信，交换维护节点元数据信息</li></ul><p>Redis Cluster 采用<strong>无中心</strong>结构，<strong>每个节点都可以保存数据</strong>和整个集群状态，每个节点<strong>都</strong>和其他所有节点<strong>连接</strong>。</p><ul><li>Cluster 一般由多个节点组成，节点数量至少为 6 个才能保证组成完整高可用的集群，其中3个为<strong>主</strong>节点，3个为<strong>从</strong>节点；</li></ul><p><strong>4.1 Redis 集群分片概念</strong></p><blockquote><p>单机、主从、哨兵的模式数据都是存储在<strong>一个master节点</strong>上，<strong>其他节点进行数据的复制</strong>。</p><p>集群模式就是把数据进行<strong>分片</strong>存储，当一个分片数据达到上限的时候，还可以分成多个分片。</p></blockquote><p>Redis Cluster 采用<strong>虚拟哈希槽分区</strong>，所有的键根据哈希函数映射到 0 ~ 16383 整数槽内，计算公式：</p><ul><li><code>HASH_SLOT = CRC16(key) % 16384</code></li></ul><p><strong>每一个主</strong>节点负责维护一部分<strong>槽</strong>以<strong>及</strong>槽所<strong>映射的键值数据</strong>。</p><ul><li><p><strong>举例说明</strong>：</p><blockquote><p>有 3 个节点的集群环境如下</p><ul><li>节点 A 哈希槽范围为 0 ~ 5500；</li><li>节点 B 哈希槽范围为 5501 ~ 11000；</li><li>节点 C 哈希槽范围为 11001 ~ 16383。</li></ul></blockquote><p><strong>增加数据</strong>： （1）根据上述公式计算<strong>新增的key存储</strong> ，映射到相应节点（假设为B）</p><p><strong>增加节点</strong>： （1）从各个节点拿出一部分哈希槽分配到新增的D节点上即可</p><p><strong>删除节点</strong>： （1）删除A节点，只需将A节点的哈希槽移动到其它节点接口</p></li></ul><p><strong>4.2 Reids集群的主从模式</strong></p><p>Redis Cluster 为了保证数据的高可用性，加入了主从模式，<strong>一个主节点对应一个或多个从节点</strong>，主节点提供数据存取，从节点复制主节点数据备份，当这个主节点挂掉后，就会通过这个主节点的从节点选取一个来充当主节点，从而保证集群的高可用。</p><p><strong>4.3 优缺点总结</strong></p><ul><li><strong>优点</strong>： （1）无中心结构 ，<strong>多</strong>节点<strong>存储</strong>数据；（2）节点动态<strong>删除、移动</strong>数据分布方便；（3）<strong>部分节点不可用</strong>，集群依旧可用（哈希槽 + 从节点备份并故障晋升主节点）；</li><li><strong>缺点</strong>： （1）<strong>异步</strong>复制，<strong>无法保证数据一致性</strong>（2）集群搭建<strong>复杂</strong>（3）<strong><code>mget</code>,<code>pipeline</code><strong>等命令。它们需要把请求</strong>分散到多个节点执行</strong>、再聚合。节点越多，性能越低</li></ul></li></ul><h4 id="3-说说-Redis哈希槽的概念？什么情况下会导致整个集群不可用？">3.<strong>说说</strong> <strong>Redis哈希槽的概念</strong>？<strong>什么情况下会导致整个集群不可用</strong>？</h4><blockquote><p>Redis 没有使用哈希一致性算法，而是使用哈希槽。Redis 中的哈希槽一共有 16384 个，计算给定密钥的哈希槽，我们只需要对密钥的 CRC16 取摸 16384。</p></blockquote><p>假设集群中有 A、B、C 三个集群节点，<strong>不存在复制模式</strong>下，每个集群的节点包含的哈希槽如下：</p><ul><li><p>节点 A 包含从 0 到 5500 的哈希槽；</p></li><li><p>节点 B 包含从 5501 到 11000 的哈希槽；</p></li><li><p>节点 C 包含从 11001 到 16383 的哈希槽；</p></li></ul><p>这时，如果<strong>节点 B 出现故障</strong>，<u>整个集群就会出现缺少 5501 到 11000</u> 的哈希槽范围而不可用。</p><h4 id="4-Redis-常见性能问题和解决方案有哪些？">4. <strong>Redis 常见性能问题和解决方案有哪些</strong>？</h4><p>Redis 常见性能问题和解决方案如下：</p><ul><li><strong>Master不做持久化，   Slave 做 AOF</strong>：Master 最好不要做任何持久化工作，如 RDB 内存快照和 AOF 日志文件；如果数据比较重要，某个 Slave 开启 AOF 备份数据，策略设置为每秒同步一次；</li><li><strong>同局域网</strong>：为了主从复制的速度和连接的稳定性，Master 和 Slave 最好在同一个局域网内；</li><li>尽量避免在压力很大的主库上增加从库；</li><li><strong>主从复制不要用图状结构</strong>，用单向链表结构更为稳定，即：Master &lt;- Slave1 &lt;- Slave2 &lt;-Slave3….；这样的结构方便解决单点故障问题，实现 Slave 对 Master 的替换。如果 Master 挂了，可以立刻启用 Slave1 做 Master，其他不变</li></ul><h2 id="6-5-Redis-Key相关">6.5 Redis Key相关</h2><h4 id="1-假如-Redis-里面有-1-亿个-key，其中有-10w-个-key-是以某个固定的已知的前缀开头的，如果将它们全部找出来？">1.<strong>假如 Redis 里面有 1 亿个 key，其中有 10w 个 key 是以某</strong>个固定的已知的前缀开头的，如果将它们全部找出来？</h4><p>我们可以使用 keys 命令和 scan 命令，但是会发现使用 scan 更好。</p><ul><li><p><strong>keys命令</strong></p><p>虽然可以查询但不太推荐：</p><ul><li><strong>时间长且会导致线程阻塞</strong>： 时间长是因为O(N)遍历 ； 阻塞是因为Redis单线程，要等遍历完，这使得Redis要等keys执行完毕才能恢复生产（在生成环境中这是不被允许的）。</li><li><strong>没有分页功能</strong>： 一次查找所有的结果</li></ul></li><li><p><strong>scan命令</strong></p><p>推荐：</p><ul><li><p>不会阻塞，但查找出的元素可能重复，需要客户端去重下</p><blockquote><p><strong>为什么不会阻塞</strong>？</p><p>因为 scan 是通过游标方式查询的 ，查询过程中会把游标返回给客户端，单次返回空值且游标不为 0，则说明遍历还没结束，客户端继续遍历查询。</p></blockquote></li></ul></li></ul><h4 id="2-如果有大量的-key-需要设置同一时间过期，一般需要注意什么？">2.<strong>如果有大量的 key 需要设置同一时间过期，一般需要注意什</strong>么？</h4><p>如果有大量的 key 在同一时间过期，那么可能同一秒都从数据库获取数据，给数据库造成很大的压力，导致<strong>缓存雪崩</strong>。</p><ul><li><strong>解决方案</strong>： 最好给数据的过期时间加一个<strong>随机值</strong>，让过期时间更加分散</li></ul><h4 id="3-什么是-bigkey？会存在什么影响？">3.<strong>什么是</strong> <strong>bigkey？会存在什么影响</strong>？</h4><p>bigkey 是指键值占用内存空间非常大的 key。例如一个字符串 a 存储了 200M 的数据。</p><p><strong>bigkey 的主要影响有</strong>：</p><ul><li><p><strong>网络阻塞</strong>：获取 bigkey 时，传输的数据量比较大，会增加带宽的压力；</p></li><li><p>超时阻塞：因为 bigkey 占用的空间比较大，所以<u>操作起来效率会比较低</u>，导致出现阻塞的可能性增加。</p></li></ul><h4 id="4-Redis如何解决-key冲突？">4. <strong>Redis如何解决 key冲突</strong>？</h4><blockquote><p>Redis 如果 key 相同，后一个 key 会覆盖前一个 key。</p></blockquote><p>如果要解决 key 冲突，最好给 <strong>key 取好名</strong>区分开，可以按业务名和参数区分开取名，避免重复 key 导致的冲突。</p><h4 id="5-如何解决Redis的并发竞争Key问题-？">5. 如何解决Redis的并发竞争Key问题 ？</h4><blockquote><p>多个系统同时对一个 key 进行操作，但是最后执行的顺序和我们期望的顺序不同，这样也就导致了结果的不同。</p></blockquote><ul><li><p>解决方案：<strong>分布式锁</strong>（zookeeper 和 Redis 都可以实现分布式锁）。</p><ul><li><p><strong>zookeeper分布式锁</strong>：（1）每个客户端对某个方法加锁时，在zookeeper上的 与该方法对应的指定节点的目录下，生成一个唯一的瞬时有序节点；（2）判断是否获取锁的方式很简单，只需要判断有 序节点中序号最小的一个；（3）当释放锁的时候，只需将这个瞬时节点删除即可。</p><blockquote><p>同时，其可以避免服务宕机导致的锁无法释放，而产生的死锁问题。</p></blockquote></li></ul></li></ul><h4 id="6-Redis删除key的底层原理实现？">6. Redis删除key的底层原理实现？</h4><blockquote><p>参考：<a href="https://www.hoohack.me/2019/06/24/redis-expire-strategy">https://www.hoohack.me/2019/06/24/redis-expire-strategy</a></p></blockquote><p>Redis在启动的时候，会注册两种事件：</p><ol><li><strong>时间事件</strong>： Redis处理后台操作的一类事件，比如客户端超时、删除过期key</li><li><strong>文件事件</strong>： redis注册的回调函数是serverCron，在<strong>定时任务（惰性删除</strong>）回调函数中，通过调用databasesCron清理部分过期key</li></ol><p><strong>定时删除</strong></p><p>对于每一个设置了过期时间的key都会创建一个<strong>定时器</strong>，一旦到达过期时间就立即删除：</p><ul><li>缺点：占用了大量的CPU资源去处理过期的数据，会影响Redis的吞吐量和响应时间。</li></ul><p><strong>惰性删除</strong></p><p><strong>每次访问key的时候</strong>，都会调用<code>expireIfNeeded</code>函数判断key是否过期，如果是，清理key：</p><ul><li>缺点：大量的过期key没有被再次访问，因此不会被清除，导致占用了大量的内存。</li></ul><p><strong>定期删除</strong></p><p>每隔一段时间，扫描Redis中过期key字典，并清除部分过期的key：</p><ul><li>缺点：折中方案</li></ul><p><strong>Redis单线程清理key的时机</strong></p><p>Redis是以<strong>单线程运行的，在清理key是不能占用过多的时间和CPU</strong>，需要在尽量不影响正常的服务情况下，进行过期key的清理。</p><ul><li><p><strong>以随机删除为例</strong></p><ol><li><p>server.hz配置了serverCron任务的执行周期，默认是10，<strong>即CPU空闲时每秒执行十次</strong>；</p></li><li><p><strong>每次清理过期key的时间不能超过CPU时间的25%</strong> ；</p></li><li><p>如果是快速清理模式（在beforeSleep函数调用），则一次清理的最大时间是1ms；</p></li><li><p>依次遍历所有的DB；</p></li><li><p>从db的过期列表中随机取20个key，判断是否过期，如果过期，则清理；</p></li><li><p>如果有5个以上的key过期，则重复步骤5，否则继续处理下一个db ；</p></li><li><p>在清理过程中，如果达到CPU的25%时间，退出清理过程。</p></li></ol></li><li><p><strong>Redis4.0使用BIO处理</strong></p><p>Redis4.0以前，删除指令是del，del会直接释放对象的内存，但是，如果删除的key是一个<strong>非常大的对象</strong>，那么删除操作就会导致单线程卡顿，Redis的响应就慢了。</p><ul><li>在Redis4.0版本引入了unlink指令，能对删除操作进行“懒”处理，<strong>将删除操作丢给后台线程，由后台线程BIO来异步回收内存</strong>。</li></ul></li></ul><p><strong>内存淘汰策略</strong></p><p>Redis的内存淘汰策略，是指内存达到maxmemory极限时，使用某种算法来决定清理掉哪些数据，以保证新数据的存入。</p>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 校招 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（五）_计算机基础_MySQL</title>
      <link href="/p/56848/"/>
      <url>/p/56848/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我的校招记录：<a href="https://www.hwh.zone/p/29708/">校招笔记（零）_写在前面</a> ，以下是校招笔记总目录。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><h1>五、MySQL</h1><h2 id="5-1-MySQL基本">5.1 MySQL基本</h2><h4 id="0-关系型数据库和非关系数据库的区别？">0. 关系型数据库和非关系数据库的区别？</h4><ul><li><strong>关系型数据库的优点</strong><ul><li>容易理解，因为它采用了关系模型来组织数据；</li><li>可以<strong>保持数据的一致性</strong>；</li><li>数据<strong>更新的开销比较小</strong>；</li><li><strong>支持复杂查询</strong>（带where子句的查询）。</li></ul></li><li><strong>非关系型数据库的优点</strong><ul><li>不需要经过SQL层的解析，<strong>读写效率高</strong>；</li><li><strong>基于键值对</strong>，数据的扩展性很好；</li><li><strong>支持多种类型数据的存储</strong>，如图片，文档等等。</li></ul></li></ul><h4 id="1-介绍一下数据库三范式？">1.<strong>介绍一下数据库三范式</strong>？</h4><blockquote><p>参考：<a href="https://www.cnblogs.com/linjiqin/archive/2012/04/01/2428695.html">https://www.cnblogs.com/linjiqin/archive/2012/04/01/2428695.html</a></p></blockquote><ul><li><p><strong>第一范式</strong>： 数据库表中的<u>所有字段值都是不可分解的原子值</u> 。</p><blockquote><p>数据库系统中需要用到“地址”这个属性，本来直接将“地址”属性设计成一个数据库表的字段就行。但是如果系统经常会访问“地址”属性中的“城市”部分，那么就非要<u>将“地址”这个属性重新拆分为省份、城市、详细地址</u>等多个部分进行存储。</p><p><img src="https://i.loli.net/2021/05/03/NiPm9KajxLXpRQf.png" alt="img"></p></blockquote></li><li><p><strong>第二范式</strong>： 第二范式基于第一范式，且要求：<u>数据库表中的每一列都和主键相关，且不能只与主键的某一部分相关</u>（主要针对联合主键而言）, 即<strong>不存在部分依赖</strong>；</p><blockquote><p>下表是以：<u>订单编号&amp;商品编号</u>作为联合主键。这样在该<strong>表中商品名称、单位、商品价格等信息不与该表的订单编号相关</strong>，而仅仅是与商品编号相关。</p><p><img src="https://i.loli.net/2021/05/03/RoCLmOBcgJKhvyx.png" alt="img"></p><p>所以根据第二范式，将它进行拆分三个表：</p><p><img src="https://i.loli.net/2021/05/03/TnN8t5k3lrWxIgp.png" alt="img"></p></blockquote></li><li><p><strong>第三范式</strong>： 基于第二范式，数据表中的每一列数据都和主键<strong>直接相关</strong>，即<strong>不存在传递依赖</strong>；</p><blockquote><p>比如在设计一个订单数据表的时候，可以将客户编号作为一个外键和订单表建立相应的关系。而不可以在订单表中添加关于客户其它信息（比如姓名、所属公司等）的字段。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/2012040114105477.png" alt="img"></p></blockquote></li></ul><h4 id="2-MySQL数据库引擎有哪些？">2. <strong>MySQL数据库引擎有哪些</strong>？</h4><blockquote><p>MySQL查看所有的数据引擎：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show engines;</span><br></pre></td></tr></table></figure></blockquote><p>MySQL常用引擎包括：<code>MYISAM</code>、<code>Innodb</code>、<code>Memory</code>、<code>MERGE</code>，</p><ul><li><p><strong><code>MYISAM</code></strong> （读：my+i+son）</p><p>以select、insert为主的应用基本上可以使用这引擎。</p><ul><li><strong>优点</strong>：<strong>全表锁</strong>，拥有较高的执行速度，占用空间小；</li><li><strong>缺点</strong> ：不支持事务，不支持外键，并发性能差。</li></ul></li><li><p><strong><code>Innodb</code></strong></p><p>Innodb引擎提供了对数据库ACID<strong>事务</strong>的支持，并且实现了SQL标准的四种隔离级别，它的设计目标是<u>处理大容量数据库系统</u>。</p><ul><li><strong>优点</strong>：<strong>行级锁</strong>，<strong>支持事务</strong>，支持<u><strong>自动增长列</strong></u>，支持外键约束，<strong>并发能力强</strong></li><li><strong>缺点</strong>： 占用空间是MYISAM的2倍，处理效率相对也更低</li></ul></li><li><p><strong><code>Memory</code></strong></p><p>主要用于<strong>内容变化不频繁的</strong>代码表。</p><ul><li><strong>优点</strong>：<strong>全表锁</strong>，<u>存储在内存中，默认使用Hash，检索效率非常高</u></li><li><strong>缺点</strong>： 会占用和数据量成正比的内存空间且，mysql重启时会丢失，不适合精确查找</li></ul></li><li><p><strong><code>MERGE</code></strong></p><p>是一组MYISAM表的组合。</p></li></ul><h5 id="2-1-InnoDB、MyISAM、Memory-【索引】（按数据结构分）">2.1 InnoDB、MyISAM、Memory 【索引】（按数据结构分）</h5><blockquote><p>参考：<a href="https://segmentfault.com/a/1190000037683781">https://segmentfault.com/a/1190000037683781</a></p></blockquote><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20210820194526488.png" alt="image-20210820194526488"></p><h5 id="2-2-为什么Innodb使用自增id作为主键？">2.2 为什么Innodb使用自增id作为主键？</h5><ul><li><strong>如果不使用自增主键</strong>， 如身份证号、学号，每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置（<strong>涉及到B+树分裂等</strong>）， 频繁的移动、分页操作造成了大量的碎片；</li><li><strong>如果使用自增主键，</strong> 那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页。</li></ul><h4 id="3-说说InnoDB与MyISAM的区别？">3.<strong>说说InnoDB与MyISAM的区别</strong>？</h4><p>见前。</p><h5 id="3-1-说说InnoDB与MyISAM在B-数索引方式区别？">3.1 说说InnoDB与MyISAM在B+数索引方式区别？</h5><ul><li><p><strong>MyISAm</strong> , B+Tree叶节点的data域存放的是数据<strong>记录的地址</strong>，在索引检索的时候，如果指定的key存在，则取出其data域的值，然后以data域的值为地址读取相应的数据记录，这被称为“非聚簇索引” ；</p></li><li><p><strong>InnoDB，</strong> 树的节点data域保存了完整的数据记录，这个索引的<strong>key是数据表的主键（自增id）</strong> ；而<strong>其它索引都叫做辅助索引</strong>， 助索引的data域存储相应记录<strong>主键的值</strong>而不是记录地址。</p><blockquote><ul><li>在根据主索引搜索时，直接找到key所在的节点即可取出数据；</li><li>在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。</li></ul></blockquote></li></ul><h5 id="3-2-【百度】说说InnoDB与MyISAM在适用场景上的区别？">3.2 【百度】说说InnoDB与MyISAM在适用场景上的区别？</h5><ul><li><strong>MyISAM</strong> ，没有事务， 适合<strong>插入不频繁，查询非常频繁</strong>；</li><li><strong>Innodb：</strong> 有事务，适合<strong>可靠性要求比较高</strong>，或者<strong>更新和查询比较频繁</strong>。</li></ul><h4 id="4-为什么-SELECT-COUNT-FROM-table-在-InnoDB-比MyISAM-慢？">4. 为什么 SELECT COUNT(*) FROM table 在 InnoDB 比MyISAM 慢？</h4><p>对于 SELECT COUNT(*) FROM table 语句，在没有 WHERE 条件的情况下，InnoDB 比 MyISAM 可能会慢很多，尤其在大表的情况下。</p><ul><li>InnoDB 是去实时统计结果，会<strong>全表扫描</strong>；</li><li>而 MyISAM内部维持了一个<u><strong>计数器</strong></u>，<strong>预存了结果</strong>，所以直接返回即可。</li></ul><h4 id="5-简单说一说drop、delete与truncate的区别？">5.<strong>简单说一说drop、delete与truncate的区别</strong>？</h4><p>SQL中的drop、delete、truncate都表示删除，但是三者有一些差别：</p><ul><li><strong>删除类型</strong>： drop删除表结构；delete、truncate删除表内容。</li><li><strong>删除速度</strong>：  <strong>drop</strong>&gt; truncate &gt;delete</li><li><strong>生效速度</strong>： drop和truncate ，操作立即生效，不能回滚也不触发触发器；<strong>delete事务提交后才生效，会触发相应触发器</strong>。</li></ul><h4 id="6-什么是视图？-游标？">6.<strong>什么是视图</strong>？ 游标？</h4><p>视图是一种虚拟的表，通常是一个表或者多个表的行或列的子集，具有和物理表相同的功能。</p><ul><li>可以对视图进行增，改，查，操作，但<strong>对视图的修改不影响基本表</strong>；</li><li>相比多表查询，获取数据速度更容易。</li></ul><p>游标，是对<strong>查询出来的结果集</strong>作为一个单元来有效的处理。</p><ul><li>一般不使用游标，但是需要逐条处理数据的时候，游标显得十分重要。</li></ul><h4 id="7-什么是内联接、左外联接、右外联接？">7.<strong>什么是内联接、左外联接、右外联接</strong>？</h4><ul><li><p><strong>内联接（Inner Join）</strong>：两个表（或连接）中某一数据项相等的连接称为内连接。 连接的结果是形成一个新的数据表。 内连接中参与连接的表（或连接）的地位是相等的；</p></li><li><p><strong>左外联接（Left Outer Join</strong>）：除了匹配2张表中相关联的记录外，<u>还会匹配左表中剩余的记录</u>，<u>右表中未匹配到的字段用NULL表示</u>；</p></li><li><p><strong>右外联接（Right Outer Join）</strong>：除了匹配2张表中相关联的记录外，还会<u>匹配右表中剩余的记录，左表中未匹配到的字段用NULL表示</u>。</p></li></ul><h4 id="8-说说在-MySQL-中一条查询-SQL-是如何执行的？">8.<strong>说说在 MySQL 中一条查询 SQL 是如何执行的</strong>？</h4><p>例如：<code>select name from t_user where id=1</code></p><ol><li><p><strong>取得链接</strong>，使用使用到 MySQL 中的<strong>连接器</strong>；</p></li><li><p><strong>查询缓存</strong>，key 为 SQL 语句，value 为查询结果，如果查到就直接返回；</p><blockquote><p>在 MySQL 8.0 版本已经将查询缓存删除，也就是说 MySQL 8.0 版本后不存在此功能。</p></blockquote></li><li><p><strong>分析器</strong>，分为词法分析和语法分析。此阶段只是做一些 SQL 解析，语法校验。所以一般语法错误在此阶段；</p></li><li><p><strong>优化器</strong>，是在表里<strong>有多个索引的时候，决定使用哪个索引</strong>；或者一个语句中存在多表关联的时候（join），决定<strong>各个表的连接顺序</strong>；</p></li><li><p><strong>执行器</strong>，开始执行语句。执行语句的时候还要判断是否具备此权限，如果有权限：（1）根据表的引擎定义，使用引擎提供的接口，获取表的第一行，判断id是否等于1 ；（2）如果不是则继续调用引擎接口去获取下一行，继续判断；（3）直至取到这个表的最后一行</p></li></ol><h4 id="9-MySQL-中-varchar-与-char-的区别？-int-3-呢？">9. <strong>MySQL 中 varchar 与 char 的区别</strong>？ int(3) 呢？</h4><ul><li><p>char 是一种固定长度的类型，varchar 则是一种可变长度的类型。</p><p><img src="https://i.loli.net/2021/05/03/SoHv6lyhp94TwWP.png" alt="image-20210503214113219"></p></li><li><p><strong>float(3,2) 和 int(3)</strong></p><ul><li><code>float(3,2)</code> : &quot;浮点型&quot;的长度是用来<strong>限制数字存储范围</strong>的。比如 float(3,2) 只能够写入 <code>0.00~999.99</code>。</li><li><code>int(3)</code> ：&quot;整型&quot;的长度并<strong>不会限制存储的数字范围</strong>，都是<code>-2147483648 ~ 2147483647</code> 。只<strong>限制显示长度</strong>。</li></ul></li></ul><h4 id="10-超键、主键、候选键和外键有什么区别？">10.<strong>超键、主键、候选键和外键有什么区别</strong>？</h4><ul><li><strong>超键(super key)</strong>：在关系中能唯一标识元组的属性集称为关系模式的超键；</li><li><strong>候选键(candidate key)</strong>：不含有多余属性的超键称为候选键，<u>是超键的子集</u>；</li><li><strong>主键(primary key)</strong>：用户选作元组标识的一个候选键程序主键，<u>是候选键的子集</u> ；</li><li><strong>外键</strong>：如果关系模式<strong>R中属性K是其它模式的主键</strong>，那么<strong>k在模式R中称为外键</strong>。</li></ul><p>下面举例说明（<strong>假设姓名不重复唯一</strong>）：</p><table><thead><tr><th style="text-align:center">身份证</th><th style="text-align:center">姓名</th><th style="text-align:center">性别</th><th style="text-align:center">年龄</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><ul><li><u>超键：</u> 身份证、姓名、（姓名、性别）、（姓名、性别、年龄）都可以作为超键；</li><li><u>候选键</u> ：身份证、姓名 都唯一，都可以作为候选键；</li><li><u>主键：</u> 在候选键选一个作为主键，例如：身份证。</li></ul><h4 id="11-解释⼀下什么是池化设计思想。什么是数据库连接池-为什么需要数据库连接池">11.  解释⼀下什么是池化设计思想。什么是数据库连接池?为什么需要数据库连接池?</h4><ul><li><p><strong>池化设计思想</strong></p><p>我们常⻅的如java线程池、jdbc连接池、redis连接池等就是这类设计的代表实现。这种设计会<u>初始预设资源</u>，<strong>解决的问题就是抵消每次获取资源的消耗，如创建线程的开销，获取远程连接的开销</strong>等。</p></li><li><p><strong>数据库连接池</strong></p><p>数据库连接本质就是⼀个 <strong>socket</strong> 的连接。数据库服务端还要维护⼀些缓存和⽤户权限信息之类的所以<strong>占⽤了⼀些内存</strong>。我们可以把数据库连接池是看做是维护的数据库连接的缓存，以便将来需要对数据库的请求时可以<strong>重⽤这些连接</strong>。</p></li><li><p><strong>为什么要用数据库连接池</strong>？</p><p>为每个⽤户打开和维护数据库连接，尤其是对动态数据库驱动的网站应⽤程序的请求，既昂贵⼜浪费资源。在连接池中，创建连接后，将其放置在池中，并再次使⽤它，因此不必建⽴新的连接。如果使⽤了所有连接，则会建⽴⼀个新连接并将其添加到池中。</p></li></ul><h4 id="12-如果数据不存储在磁盘而是在内存，用什么数据结构？为什么Mysql不使用hash？">12. 如果数据不存储在磁盘而是在内存，用什么数据结构？为什么Mysql不使用hash？</h4><blockquote><p>参考：<a href="https://www.cnblogs.com/wangtao_20/p/3643994.html">为什么hash作为内存使用的经典数据结构?</a></p></blockquote><p>数据放在磁盘，使用<strong>B+树</strong>，<strong>核心是为了减少磁盘IO</strong>，因为磁盘IO的代价很大（是内存的十万倍）。</p><p>我们使用<strong>hash</strong>寻找数据的时候，<strong>数据随机分散到各个物理位置</strong>，不是有序的数据。而<strong>内存设备也是随机访问设备</strong>，内存很适合用hash方式来读取数据。</p><ul><li><p><strong>随机访问</strong>：存储器单元的内容可以根据需要自由取出或存储，而且<strong>访问的速度与存储器单元的位置</strong>无关 。(通过行，列地址总线就可以快速定位存储的数据)</p><blockquote><p>但是磁盘，每次访问数据，是需要先定位，然后<strong>顺序</strong>移动；如果下个数据不在磁头附近，又要重新定位。</p><p>如果Hash索引磁盘数据，（1）每次访问都要IO<strong>不能范围</strong>（2）数据太多，Hash索引保存不了键值，而<strong>高度为3的B+数就能保存千万级别的数据</strong>（3）当数据量很大时，<strong>hash冲突</strong>的概率也会非常大（4）组合索引可以支持部分索引查询，如(a,b,c)的组合索引，查询中只用到了阿和b也可以查询的，如果使用hash表，组合索引会将几个字段合并hash，<strong>没办法支持部分索引</strong> （5）当需要按照索引进行order by时，hash值<strong>没办法支持排序</strong> 。</p></blockquote></li></ul><h4 id="13-【字节】Mysql-Join的原理？">13.【字节】Mysql Join的原理？</h4><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/54275505">https://zhuanlan.zhihu.com/p/54275505</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user tb1 left join level tb2 on tb1.id=tb2.user_id</span><br></pre></td></tr></table></figure><ol><li><p><strong>简单嵌套循环</strong></p><p><strong>双层for 循环</strong> ，通过循环外层表的行数据，逐个与内层表的所有行数据进行比较来获取结果。</p><img src="https://i.loli.net/2021/09/04/u3LJnMgZsIV6Atd.png" alt="image-20210904063419237" style="zoom:50%;" /></li><li><p><strong>索引嵌套循环连接</strong></p><p>通过外层表匹配条件<strong>直接与内层表索引进行匹配</strong>，避免和内层表的每条记录去进行比较， 这样极大的减少了对内层表的匹配次数。</p><ul><li>从原来的匹配次数=外层表行数 * 内层表行数,变成了 外层表的行数 * 内层表索引的高度，极大的提升了 join的性能；</li><li>注意，<strong>要为表user_level 去建立索引</strong></li></ul><img src="https://i.loli.net/2021/09/04/1gkP9upMosUtYS4.png" alt="image-20210904063546011" style="zoom:80%;" /></li><li><p><strong>缓存块嵌套循环连接</strong></p><p>其优化思路是<strong>减少内层表的扫表次数</strong>。</p><ul><li>通过简单的嵌套循环查询的图，我们可以看到，左表的每一条记录都会对右表进行一次扫表，扫表的过程其实也就是<strong>从内存读取数据</strong>的过程，那么这个过程其实是比较消耗性能的。</li></ul><p><img src="https://i.loli.net/2021/09/04/s1nE7IzYZ6TGlkK.jpg" alt="img"></p><p>所以缓存块嵌套循环连接算法意在通过<strong>一次性缓存外层表的多条数据</strong>，以此来减少内层表的扫表次数，从而达到提升性能的目的。如果无法使用<strong>Index Nested-Loop Join</strong>的时候，数据库是默认使用的是<strong>Block Nested-Loop Join算法的</strong>。</p><ul><li><strong>当level 表的 user_id 不为索引</strong>的时候，默认会使用Block Nested-Loop Join算法。</li></ul><p><img src="https://i.loli.net/2021/09/04/iP9o6OpU8ZxcIwF.jpg" alt="img"></p></li></ol><h5 id="13-1-join和left-join区别">13.1 join和left join区别?</h5><p><strong>join相当于我们平时用的where</strong>，就是把两张表中同时满足a.id=b.id的数据找出来；</p><p>left join是以左表（a）为参考对象，相当于做一个for循环，把a表的数据一条一条的读取出来，然后根据a.id=b.id的条件到b表中查找数据。</p><h5 id="13-2-unio和unio-all的区别">13.2 unio和unio all的区别?</h5><p>如果我们需要将<strong>两个select语句的结果作为一个整体显示出来</strong>，我们就需要用到union或者union all关键字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select employee_id,job_id from employees union select employee_id,job_id from job_history</span><br></pre></td></tr></table></figure><p><strong>union会自动压缩多个结果集合中的重复结果，而union all则将所有的结果全部显示出来</strong>，不管是不是重复。</p><h5 id="13-3-unio-和-join的区别">13.3 unio 和 join的区别?</h5><blockquote><p>参考：<a href="https://www.jb51.net/article/30975.htm">https://www.jb51.net/article/30975.htm</a></p></blockquote><p>join是对两个表进行联合，相当于where，满足条件的行会被选出，<strong>其中列会被扩充！</strong>  但unio是连接结果集，需要满足列个数相同，<strong>只会保存第一个表列个数，列个数不会被扩充！</strong></p><h2 id="5-2-分布式数据库">5.2 分布式数据库</h2><h4 id="0-【字节】分布式数据库锁如何实现？">0. 【字节】分布式数据库锁如何实现？</h4><ul><li><strong>什么时候用到分布式数据库</strong>？<ol><li><strong>水平拆分</strong> <strong>：数据量大到单机数据库已存储不下</strong>时， 可以对数据进行拆分，化整为零，将数据均匀分布到多个数据库节点中。</li><li><strong>读写分离</strong>：主要用在<strong>数据量并不大</strong>，单机数据库能够hold得住，<strong>但读请求很高</strong>的情况下。此时，可以配置多个只读数据库节点，来分担主节点的读请求。通过数据复制机制，<strong>在主节点和只读节点之间进行数据的实时同步</strong>，保证主从节点的数据一致性。</li></ol></li><li><strong>分布式数据库锁</strong>？<ol><li><strong>直接锁表</strong>，代价比较大</li><li><strong>加入排它锁</strong>，查询语句后面增加<strong>for update</strong>（这里我们希望使用行级锁，就要给method_name添加索引）</li><li><strong>Zookeeper实现分布式锁</strong></li></ol></li></ul><h4 id="1-请说说MySQL数据库的锁？">1.请说说MySQL数据库的锁？</h4><p><img src="https://i.loli.net/2021/05/24/S7HoKh8EcpXT1Mz.png" alt="img"></p><p>MySQL 中常见锁如下：</p><p>【<u>按使用方式划分</u>】</p><ul><li><p><strong>共享锁</strong>：不堵塞，多个用户可以同一时刻<strong>读取</strong>同一个资源，相互之间没有影响；</p></li><li><p><strong>排它锁（写锁</strong>）：<u>一个写操作阻塞其他的读锁和写锁</u>，<strong>只允许一个用户进行写入</strong>，<strong>防止其他用户读取正在写入的资源</strong>。</p></li></ul><p>【<u>按锁粒度划分</u>】</p><ul><li><p><strong>表锁</strong>：系统开销最小，会锁定整张表，<u>不会出现死锁</u>；但是由于粒度太大，因此造成锁的冲突几率大，并发性能低。<strong>MyISAM 使用表锁。</strong></p></li><li><p><strong>行锁</strong>：<u>容易出现死锁</u>，发生冲突概率低，并发性能高。<strong>InnoDB 支持行锁</strong>。</p><blockquote><p><strong>必须有索引才能实现</strong>，否则会自动锁全表，那么就不是行锁。</p></blockquote></li></ul><p>【<u>按思想划分</u>】</p><ul><li><strong>乐观锁</strong></li><li><strong>悲观锁</strong></li></ul><h4 id="2-说说什么是锁升级？什么情况发生锁升级？">2.<strong>说说什么是锁升级？什么情况发生锁升级</strong>？</h4><blockquote><p>区分一下sycronized锁升级。</p></blockquote><p>锁升级是指将当前锁的粒度降低：<code>行锁→页锁→表锁</code>。</p><p>发生锁升级的情况：</p><ol><li>当一条SQL语句对<u>同一个对象</u>上持有的锁数量超锁了阈值，默认这个阈值为5000，<strong>但是对于不同对象不会发生锁升级</strong></li><li>锁资源占用的内存超过<u>激活内存</u>的百分之40 就会发生锁升级</li></ol><h5 id="2-1-为什么说innoDB-引擎不存在锁升级的问题-？">2.1 为什么说innoDB 引擎不存在锁升级的问题 ？</h5><p>待补充。</p><h5 id="2-2-什么时候触发行锁和表级锁？">2.2 什么时候触发行锁和表级锁？</h5><p>mysql默认存储引擎都是<strong>innodb</strong>，默认是使用<strong>行锁</strong> 。</p><ul><li><p>触发行级锁 ，<strong>行级锁锁的是索引记录</strong> ，使用了索引所以就会触发行级锁。</p></li><li><p>触发表级锁，有以下三种情况</p><blockquote><p>其实不管是读操作(select)还是写操作(update,delete,insert),只要涉及到带有筛选条件的语句，<strong>如果筛选条件中没有用到索引</strong>，就会触发全表扫描。</p></blockquote><ol><li><strong>全表更新</strong>：事务<strong>需要更新大部分数据或全部数</strong>据，如果使用行级锁，会导致事务执行效率低，从而导致其他事务长时间等待锁和更多的锁冲突</li><li><strong>多表级联：事务涉及多张表</strong>，比较复杂的关联查询，很可能造成死锁，这种情况若能一次性锁住事务涉及的表，从而避免死锁，减少数据库事务回滚所带来的开销</li><li><strong>筛选条件中未用到索引</strong>： 全表扫描</li><li><strong>用到索引，但区分度程度不高</strong> ：innodb认为全表扫描比走索引效率更高导致索引失效，这个时候就要通过explain去查看下查询计划，看下查询语句是否真的用到了索引</li></ol></li></ul><h5 id="2-3-行锁适合的场景？">2.3 行锁适合的场景？</h5><p>A用户消费，service层先查询该用户的账户余额，若余额足够，则进行后续的扣款操作；这种情况查询的时候应该对该记录进行加锁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for update # 操作该记录时加上</span><br></pre></td></tr></table></figure><p>否则，B用户在A用户查询后消费前先一步将A用户账号上的钱转走，而此时A用户已经进行了用户余额是否足够的判断，则可能会出现余额已经不足但却扣款成功的情况。</p><h4 id="3-怎样尽量避免死锁的出现？">3.<strong>怎样尽量避免死锁的出现</strong>？</h4><ol><li><p><strong>设置获取锁的超时时间</strong>，至少能保证最差情况下，可以退出程序，不至于一直等待导致死锁；</p></li><li><p><strong>设置按照同一顺序访问资源</strong>，类似于串行执行；</p></li><li><p><strong>避免事务中的用户交叉</strong>；</p></li><li><p>保持事务简短并在一个批处理中；</p></li><li><p>使用<strong>低隔离级别</strong>。</p></li></ol><h4 id="4-解释一下悲观锁和乐观锁？">4.<strong>解释一下悲观锁和乐观锁</strong>？</h4><ul><li><p><strong>悲观锁</strong>： 悲观锁是基于一种悲观的态度类来防止一切数据冲突。它是以一种预防的姿态 <u>在修改数据之前把数据锁住</u>，然后再对数据进行读写，在它释放锁之前任何人都不能对其数据进行操作。一般数据库本身锁的机制都是基于悲观锁的机制实现的。</p><ul><li><p><strong>特点</strong>： 完全保证数据的独占性和正确性，因为每次请求都会先对数据进行加锁；但是造成性能消耗</p></li><li><p><strong>实现</strong> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 加读锁</span><br><span class="line">LOCK tables test_db READ </span><br><span class="line"># 释放锁</span><br><span class="line">UNLOCK TABLES</span><br><span class="line"># 加写锁</span><br><span class="line">LOCK tables test_db WRITE </span><br><span class="line"># 释放锁</span><br><span class="line">UNLOCK TABLES</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>乐观锁</strong>： 对于数据冲突保持一种乐观态度，操作数据时不会对操作的数据进行加锁，使得<u>多个任务可并行对数据操作</u>。但是<u>使用一种验证机制来避免数据冲突</u> （一般通过加版本后对比来实现）。</p><ul><li><p><strong>特点</strong>： 并发类型的锁，<u>本身不加锁但通过业务实现锁的功能</u> ，没有锁操作因此性能更高。</p></li><li><p><strong>实现形式</strong>：</p><p>（1）两个请求同时操作操作标Name字段，二者查询需检索的数据都是一样的：</p><p><img src="https://i.loli.net/2021/04/20/H6wyLdqZN8BJipx.png" alt="img"></p><p>（2）请求1修改字段数据<code>“zhangsan”→“lisi”</code> ，并将版本号增加+1 ，验证版本号一直后提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update A set Name=lisi,version=version+1 where ID=#&#123;id&#125; and version=#&#123;version&#125;</span><br></pre></td></tr></table></figure><p>（3）请求2也想修改<code>“zhangsan”→“liming”</code>  ，但是提交时由于 <u>版本号不一致，无法提交成功</u></p></li></ul></li></ul><h5 id="4-1-数据库乐观锁和悲观锁，如何实现？">4.1 数据库乐观锁和悲观锁，如何实现？</h5><ul><li><p><strong>实现乐观锁</strong></p><ol><li><p>利用版本号，如MVCC；</p></li><li><p><strong>时间戳</strong>：同样是在需要乐观锁控制的table中增加一个字段，名称无所谓，字段类型使用时间戳（timestamp）, 和上面的version类似。</p><p>也是在更新提交的时候，将当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比，如果一致则OK，否则就是版本冲突。</p></li></ol></li><li><p><strong>实现悲观锁</strong></p><p>直接加上读锁或者写锁，SELECT … FOR UPDATE 。</p></li></ul><h4 id="5-介绍一下分布式数据库全局ID唯一且自增，如何生成？-（或者问分库分表之后，id-主键如何处理？）">5.<strong>介绍一下分布式数据库全局ID唯一且自增，如何生成</strong>？ （<strong>或者问分库分表之后，id 主键如何处理</strong>？）</h4><p>因为要是分成多个表之后，每个表都是从 1 开始累加，这样是不对的，我们需要⼀个全局唯⼀的 id来支持。</p><ol><li><p><strong>UUID</strong>：不适合作为主键，因为太长了，并且无序不可读，查询效率低。比较适合用于生成唯一的名字的标示比如文件的名字。</p></li><li><p>ID自增量为<u>分布式数据库个数</u>，缺点是扩展性不好；</p></li><li><p><a href="https://www.cnblogs.com/jiangxinlingdu/p/8440413.html">snow flake算法</a>：snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。</p><p><img src="https://pic3.zhimg.com/80/v2-b3a91b9e3f6468be39f3dc3345e9f4f2_720w.jpg" alt="img"></p><ul><li><strong>核心思想</strong>： 使用41bit作为毫秒数，10bit作为机器的ID（<strong>5个bit是数据中心，5个bit的机器ID</strong>），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 <u>不同ID</u>），最后还有一个符号位，永远是0。</li></ul></li><li><p><a href="https://blog.csdn.net/minkeyto/article/details/104943883">Leaf算法</a>：分号段</p></li></ol><h4 id="8-介绍一下哈希算法？和一致性哈希算法？">8.<strong>介绍一下哈希算法？和一致性哈希算法</strong>？</h4><ul><li><p><strong>哈希算法</strong></p><ul><li><strong>介绍</strong>： 哈希算法<u>将任意长度的二进制值映射为较短的固定长度的二进制值</u>，这个小的二进制值称为<strong>哈希值</strong>。哈希值是一段数据唯一且<strong>极其紧凑的数值表示形式</strong>。</li><li><strong>分布式应用中缺点</strong>： 在分布式的存储系统中，<u>要将数据存储到具体的节点上</u>。如果采用哈希算法：<code>key%N</code>（key是数据的key，N是机器节点数） 。出现机器加入或退出集群（<strong>N变了，映射值不一样了</strong>），所有的数据映射都无效了。</li></ul></li><li><p><strong>一致性哈希算法</strong></p><ul><li><p><strong>介绍</strong>：解决普通哈希算法造成负载均衡时，在<strong>服务节点数量变动</strong>时出现<strong>哈希失效</strong> 问题</p></li><li><p><strong>实现</strong>：</p><ol><li><p><strong>构建环</strong>：按照常用的hash算法来将对应的key哈希到一个具有<strong>2^32</strong>次方个节点的空间中（即0 ~ (2^32)-1）。</p><blockquote><p>Note: 节点的个数可以自定义, hash环我们可以用TreeMap来实现, 因为treeMap是排序的，我们刚好可以利用上。</p></blockquote><img src="https://i.loli.net/2021/04/20/Al6k3ZmHJO2qbe9.jpg" alt="img" style="zoom:50%;" /></li><li><p><strong>映射服务器节点</strong>： 将各个服务器使用Hash进行一个哈希，确定每台机器其在哈希环上的位置。</p><blockquote><p>一般用服务器ip或唯一主机名进行哈希。</p></blockquote><img src="https://i.loli.net/2021/04/20/1ZKalnT9CStVc8s.jpg" alt="img" style="zoom:50%;" /></li><li><p><strong>映射数据。</strong> 对于要存储的数据：<code>ojectA、objectB、objectC、objectD</code> ，首先通过特定哈希函数计算出<code>hash</code>值 ，散列到环上。然后从数据所在位置<u>沿环顺时针“行走”</u>，第一台遇到的服务器就是其应该定位到的服务器。</p><img src="https://i.loli.net/2021/04/20/SwUijYkyJPp34v1.jpg" alt="img" style="zoom:50%;" /></li><li><p><strong>出现服务器变动。</strong> 如果此时NodeC宕机了，此时Object A、B、D不会受到影响，只有Object C会重新分配到Node D。<u>避免了大量数据迁移，减小了服务器的的压力</u> 。</p></li></ol></li></ul></li></ul><h4 id="9-（再理解）介绍一下MVVC？">9. （再理解）介绍一下MVVC？</h4><p>MVCC（Multi-Version Concurrency Control）多版本并发控制，是</p><p>数据库控制并发访问的一种手段。</p><blockquote><ul><li>特别要注意<strong>MVCC</strong>只在<strong>读已提交(RC)</strong> 和<strong>可重复读（RR）</strong> 这两种事务隔离级别下才有效</li><li>是<strong>数据库引擎（InnoDB）</strong> 层面实现的，用来处理读写冲突的手段（不用加锁），提高访问性能</li></ul></blockquote><ul><li><p>MVCC协议中，事务提交不会覆盖原数据，而是产生新版本数据，<strong>每个数据有多个历史版本</strong>，但同一时刻只有最新的版本有效；</p></li><li><p>MVCC是在并发访问数据库时，通过对数据做多版本管理，避免<u>【<strong>因为写锁的阻塞而造成读数据的并发阻塞</strong>】</u>问题。可以让<strong>读取数据同时修改，【修改数据时同时可读取】</strong>。简单来说，就是<strong>不对数据库加上读写锁！</strong></p></li></ul><h5 id="9-1-MVCC-如何实现-？">9.1 MVCC 如何实现 ？</h5><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/52977862">Innodb MVCC实现原理</a></p></blockquote><ul><li><p><strong>总结性回答</strong></p><p>MVCC是以一个多版本并发控制系统，它主要通过以下两个部分实现：</p><ul><li>每行记录：记录最近操作该行记录的事务ID，和上一版本数据的指针（指向undo log）</li><li>readview：每次<strong>读（写不可以</strong>） 可以获取一个readview，记录当前活跃的事务ID ，可以在<strong>写的过程进行读</strong></li></ul><p>写的时候并发读，通过比较当前行记录的事务ID和readview活跃的事务ID，来决定是否读取该行记录还是上一版本的数据。</p></li></ul><p>MVCC实现的核心部分为：</p><ol><li><p><strong>事务版本号</strong>：每次<strong>事务开启前</strong>都会从数据库获得一个自增长的<strong>事务ID</strong>，可以从事务ID判断事务的执行先后顺序。</p></li><li><p><strong>表的隐藏列</strong> <strong>：每一行</strong> 有如下三个重要字段属性：</p><table><thead><tr><th style="text-align:center">隐藏列</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><strong>DB_TRX_ID</strong></td><td style="text-align:center">记录操作该行事务的ID</td></tr><tr><td style="text-align:center"><strong>DB_ROLL_PTR</strong></td><td style="text-align:center">指向上一个版本的数据（在undo log）的指针</td></tr><tr><td style="text-align:center"><strong>DB_ROW_ID</strong></td><td style="text-align:center">隐藏ID，当表没有合适的索引作为聚簇索引时，会用该ID创建聚簇索引</td></tr></tbody></table></li><li><p><strong>undo log</strong> ：每一行记录被修改之前的日志。</p><blockquote><p>当事务被回滚时，可以用通过undo log日志对数据进行还原。</p></blockquote><p>一个小例子：修改某行记录name从 <code>“张三→李四”</code></p><p><img src="https://pic1.zhimg.com/v2-1daaeab59495ff3378dae24ea21dc158_r.jpg" alt="preview"></p></li><li><p><strong>read view</strong>。在innodb 中<strong>每个SQL语句执行前</strong>都会得到一个read_view，保存了当前数据库系统中正<strong>处于活跃（没有提交</strong>）的事务的ID号。</p><blockquote><p>根据事务的隔离性，这些事务ID列表不会被其它事务看到。</p></blockquote><p>其相关重要属性如下：</p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><strong>trx_ids</strong></td><td style="text-align:center">当前系统：活跃<code>（未提交）事务版本号集合</code></td></tr><tr><td style="text-align:center"><strong>low_limit_id</strong></td><td style="text-align:center">当前系统：<code>最大版本事务号+1</code></td></tr><tr><td style="text-align:center"><strong>up_limit_id</strong></td><td style="text-align:center">当前系统：<code>活跃的最小事务版本号</code></td></tr><tr><td style="text-align:center"><strong>creator_trx_id</strong></td><td style="text-align:center">当前read view：<code>事务版本号</code></td></tr></tbody></table></li></ol><p>具体原理可以描述如下：</p><blockquote><p>举个例子，假设有一个user_info表，初始数据如下：</p><p><img src="https://i.loli.net/2021/05/30/ATDHgI7sKeziOxE.png" alt="image-20210529211818428"></p><p>现在有事务A，B<strong>同时对<code>id=1</code> 这行数据进行操作</strong>，先开启事务A（未提交），此时执行事务B，最后返回什么结果呢？</p></blockquote><ol><li><p>事务A（写），执行 <code>update user_info set name =”李四”</code></p><ul><li><p>获得事务编号：102</p></li><li><p>当前事务A的视图为：（<strong>写）不会获得read view</strong>！</p></li></ul></li><li><p>事务B（读），执行 <code>select * fom user_info where id=1</code></p><ul><li><p>获得事务B编号：103</p></li><li><p>当前事务B的视图为：</p><table><thead><tr><th style="text-align:center"><strong>trx_ids</strong></th><th style="text-align:center">当前活跃的事务：102,103</th></tr></thead><tbody><tr><td style="text-align:center"><strong>low_limit_id</strong></td><td style="text-align:center">当前最大事务id+1:<strong>104</strong></td></tr><tr><td style="text-align:center"><strong>up_limit_id</strong></td><td style="text-align:center">当前最小事务id：<strong>102</strong></td></tr><tr><td style="text-align:center"><strong>creator_trx_id</strong></td><td style="text-align:center">当前事务id：<strong>103</strong></td></tr></tbody></table></li></ul><blockquote><p><strong>不同隔离级别下，read view的工作方式</strong>：</p><ol><li><p><strong>读未提交</strong>：不会获得read view的副本（等于没有并发控制所以会出现脏读）</p></li><li><p><strong>读提交</strong>：每一次select都会获得一个read view的副本，所以会造成【不可重复读】</p><p><img src="https://i.loli.net/2021/05/30/EQSJBYZMeUljA3g.png" alt="image-20210529222746175"></p></li><li><p><strong>可重复读</strong>：同一个事务select只会获得一次read view副本（select的时候不允许修改），所以不会出现不可重复读。</p><p><img src="https://i.loli.net/2021/05/30/ITXb5OukhL1EJ4N.png" alt="image-20210529222905837"></p></li></ol></blockquote></li><li><p>事务A（写），开始执行update语句：（1）把原数据拷贝到undo log，（2）然后进行修改name字段：<code>“张三→李四”</code>，（3）并设置DB_TRX_ID 隐藏字段：<code>99→102</code> （4）设置DB_ROLL_PTR隐藏字段：<code>执行上个事务版本地址</code></p><p><img src="https://i.loli.net/2021/05/30/zjCi4AeRQsbHaPO.png" alt="image-20210529213739125"></p><p>此时，<strong>事务A还并未提交</strong>，依旧是处于活跃状态。</p></li><li><p>事务B（读），开始执行select语句，<strong>查询到是事务A修改后的语句</strong></p><p><img src="https://i.loli.net/2021/05/30/xspAhSDXbOGroqC.png" alt="image-20210529214159799"></p><p>把<strong>数据和read view （视图）匹配</strong>： <u>保证</u>（1）<strong>数据已提交，没有其他事物修改，否则去找上一版本的数据</strong>。</p><blockquote><ol><li><code>当前数据记录的事务id &lt; 事务B视图中最小活跃事务id</code> : 说明<strong>数据</strong>，是在<strong>事务B的read view 创建前</strong>就存在，所以可以显示。</li><li><code>当前数据记录的事务id &gt; 事务B视图中最大活跃事务id</code> ：说明<strong>数据</strong>，是在<strong>事务B的read view 创建后</strong>才存在，此时不应该显示。</li><li><code>事务B视图中最小活跃事务id&lt;= 当前数据记录的事务id &lt;= 事务B视图中最大活跃事务id</code> ： 说明有<strong>其它事务在修改这行记录数据</strong>，但可能还没有提交。把id和事务B的read view的活跃事务集合trx_ids进行匹配：<ul><li>如果数据记录的ID不存在trx_ids，说明已经提交了事务，可以显示</li><li>如果存在trx_ids，说明<strong>数据还没提交，此时事务B查询到数据不能显示</strong>（除非此时数据记录的事务id == 事务B的id，由于是自己的当然可以显示）</li></ul></li></ol></blockquote></li><li><p>事务B（读），根据上述匹配规则，<strong>此时不能读</strong>，应该去undo log中找到上一版本数据。</p><blockquote><p>此时<code>事务B的id=103，数据记录的事务id=102</code> ：满足条件3，且此时trx_ids存在事务id=102，说明事务A（id=102）还没提交，因此<strong>不能显示。</strong></p></blockquote><p>故，最终查找的数据为：</p><img src="https://i.loli.net/2021/05/30/ATDHgI7sKeziOxE.png" alt="image-20210529211818428" style="zoom:80%;" /></li></ol><p>可以看到，整个过程MVCC<strong>事务A【写】没有加锁</strong>，只是进行版本号控制 &amp; undo log，可以进行<strong>并发【读】</strong>。</p><h5 id="9-2-MVCC-版本号如何变化的？更新的数据如何确定版本的？【幻读】又是怎么解决的呢？">9.2 MVCC 版本号如何变化的？更新的数据如何确定版本的？【幻读】又是怎么解决的呢？</h5><ul><li><p><strong>版本号变化</strong></p><p>每条记录有三个隐藏列：（1）<strong>DB_TRX_ID</strong> （2）<strong>DB_ROLL_PTR</strong> （3）<strong>DB_ROW_ID</strong></p><p>每一次新事务，<strong>update更新语句</strong>，都会将（1）拷贝数据到undo log（2）DB_ROLL_PTR指向上个数据的版本undo log（3）DB_TRX_ID修改为新事务的id 。</p></li><li><p><strong>为什么MVCC可解决幻读</strong></p><p><strong>在RR（可重复读级别下）不会出现幻读</strong>。例如：</p><ol><li>开启事务1，获得事务ID为1；</li><li>事务1执行查询，得到readview；</li><li>开始事务2；</li><li>执行insert；</li><li>提交事务2；</li><li>执行事务1的第二次查询 (因为这里是RR级别，所以<strong>不会再去获得readview，<strong>还是使用第一次获得的readview，所以</strong>当前read view 事务的ID不会更新</strong>，即不会加入插入事务2)；</li><li>最后得到的结果是，插入的数据不会显示，因为<strong>插入的数据事务ID &gt; readview里的最大活跃事务ID</strong>。</li></ol></li></ul><h5 id="9-3-mvvc-和-for-update的区别">9.3 mvvc 和 for update的区别</h5><ol><li><strong>是否加锁</strong>：  mvvc不加锁，只通过多版本来进行并发控制；for update会加锁（<strong>即X/写锁</strong>）。</li></ol><h5 id="9-4-（快手）MVCC作用，如何实现RC，RR">9.4 <strong>（快手）MVCC作用，如何实现RC，RR?</strong></h5><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/73078137">https://zhuanlan.zhihu.com/p/73078137</a></p></blockquote><p><strong>作用如下</strong>：</p><ol><li>最简单的描述，<strong>读写不阻塞，读的时候可以写</strong></li><li>提高性能</li></ol><p><strong>实现RC，RR两个隔离级别</strong>：</p><blockquote><p>MVCC <strong>读</strong>某一个数据时，<strong>根据隔离级别</strong>，事务选择要读取哪个版本的数据，过程中完全不需要加锁。</p></blockquote><ol><li><p><strong>Read Committed</strong> ：一个事务读取数据时总是读这个数据<strong>最近一次被commit</strong>的版本 ，<strong>所以可以避免脏读（快手</strong>）；</p></li><li><p><strong>Repeatable Read</strong> ： 一个事务读取数据时总是读取当前【<strong>事务开始之前】最后一次被commit</strong>的版本（所以底层实现时需要比较当前事务和数据被commit的版本号），<strong>所以避免了幻读（快手</strong>）。</p></li></ol><p><strong>举个简单的例子</strong>：</p><ol><li><strong>一个事务A（txnId=100）修改了数据X，使得X=1，并且commit了</strong></li><li><strong>另外一个事务B（txnId=101）开始尝试读取X，但是还X=1。但B没有提交。</strong></li><li><strong>第三个事务C（txnId=102）修改了数据X，使得X=2。并且提交了</strong></li><li><strong>事务B又一次读取了X。这时</strong><ul><li><strong>如果事务B是Read Committed。那么就读取X的最新commit的版本，也就是X=2</strong></li><li><strong>如果事务B是Repeatable Read。那么读取的就是当前事务（txnId=101）之前X的最新版本，也就是X被txnId=100提交的版本，即X=1。</strong></li></ul></li></ol><p>注意，这里B不论是Read Committed，还是Repeatable Read，<strong>都不会被锁</strong>，都能立刻拿到结果。这也就是MVCC存在的意义。</p><h2 id="5-3-索引相关">5.3 索引相关</h2><blockquote><p>🛰 强烈建议对索引更深刻理解，先看完美团这篇技术文章：<a href="https://tech.meituan.com/2014/06/30/mysql-index.html">MySQL索引原理及慢查询优化</a></p></blockquote><h4 id="0-MySQL索引原理及慢查询优化">0. <a href="https://tech.meituan.com/2014/06/30/mysql-index.html">MySQL索引原理及慢查询优化</a></h4><h5 id="0-1-为什么要需要索引">0.1 为什么要需要索引</h5><blockquote><p>答到：遍历磁盘开销太大这个关键。</p></blockquote><p>数据库实现比较复杂，数据保存在<strong>磁盘</strong>上，而为了提高性能，每次又可以把<strong>部分读入内存</strong>来计算 。</p><p>磁盘的成本大概是访问内存的<strong>十万倍</strong>左右 ， 每次去遍历磁盘找到数据再读入内存，是难以接受的。因此需要一种快速找到磁盘数据的方式，就像字典通过<strong>字母索引→快速定位单词</strong>。因此索引由此而出现。</p><h5 id="0-2-局部性原理（磁盘IO一次读取大小）">0.2 局部性原理（磁盘IO一次读取大小）</h5><blockquote><p>在继续往下讲之前，先来讲讲磁盘读取局部性原理。</p></blockquote><p>局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与<strong>其相邻的数据也会很快被访问到</strong>。</p><ul><li>因此，当<strong>一次</strong>IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内。</li></ul><p>每次IO读取的数据，分为下面情况：</p><ul><li>Linux：上以<strong>页</strong>为单位，一次一页（<strong>4K</strong>）</li><li>数据库：mysql（InnoDB引擎）一页（<strong>16K</strong>）; SQL Server/ Oracle，默认<strong>块</strong>，大小都是<strong>8KB</strong></li></ul><h5 id="0-3-索引→B-树">0.3 索引→B+树</h5><p>相比二叉树，平衡树等，<strong>B+树</strong> 作为<strong>高度可控的多路搜索树</strong> ，可以很好的满足要求。（详细选择原因，可以参考：<u>5.3 索引相关–问答6</u>）</p><ul><li><p><strong>B+树基本结构</strong></p><p><img src="https://i.loli.net/2021/05/23/xXQFuqgEfpreHdG.jpg" alt="b+树"></p><p>浅蓝色是一个磁盘块，数据项就是被组织索引那<strong>列</strong>的字段值。</p><blockquote><p>如果是Innodb引擎，使用聚簇索引就是按照每张表的<strong>主键</strong> 构造索引，那么此时<strong>数据项就是主键值</strong>。</p></blockquote><ul><li><p>蓝色部分（如17,35）是数据项；黄色部分（如P1,P2,P3）是指针，指向<strong>下个磁盘块（页地址</strong>）。</p></li><li><p><strong>1. 为什么B+树非叶子节点不存放数据</strong>？</p><p>IO次数取决于b+数的高度h，每个磁盘块大小也是一定（一页）的。<strong>如果数据项占的空间越小，一个磁盘块数据项的数量越多，树的高度越低，B+可以更高阶（指针占用先忽略</strong>）。</p><p>所以磁盘<strong>非叶子</strong>节点不保存数据，是为了保存更多的数据项和指针，这样一颗B+树<strong>叶子</strong>节点就能存储更多的数据。</p></li><li><p><strong>2. 数据查找过程</strong>？</p><p>以查找<code>数据项=28</code> ，过程为例：<br>（1） 先 <u>加载（一般常驻内存）</u> 根页面1（磁盘块1），因为<code>17&lt;28&lt;35</code> 所以使用<code>P2</code>指针 ， 找到磁盘块3（页面3）<strong>地址</strong></p><p>（2）在 <u>IO加载</u> 磁盘块3，因为 <code>26&lt;28&lt;30</code>  ，因此根据此时的<code>P2</code> 指针，找到磁盘块8所在的地址</p><p>（3） <u>IO加载</u> 磁盘块8，因为此时是叶子节点，可以得到<code>数据项=28</code>对应的<strong>那行记录</strong> 。</p><p>仅仅最多<strong>3</strong>次磁盘IO就找到了数据，这提升是巨大的。</p></li><li><p><strong>3. 高度为3的B+数可以存储多少数据</strong>？</p><ul><li><p><strong>叶子节点一页存储的记录数</strong></p><p>mysql一页16K，所以一页存储<code>16K/1K = 16条</code> 记录。（实际真实业务场景一条记录一般就是1K）</p></li><li><p><strong>非叶子节点一页存储的指针数</strong></p><p>由于数据项也要占用空间，其和指针只相差1，按<strong>成对</strong>算。</p><p>假设主键ID（数据项）为bigint类型，长度为<code>8</code>字节，而<code>指针大小</code>在InnoDB源码中设置为<code>6字节</code> 。那么一共<code>14</code>字节。</p><p>所以一页可以存储：<code>16K / 14B ≈ 1K</code> 个指向页面的指针。</p></li><li><p><strong>计算可以存储多少页</strong></p><p>高度为3的B+树，第3层叶子节点存储真实<strong>数据页</strong>，前2层是存储<strong>数据项+指针</strong>。<strong>第二层指针</strong>==叶子节点存储的页面数。</p><ol><li>第一层：根页面可以存储1K个指针，每个指针指向一个新的页面</li><li>第二层：存储 <code>1K*1K = 1M</code> ，约一百万个指针，指向一百万个叶子数据页面</li></ol><p>所以一共存储：<code>1M*16≈16M</code> ，即千万级别的数据。</p></li></ul></li></ul></li></ul><h5 id="0-4-慢查询优化">0.4 慢查询优化</h5><p>（暂略）</p><h4 id="1-MySQ索引的原理和数据结构能介绍一下吗？索引的缺点？">1. <strong>MySQ索引的原理和数据结构能介绍一下吗</strong>？<strong>索引的缺点</strong>？</h4><ul><li><p><strong>索引原理</strong>： 本质是用来优化查询速度。<u>用一个数据结构组织某一列的数据</u>，然后如果你要根据那一列的数据查询的时候，就可以<u>不用全表扫描</u>，只要根据那个特定的数据结构快速去找到那一列的值。</p></li><li><p><strong>数据结构</strong>： MySQL索引通过B+树来实现（按数据结构分也有hash索引、fulltext索引）。</p></li><li><p><strong>索引缺点</strong>： （1）占用磁盘存储空间 （2）降低表更新速度，表发生变化，索引也要发生变化</p></li></ul><h4 id="2-MySQL-索引类型有哪些？">2. <strong>MySQL 索引类型有哪些</strong>？</h4><p>按数据结构分类可分为：<strong>B+tree索引、Hash索引、Full-text索引</strong>。<br>按物理存储分类可分为：<strong>聚簇索引、二级索引（辅助索引</strong>）。<br>按字段特性分类可分为：<strong>主键索引、普通索引、前缀索引</strong>。<br>按字段个数分类可分为：<strong>单列索引、联合索引（复合索引、组合索引</strong>）。</p><ul><li><p><strong>主键索引</strong>：索引列中的值必须是唯一的，不允许有空值；</p></li><li><p><strong>唯一索引</strong>：索引列中的值必须是唯一的，但是允许为空值；</p></li><li><p><strong>普通索引</strong>：MySQL中<u>基本索引类型</u>，没有什么限制，允许在定义索引的列中插入重复值和空值；</p></li><li><p><strong>全文索引</strong>：只能在<strong>文本类型CHAR,VARCHAR,TEXT</strong>类型字段上创建全文索引；</p><blockquote><p>字段长度比较大时，如果创建普通索引，在进行like模糊查询时效率比较低，这时可以创建全文索引；</p><p>MyISAM和InnoDB中都可以使用全文索引。</p></blockquote></li><li><p><strong>前缀索引</strong>：在文本类型如CHAR,VARCHAR,TEXT类列上创建索引时，可以指定索引列的长度，但是数值类型不能指定；</p></li><li><p><strong>空间索引</strong>： MySQL在5.7之后的版本支持了空间索引，而且支持OpenGIS几何数据模型。</p><blockquote><p>MySQL在空间索引这方面遵循OpenGIS几何数据模型规则。</p></blockquote></li></ul><h5 id="2-1-什么是覆盖索引？">2.1 什么是覆盖索引？</h5><p>我们在<u>非聚簇索</u>引一般只获得了，记录的key值（Innodb引擎），还需要回到聚簇索引中<strong>再次查询</strong>。</p><ul><li><strong>覆盖索引</strong>： 从<strong>非主键索引中就能查到的记录</strong>，而不需要查询主键索引中的记录，避免了回表的产生减少了树的搜索次数，显著提升性能。</li></ul><blockquote><p>一个小例子。</p></blockquote><p>以name和age两个字段建立<strong>联合索引</strong>，sql命令与建立后的索引树结构如下：</p><img src="https://i.loli.net/2021/05/28/V2ApYvt9zWGFhcf.png" alt="image-20210526230732546" style="zoom:80%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student DROP INDEX I_name;</span><br><span class="line">ALTER TABLE student ADD INDEX I_name_age(name, age);</span><br></pre></td></tr></table></figure><p>此时执行如下sql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT age FROM student WHERE name = &#x27;小李&#x27;；</span><br></pre></td></tr></table></figure><p>在<strong>非聚簇索引中包含了age信息</strong>，那么直接返回12，不需要再到聚簇索引中查询。</p><h4 id="【重点】3-什么时候使用索引比较好？什么时候不要使用索引？">【重点】3.<strong>什么时候使用索引比较好</strong>？什么时候不要使用索引？</h4><h5 id="3-1-什么时候用索引">3.1 什么时候用索引</h5><blockquote><p>特别的，主键自动建立唯一索引。</p></blockquote><ol><li><p><strong>频繁</strong>作为查询条件的字段应该创建索引 ；</p></li><li><p><strong>查询中与其他表关联的字段</strong>，外键关系建立索引；</p></li><li><p><strong>查询中排序的字段</strong>，排序字段若通过索引去访问将大大提高排序速度（<strong>索引就是排序加快速查找</strong>）；</p></li><li><p><strong>查询中统计或者分组字段</strong>。</p></li></ol><h5 id="3-2-什么时候不用索引">3.2 什么时候不用索引</h5><ol><li><p><strong>经常增删改</strong>的列不要建立索引（因为每次更新不单单是更新记录，还会更新索引，保存索引文件）；</p></li><li><p><strong>表记录太少</strong>不要建立索引；</p></li><li><p>（<strong>被CSIG问过</strong>）区分度低，数据重复且分布平均的字段不适合做索引；</p><blockquote><p>例如性别字段，只有男女，不适合建立索引。</p><ul><li>因为从索引中拿到的只是地址，要想真正访问到数据还是要对表进行一次IO；</li><li>假如你要从表的100万行数据中取几个数据，那么利用索引迅速定位，访问索引的这IO开销就非常值了；</li><li>但如果你是从100万行数据中取50万行数据，就比如性别字段，那你相对需要 <u>访问50万次索引，再访问50万次表</u>，加起来的开销并不会比直接对表进行一次完整扫描小。</li></ul></blockquote></li><li><p><strong>text，image</strong>等类型不应该建立索引，<strong>这些列的数据量大</strong>；</p></li><li><p><strong>多个单列索引并不是最佳选择</strong> MySQL 只能使用一个索引，会从多个索引中选择一个限制最为严格的索引 ；</p></li><li><p><strong>参加运算 或 作为函数参值等字段</strong>，不要建立索引，这会使得索引失效而全表扫描 。</p></li></ol><h4 id="4-主键与唯一索引有什么区别？">4.<strong>主键与唯一索引有什么区别</strong>？</h4><ul><li><p>主键一<strong>定会创建一个唯一索引，但是有唯一索引的列不一定是主键；</strong></p></li><li><p>主键不允许为空值，唯一索引列允许空值；</p></li><li><p>一个表只能有一个主键，但是可以有多个唯一索引；</p></li><li><p>主键可以被<strong>其他表引用为外键，唯一索引列不可以；</strong></p></li><li><p>主键是一种约束，而唯一索引是一种索引，是表的冗余数据结构，两者有本质差别。</p></li></ul><h4 id="5-b-树和b树有什么区别？">5. <strong>b+树和b树有什么区别</strong>？</h4><p>B树：</p><p><img src="https://i.loli.net/2021/04/21/YsAxSctJ1wKUm3g.png" alt="clip_image002"></p><ul><li>索引与数据存储在每个节点中（增加了IO次数）；</li><li>搜索过程有可能在非叶子节点结束（最好情况下<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>）。</li></ul><p>B+树：</p><p><img src="https://i.loli.net/2021/04/21/ihT3SbqwodNUvPe.png" alt="clip_image039"></p><ul><li>所有数据<strong>按顺序</strong>存储在叶子节点中；</li><li>所有叶子节点被<strong>双向链连接</strong>；</li><li>搜索过程固定时间复杂度（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>）；</li><li>（优点易忘）<u>适合范围查找，降低磁盘IO次数</u>。</li></ul><h4 id="6-为什么MySQL使用B-树作为索引？而不是平衡二叉树、红黑树、B树、或者Hash？">6.<strong>为什么MySQL使用B+树作为索引？而不是平衡二叉树、红黑树、B树、或者Hash？</strong></h4><ul><li><p><strong>不用平衡二叉树或者红黑树</strong>： 树的查询时间和树的结构有关，B+树是一颗多路搜索数，可以降低树的高度提高查询速度。</p></li><li><p><strong>不用B树</strong>： （1）无法范围查询，而<strong>B+树所有叶子节点形成有序链表便于范围查询</strong>；（2）N阶B+数，B树，B+数可以存储n个关键字，而B树是n个。</p></li><li><p><strong>不用Hash：</strong> （1）B+树允许分配加载节点，如果内存数据太大B+树更好（2）B+树更适合范围查询</p><blockquote><p>用Hash需要把数据全部<strong>加载到内存中</strong>，如果数据量大，是一件很<strong>消耗内存</strong>的事，而采用B+树，是基于<strong>按照节点分段加载，由此减少内存消耗</strong>。</p></blockquote></li></ul><h5 id="6-1-无限增加树的路数是不是可以有最优的查找效率？">6.1 <strong>无限增加树的路数是不是可以有最优的查找效率</strong>？</h5><ul><li><p>这样会形成一个有序数组，文件系统和数据库的索引都是存在硬盘上的，并且如果数据量大的话，<u>不一定能一次性加载到内存中</u>。</p></li><li><p><strong>有序数组没法一次性加载进内存</strong>，这时候B+树的多路存储威力就出来了，<strong>可以每次加载B+树的一个结点，然后一步步往下找</strong>。</p></li></ul><h4 id="7-B-树怎么进行分裂、合并的？知道具体步骤吗？">7. <strong>B+树怎么进行分裂、合并的？知道具体步骤吗</strong>？</h4><blockquote><p>参考：<a href="https://www.cnblogs.com/nullzx/p/8729425.htm">https://www.cnblogs.com/nullzx/p/8729425.htm</a></p></blockquote><p><img src="https://i.loli.net/2021/04/21/aejwRD2WxNb7slY.png" alt="image-20210421124006795"></p><h4 id="8-MySQL聚簇索引和非聚簇索引的区别是什么？">8. <strong>MySQL聚簇索引和非聚簇索引的区别是什么</strong>？</h4><ul><li><p><strong>主要区别</strong></p><ul><li><p><strong>聚簇索引</strong> ： 找到索引就找到了需要的数据，那么这个索引就是聚簇索引;</p><blockquote><p>所以Innodb主键就是<strong>聚簇索引</strong>，修改聚簇索引其实就是修改主键；但在<u>Myisam下主键索引是非聚集索引</u>。</p><p>InnoDB 会<strong>隐式定义一个主键</strong>来作为聚簇索引（但是这个主键如果更改代价较高，<u>故建表时要考虑自增ID不能频繁update</u>这点）。</p></blockquote><p><img src="https://i.loli.net/2021/05/03/mzwGgCjxuIpaeA7.png" alt="img"></p></li><li><p><strong>非聚簇索引</strong>：索引的存储和数据的存储是分离的 , 找到了索引但没找到数据，需要根<u>据<strong>索引上的值(主键/地址)再次回表查询</strong></u>，<strong>也叫做辅助索引</strong>。</p><blockquote><p>MyISM使用的是非聚簇索引 ，下图叶节点的<strong>data域存放的是数据记录的地址</strong> 。</p></blockquote><p><img src="https://i.loli.net/2021/05/03/A1X5aOY6qkuEol9.png" alt="img"></p></li></ul></li><li><p><strong>聚簇索引查找过程</strong></p><blockquote><p>首先澄清一个概念，聚簇索引和和辅助索引。</p><p>Innodb存储引擎的B+树分为，聚簇索引保存的是放着一整行的数据；辅助索引都引用<u>主键作为data域</u>。</p><p>例如，下图以Col3建立一个<strong>Innodb辅助索引</strong> ：</p><p><img src="https://i.loli.net/2021/05/03/l1IHbpgGAYr73sT.png" alt="img"></p><p>对于MyISAM，主索引和辅助索引（Secondary key）在结构上没有任何区别。<strong>只是主索引要求key是唯一的，而辅助索引的key可以重复</strong>。</p><p>例如，下图以Col2建立一个<strong>MyISAM的辅助索引</strong>：</p><p><img src="https://i.loli.net/2021/05/03/9jpKvRbIWFwucLT.png" alt="img"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * Where name=‘Alice’</span><br></pre></td></tr></table></figure><p>首先根据<u>辅助索引</u> ，在叶子节点找到<strong>0X56对应主键值</strong><code>18</code> ；然后在<u>聚簇索引</u>，根据<code>18</code> 找到对应行数据。</p></li></ul><h5 id="8-1-看上去聚簇索引的效率明显要低于非聚簇索引，因为每次使用辅助索引检索都要经过两次B-树查找，这不是多此一举吗？聚簇索引的优势在哪？">8.1 <strong>看上去聚簇索引的效率明显要低于非聚簇索引，因为每次使用辅助索引检索都要经过两次B+树查找，这不是多此一举吗？聚簇索引的优势在哪</strong>？</h5><ul><li><p><strong>重复访问同一页更快</strong>：由于行数据和叶子节点存储在一起，同一页中会有多条行数据，访问同一数据页不同行记录时，<strong>已经把页加载到了Buffer中</strong>，<strong>再次访问的时候，会在内存中完成访问</strong>，不必访问磁盘；</p><blockquote><p>B+树的每个节点的数量都是一个mysql分区页的大小(阿里面试) 。</p></blockquote></li><li><p><strong>辅助索引使用主键值作为指针</strong>： 辅助索引使用主键作为&quot;指针&quot;而不是使用地址值作为指针（MyISAM） ，<strong>减少了当出现【行移动】或者数据页分裂时（<u>地址值变化</u>）辅助索引的维护工作</strong> 。</p></li></ul><h5 id="8-2-为什么name-age这些字段不适合做索引？">8.2 为什么name,age这些字段不适合做索引？</h5><p>在InnoDB中每一个表都会有聚集索引，如果表定义了主键，则（默认）主键就是聚簇索引。</p><p>一个表只有一个聚集索引，其余为普通索引。所以name，age就是普通索引，也就是作为辅助索引。</p><p>在使用普通索引name查询时，会先加载普通索引：</p><p>（1）通过普通索引查询到实际行的主键</p><p>（2）再使用主键通过聚集索引查询相应的行</p><p>（3）以此<strong>循环查询所有的行</strong><br>若直接全量搜索聚集索引，则不需要在普通索引和聚集索引中来回切换。相比两种操作的总开销可能扫描全表效率更高。</p><h4 id="9-MySQL联合索引如何使用？什么是最左匹配原则？">9. <strong>MySQL联合索引如何使用</strong>？<strong>什么是最左匹配原则</strong>？</h4><blockquote><p>参考：<a href="https://blog.csdn.net/Abysscarry/article/details/80792876">https://blog.csdn.net/Abysscarry/article/details/80792876</a></p></blockquote><p>对多个字段同时建立的索引(有顺序，ABC，ACB是完全不同的两种联合索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `test` (</span><br><span class="line">  `id` int(4) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `a` varchar(10) NOT NULL,</span><br><span class="line">  `b` varchar(10) NOT NULL,</span><br><span class="line">  `c` varchar(10) NOT NULL,</span><br><span class="line">  `d` varchar(10) NOT NULL,</span><br><span class="line">  `e` varchar(10) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  # 联合索引(a,b,c)</span><br><span class="line">  UNIQUE KEY `idx_a_b_c` (`a`,`b`,`c`) USING BTREE </span><br><span class="line">) ENGINE=I</span><br></pre></td></tr></table></figure><p>以联合索引(a,b,c)为例：</p><ul><li><p><strong>建立这样的索引相当于建立了索引a、ab、abc三个索引</strong>。一个索引顶三个索引当然是好事，毕竟每多一个索引，都会增加写操作的开销和磁盘空间的开销。</p><blockquote><p><strong>a,c</strong>组合也可以但不是为他建立了索引，但实际上只用到了a的索引，c并没有用到！</p></blockquote></li><li><p><strong>最左匹配原则</strong></p><p>最左优先，在检索数据时从联合索引的最左边开始匹配，<strong>即是where条件必须有联合索引的第一个字段。</strong></p><ul><li><p>不包含第一个字段</p><p>不会走索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  * from test where  b = &#x27;333&#x27; and c = &#x27;333&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>where和索引顺序不一样</p><p>会走索引，<u>和顺序无关</u>。</p><blockquote><p>where 后面列的顺序是被<strong>优化器</strong>优化了的，所以才会觉得无影响，你可以查看一下优化器优化后的语句，会帮你调整为满足最左前缀的顺序。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  * from test where c = &#x27;333&#x27; and b = &#x27;333&#x27; and a = &#x27;333&#x27;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="9-1-联合索引的好处？">9.1 联合索引的好处？</h5><h4 id="10-（还要补充）介绍一下索引失效的原因？">10. （还要补充）介绍一下索引失效的原因？</h4><blockquote><p>很不错的一篇文章：<a href="https://cloud.tencent.com/developer/article/1704743">索引失效原理，终于有人讲明白了</a></p><p>结合这篇文章：<a href="https://juejin.cn/post/6844904073955639304">https://juejin.cn/post/6844904073955639304</a></p></blockquote><p>假设mysql 存在联合索引（a,b），显然也是一颗B+树:</p><p><img src="https://i.loli.net/2021/05/24/GlDckpZzWTnodIf.png" alt="image-20210524114029113"></p><ul><li><p><strong>不符合最左匹配失效</strong></p><ol><li><p>情况1 ：<code>select * from testTable where b=2</code></p><p>联合索引是通过第一个索引<code>a</code> 来构建B+树，进行定位二分查找的，不能直接通过<code>b</code> 来进行二分查找。</p></li><li><p>情况2：<code>like</code>查询失效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">where name like &quot;a%&quot;  # 会有效，因为可以匹配到首字母</span><br><span class="line"></span><br><span class="line">where name like &quot;%a%&quot; # 首字母是任意匹配的，所以索引用不上</span><br><span class="line"></span><br><span class="line">where name like &quot;%a&quot; # 同上，不能根据尾字母来索引</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>范围查询失效</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from testTable where a&gt;1 and b=2</span><br></pre></td></tr></table></figure><p>首先<strong>a字段在B+树上是有序</strong>的，所以可以用二分查找法定位到1，然后将所有大于1的数据取出来，a可以用到索引。</p><p><strong>b有序的前提是a是确定的值</strong>，那么现在a的值是取大于1的，可能有10个大于1的a，也可能有一百个a。</p><p>大于1的a那部分的B+树里，b字段是无序的（开局一张图），所以b不能在无序的B+树里用二分查找来查询，b用不到索引。</p></li><li><p><strong>多个单列索引</strong></p><p>我们首先建立了三个单列索引：userid，mobile，billMonth。然后使用以下查询语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM `t_mobilesms_11` WHERE  userid=&#x27;2222&#x27; AND mobile=&#x27;13281899972&#x27; AND billMonth=&#x27;2018-04&#x27;</span><br></pre></td></tr></table></figure><ul><li><p><code>explain</code> 结果分析，最终只有<code>userid</code> 这<strong>一个索引有效</strong>。</p><blockquote><p>此处<code>userid 、mobile 、billMonth</code>这三个索引列都能用，只不过<strong>优化器判断使用<code>userid</code>这一个索引能最高效完成本次查询</strong>，故最终explain展示的key为userid。</p></blockquote></li></ul><p>特别的，如果改为 <code>or</code> 进行判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM `t_mobilesms_11` WHERE  userid=&#x27;2222&#x27; OR mobile=&#x27;13281899972&#x27; </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/24/UDQxsm7YIrglvu8.png" alt="这里写图片描述"></p><ul><li><p><strong>此时两个索引 userid &amp; mobile都用上了</strong>。</p><blockquote><p>mysql <u>5.0 版本之前</u> 使用or<strong>只会用到一个索引</strong>, 自从<u>5.0版本开始</u> ，引入了index_merge索引合并优化！也就是说，我们现在可以利用上多个索引去优化or查询了。</p></blockquote></li></ul></li><li><p><strong>或者索引加上了运算</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t where c - 1 = 1000;</span><br></pre></td></tr></table></figure><p>这种情况不会有效，应该是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t where c = 1000 + 1;</span><br></pre></td></tr></table></figure><p>又比如用了函数操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t where pow(c,2) = 1000;</span><br></pre></td></tr></table></figure></li></ul><h4 id="11-【⚠️-新增】索引实战篇">11. 【⚠️ 新增】索引实战篇</h4><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/115778804">https://zhuanlan.zhihu.com/p/115778804</a></p></blockquote><ol><li><p><code>where a=xxx and b=xxx order by c</code>  ，如何建立索引？</p><p>建立联合索引<code>（a,b,c）</code> ，因为这样的话<strong>无需做一次额外的排序操作</strong>。</p><p>因为建立联合索引时，根据最左匹配原则，先按<code>a</code>排序，再按<code>b</code>排序，最后按<code>c</code> 排序。根据联合索引检索到，<code>a=xxx and b=xxx</code>条件时，再去检索<code>c</code>本身已排序的。那么不用 <code>order by c</code> ，不用进行文件排序。</p><ul><li>注意，建立联合索引 <code>（a,b）</code> , 则是走不到 sort的！</li></ul></li><li><p><code>where a=xxx  order by b,c</code>  ，如何建立索引？</p><p>道理同上，建立<code>（a,b,c）</code> 。</p></li><li><p><code>where a &gt; 1 ORDER BY b</code>，怎么建立索引？</p><p>建立索引（a）即可，因为a是范围查询：</p><ul><li>建立（a,b）的 话b也用不上，因为是a是范围查询；</li><li>建立（b,a）, <strong>b按索引排好序，a&gt;1可以用上？错误，因为先where筛选才会order by！</strong></li></ul></li><li><p><code>where a=1 and b=2 and c&gt;3 and d=4</code> ，如何建立索引？</p><p>建立联合索引，<code>(a,b,d,c)</code>  即可。</p><ul><li>但是对于建立<code>(a,b,c,d)</code> ，<strong>a,b,c三个字段能用到索引，而d就匹配不到</strong>，因为遇到了<strong>范围查询，在c&gt;3这个范围内，d不是有序的；但是c=3，这个范围内，d是有序的</strong>！</li></ul></li><li><p><code>where a &gt; 1 and b = 2 and c &gt; 3</code>，如何建立索引？</p><p>建立（b,c）或者（b,a）即可，但至少有一个索引要失效（遇上范围查询）。</p></li><li><p><code>WHERE a IN (1,2,3) and b &gt; 1</code>，怎么建立索引？</p><p>还是对(a，b)建立索引，因为IN在这里可以视为等值引用，不会中止索引匹配，所以还是(a,b)！</p></li></ol><h5 id="11-1-有个字段值可能正，可能负，查询该字段要绝对值，但计算会导致索引失效，怎么优化？">11.1 <strong>有个字段值可能正，可能负，查询该字段要绝对值，但计算会导致索引失效，怎么优化</strong>？</h5><ol><li>拆成两列1列只存绝对值，另起一列tinyint来表示正负或者方向；</li><li>先查询到结果，然后再查询的结果上进行操作（取绝对值）？</li></ol><h4 id="12-order-by-怎么进行排序的？怎么优化？">12. order by 怎么进行排序的？怎么优化？</h4><blockquote><p>参考：<a href="https://segmentfault.com/a/1190000040357292">https://segmentfault.com/a/1190000040357292</a></p></blockquote><p>假设存在以下数据：</p><p><img src="https://i.loli.net/2021/09/04/cudfwqEHGmn3Ppt.png" alt="image-20210904013336980"></p><p>此时进行如下查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select city, order_num, user_code from `order` where city=&#x27;广州&#x27; order by order_num limit 1000;</span><br></pre></td></tr></table></figure><ol><li><p><strong>建立索引(city)：order by过程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `order` ADD INDEX city_index ( `city` );</span><br></pre></td></tr></table></figure><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20210904013506155.png" alt="image-20210904013506155" style="zoom:80%;" /><ul><li><p><strong>用 explain 看看执行情况</strong></p><p><img src="https://i.loli.net/2021/09/04/lv3uyaxWkKPtqjd.png" alt="img"></p><p>注意到最后一个 extra 字段的结果是：<strong>Using filesort</strong>，表示需要排序。<strong>其实 MySQL 会给每个线程分配一块内存用于排序，称为 sort_buffer</strong>。</p></li><li><p><strong>完整执行过程</strong></p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/Pm7eJ1vQFg8l2xA.png" alt="image-20210904013732363" style="zoom:80%;" /><ol><li><p>初始化 <strong>sort_buffer</strong>，放入 <code>city、order_num、user_code</code> 这三个字段；</p></li><li><p>从索引 city 找到第一个满足 city=’ 广州’条件的主键 id，也就是图中的 ID_3；</p></li><li><p><strong>到主键 id 索引取出整行</strong>，取 city、order_num、user_code 三个字段的值，存入 sort_buffer 中；</p></li><li><p>从索引 city 取下一个记录的主键 id；</p></li><li><p>重复步骤 3、4 直到 city 的值不满足查询条件为止，对应的主键 id 也就是图中的 ID_X；</p></li><li><p>对 sort_buffer 中的数据按照字段 <strong>order_num 做快速排序</strong>；</p><blockquote><p>其中，<strong>按 order_num 排序</strong>这个步骤，可能在内存中完成，也可能需要使用外部排序，这取决于排序所需的内存和参数 <strong>sort_buffer_size</strong>。</p></blockquote></li><li><p>按照排序结果取前 1000 行返回给客户端。</p></li></ol></li></ul></li><li><p><strong>优化1：使用rowid</strong></p><p>上面的全字段排序其实会有很大的问题，你可能发现了。<strong>我们需要查询的字段都要放到 sort_buffer 中，如果查询的字段多了起来，内存占用升高，就会很容易打满 sort_buffer</strong> 。</p><ul><li><p><strong>sort_buffer 只存 order_num 和 id 字段</strong>。</p><img src="https://i.loli.net/2021/09/04/PRwrO4ae3BJLciH.png" alt="img" style="zoom:80%;" /><ol><li>初始化 sort_buffer，确定放入两个字段，即 order_num 和 id；</li><li>从索引 city 找到第一个满足 city=’ 广州’条件的主键 id，也就是图中的 ID_3；</li><li><strong>回表</strong>，取 order_num、id 这两个字段，存入 sort_buffer 中；</li><li>从索引 city 取下一个记录的主键 id；</li><li>重复步骤 3、4 直到不满足 city=’ 广州’条件为止，也就是图中的 ID_X；</li><li>对 sort_buffer 中的数据按照字段 order_num 进行排序；</li><li>遍历排序结果，取前 1000 行，再次回表取出 city、order_num 和 user_code 三个字段返回给客户端。</li></ol></li></ul></li><li><p><strong>优化2：建立联合索引</strong></p><p>参见索引部分解释，不再赘述。</p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1460000040357304" alt="img" style="zoom:80%;" /><ol><li><p>从索引 (city,order_num) 找到第一个满足 city=’ 广州’条件的主键 id；</p></li><li><p>回表，取 city、order_num、user_code 三个字段的值，作为结果集的一部分直接返回；</p></li><li><p>从索引 (city,order_num) 取下一个记录主键 id；</p></li><li><p>重复步骤 2、3，直到查到第 1000 条记录，或者是不满足 city=’ 广州’条件时循环结束。</p></li></ol></li></ol><h2 id="5-3-事务相关">5.3 事务相关</h2><h4 id="1-请介绍一下数据库事务？和-u-事务特性-u-（ACID）？">1.<strong>请介绍一下数据库事务？和<u>事务特性</u>（ACID）</strong>？</h4><ul><li><p><strong>数据库事务</strong>： 数据库事务指的是一组数据操作，事务内的操作要么就是全部成功，要么就是全部失败。</p><blockquote><p><em>e.g.</em>  假设一个网购付款的操作，用户付款后要涉及到订单状态更新、扣库存以及其他一系列动作，这就是一个事务，如果一切正常那就相安无事，一旦中间有某个环节异常，那整个事务就要回滚，总不能更新了订单状态但是不扣库存吧。</p></blockquote></li><li><p><strong>事务特性</strong>：（1） 原子性（Atomicity）：一个事务必须视为一个不可分割的最小工作单元，要么都成功要么都失败（2）一致性（Consistency）：数据库总能从一个<strong>一致性的状态转换到另一个一致性的状态</strong>（3）隔离性（Isolation）：一个事务所做的修改在最终提交以前，对其他事务是不可见的（4）持久性（Durability）：一旦事务提交，则其所做的修改就会永久保存到数据库中</p></li></ul><h5 id="1-1-四大特性得不到保障会出现什么情况？">1.1 四大特性得不到保障会出现什么情况？</h5><blockquote><p>们以从A账户转账50元到B账户为例进行说明一下ACID这四大特性。</p></blockquote><ul><li><p><strong>原子性</strong> : 原子性是指一个事务是一个不可分割的工作单位，<strong>其中的操作要么都做，要么都不做</strong>。即要么转账成功，要么转账失败，是不存在中间的状态。</p><blockquote><p><strong>如果无法保证原子性会怎么样</strong>？</p></blockquote><p>会出现数据不一致的情形，A账户减去50元，而B账户增加50元操作失败。系统将无故丢失50元~</p></li><li><p><strong>一致性</strong> ：一致性是指事务执行前后，数据处于一种合法的状态，这种状态是语义上的而不是语法上的。 那什么是合法的数据状态呢？这个状态是满足预定的约束就叫做合法的状态，再通俗一点，这状态是由你自己来定义的。<strong>满足这个状态，数据就是一致的，不满足这个状态，数据就是不一致的。</strong></p><blockquote><p><strong>如果无法保证一致性会怎么样</strong>？</p></blockquote><ul><li><p>例一: A账户有200元，转账300元出去，此时A账户余额为-100元。</p><p>你自然就发现了此时数据是不一致的，为什么呢？因为你定义了一个状态，<strong>余额这列必须大于0</strong>。</p></li><li><p>例二：A账户200元，转账50元给B账户，A账户的钱扣了，但是B账户因为各种意外，余额并没有增加。</p><p>你也知道此时数据是不一致的，为什么呢？因为你定义了一个状态，<strong>要求A+B的余额必须不变</strong>。</p></li></ul></li><li><p><strong>隔离性</strong> ：隔离性是指<strong>多个事务并发执行的时候，事务内部的操作与其他事务是隔离的</strong>，并发执行的各个事务之间不能互相干扰。</p><blockquote><p><strong>如果无法保证隔离性会怎么样</strong>？</p></blockquote><p>假设A账户有200元，B账户0元。A账户往B账户转账两次，金额为50元，分别在两个事务中执行。</p><p>如果无法保证隔离性，A可能就会出现扣款两次的情形，而B只加款一次，凭空消失了50元，依然出现了数据不一致的情形！</p></li><li><p><strong>持久性</strong> : 根据定义，<strong>持久性是指事务一旦提交，它对数据库的改变就应该是永久性的</strong>。接下来的其他操作或故障不应该对其有任何影响。</p><blockquote><p><strong>如果无法保证持久性会怎么样</strong>？</p></blockquote><p>在MySQL中，为了解决CPU和磁盘速度不一致问题，MySQL是将磁盘上的数据加载到内存，对内存进行操作，然后再回写磁盘。好，假设此时宕机了，在内存中修改的数据全部丢失了，持久性就无法保证。</p><p>设想一下，系统提示你转账成功。但是你发现金额没有发生任何改变，此时数据出现了不合法的数据状态，我们将这种状态认为是<strong>数据不一致</strong>的情形。</p></li></ul><h5 id="1-2-数据库如何保证四大特性（如何实现事务）？">1.2 数据库如何保证四大特性（如何实现事务）？</h5><p>数据库事务的 ACID 四大特性是事务的基础，了解了 ACID 是如何实现的，我们也就清楚了事务的实现，接下来我们将依次介绍数据库是如何实现这四个特性的。</p><ul><li><p><strong>保证原子性</strong></p><p>主要是利用Innodb的<strong>undo log</strong>。</p><p>undo log名为回滚日志，是实现原子性的关键，当<strong>事务回滚时能够撤销所有已经成功执行的sql语句</strong>，他需要记录你要回滚的相应日志信息。</p><p>例如</p><ul><li>(1)当你delete一条数据的时候，就需要记录这条数据的信息，回滚的时候，insert这条旧数据</li><li>(2)当你update一条数据的时候，就需要记录之前的旧值，回滚的时候，根据旧值执行update操作</li><li>(3)当年insert一条数据的时候，就需要这条记录的主键，回滚的时候，根据主键执行delete操</li></ul><p>undo log记录了这些回滚需要的信息，当事务执行失败或调用了rollback，导致事务需要回滚，便可以利用undo log中的信息将数据回滚到修改之前的样子。</p></li><li><p><strong>保证一致性</strong></p><p>数据库对于 ACID 中的一致性的定义是这样的：<strong>如果一个事务原子地在一个一致地数据库中独立运行，那么在它执行之后，数据库的状态一定是一致的</strong>。</p><ul><li>它的第一层意思就是对<strong>于数据完整性的约束</strong>，包括主键约束、引用约束以及一些约束检查等等，在事务的执行的前后以及过程中不会违背对数据完整性的约束，所有对数据库写入的操作都应该是合法的，并不能产生不合法的数据状态。</li><li>第二层意思其实是指逻辑上的对<strong>于开发者的要求</strong>，我们要在代码中写出正确的事务逻辑，比如银行转账，事务中的逻辑不可能只扣钱或者只加钱，这是应用层面上对于数据库一致性的要求。</li></ul></li><li><p><strong>保证隔离性</strong></p><p>在 SQL 标准中定义了四种数据库的事务的隔离级别：<code>READ UNCOMMITED</code>、<code>READ COMMITED</code>、<code>REPEATABLE READ</code> 和 <code>SERIALIZABLE</code>；</p><p>数据库对于隔离级别的实现就是使用<strong>并发控制机制</strong>对在同一时间执行的事务进行控制：</p><ol><li><p><strong>锁</strong>： MySQL 和常见数据库中的锁都分为两种，共享锁（Shared）和互斥锁（Exclusive），前者也叫读锁，后者叫写锁。</p></li><li><p><strong>mvcc实现</strong>：实现RC和RR。</p></li></ol></li><li><p><strong>保证持久性</strong></p><p>利用Innodb的<strong>redo log</strong>，为什么要使用redo log，请看下面：</p><ul><li>正如之前说的，Mysql是把磁盘上的数据<strong>先加载到内存</strong>中，在内存中对数据进行修改，再刷回磁盘上。<strong>如果此时突然宕机，内存中的数据就会丢失；</strong></li><li><strong>如果事务提交前直接把数据写入磁盘，只修改一个页面里的一个字节，就要将整个页面刷入磁盘，太浪费资源了</strong>。</li></ul><p><strong>redo log解决方案</strong>：</p><ul><li>当做数据修改的时候，<strong>不仅在内存中操作，还会在redo log中记录这次操作</strong>；</li><li>当事务提交的时候，<strong>会将redo log日志进行刷盘</strong>(redo log一部分在内存中，一部分在磁盘上)；</li><li><strong>当数据库宕机重启</strong>的时候，会将redo log中的内容恢复到数据库中，<strong>再根据undo log和binlog内容决定回滚数据</strong>还是提交数据。</li></ul></li></ul><h5 id="1-3-binlog日志是做什么的？">1.3 binlog日志是做什么的？</h5><blockquote><p>参考：<a href="https://www.cnblogs.com/kevingrace/p/5907254.html">https://www.cnblogs.com/kevingrace/p/5907254.html</a></p></blockquote><p>MySQL的二进制日志binlog可以说是MySQL最重要的日志，<strong>它记录了所有的DDL和DML语句（除了数据查询语句select）</strong>，以事件形式记录，还包含语句所执行的消耗的时间，MySQL的二进制日志是事务安全型的。</p><blockquote><p>DDL ，即 Data Definition Language 数据库定义语言。</p><ul><li>主要的命令有CREATE、ALTER、DROP等，DDL主要是用在定义或改变表（TABLE）的结构，数据类型，表之间的链接和约束等初始化工作上，他们大多在建立表时使用。</li></ul><p>DML，即Data Manipulation Language 数据操纵语言。</p><ul><li>主要的命令是SELECT、UPDATE、INSERT、DELETE，就象它的名字一样，这4条命令是用来对数据库里的数据进行操作的语言。</li></ul></blockquote><p>binlog日志有两个最重要的使用场景：</p><ol><li><strong>MySQL主从复制</strong>：MySQL Replication在Master端开启binlog，Master把它的二进制日志传递给slaves来达到<br>master-slave数据一致的目的。</li><li><strong>自然就是数据恢复了</strong>，通过使用mysqlbinlog工具来使恢复数据。</li></ol><h4 id="2-介绍一下（并发）事务不同隔离级别？对应可能出现的问题？">2.<strong>介绍一下（并发）事务不同隔离级别</strong>？<strong>对应可能出现的问题</strong>？</h4><blockquote><p>参考：<a href="https://www.cnblogs.com/shan-kylin/p/9543294.html">https://www.cnblogs.com/shan-kylin/p/9543294.html</a></p></blockquote><p>下面<strong>排它锁和共享锁</strong>都是<strong>行锁</strong>，锁住一行。</p><ul><li><p><strong>Read uncommitted：</strong> 顾名思义，就是一个事务可以读取另一个未提交事务的数据。但这种情况会出现<strong>脏读</strong>： 因为<strong>写</strong>数据的时候添加一个<strong>X锁（排他锁，拿到锁的事务可以写，其它事务只能等待阻塞</strong>）；但<strong>读</strong>不受限制，读不加锁。</p><blockquote><p>由于读不加锁，读的是可能是修改前（未提交）的数据，也就是<strong>脏读</strong>。</p></blockquote></li><li><p><strong>Read Committed ：写</strong>数据的时候加上<strong>X锁（排他锁</strong>），<strong>读</strong>数据的时候添加<strong>S锁（共享锁，拿到锁的事务可以查看但无法修改和删除，其它事务【只能加S锁】【不能加其它锁】如X锁</strong>）。解决脏读，但会导致出现<strong>不可重复读</strong>的问题。</p><blockquote><ol><li>初始x=100,；</li><li>事务A<strong>读</strong>x，加上<strong>S锁</strong>，读到x=<strong>100</strong>，<strong>立即释放S锁且未提交</strong>；</li><li>事务B<strong>修改</strong>x，加上<strong>X锁</strong>，修改x=50，提交 ；</li><li>事务A再次<strong>读取x</strong>，加上<strong>S锁</strong>，读取x=<strong>50</strong>，发现和第一次读取不一致，提交事务。</li></ol><p>上述过程，事务A在提交前读取两次不一样的x值，为<strong>不可重复读</strong>。</p></blockquote></li><li><p><strong>Repeatable read</strong> ：<strong>MySQL 默认隔离界别</strong> , 开始<strong>读取</strong>数据（事务开启）时，<strong>【S】锁不再立即释放，其它事务就不能加上【X】锁修改数据</strong>。解决了脏读、不可重复读，但是可能会出现<strong>幻读</strong>：-</p><ul><li>Mysql官方给出的幻读解释是：<strong>只要在一个事务中，第二次select（读）多出了row就算幻读</strong>。</li></ul><blockquote><p>现在做如下修改：</p><ul><li>写：X锁保持不变</li><li>读：S锁，<strong>读完不再立即释放</strong>，而是<strong>在提交的时候再释放</strong>。</li></ul><p>这样的话，保证事务A在<u>提交前</u>，读取的x是一致的。解决了<strong>不可重复读</strong>，但依旧可能出现<strong>幻读</strong>。例如，<strong>X锁不能阻止（表中其它记录）插入操作，因为只锁住了当前记录，是行级锁</strong>。</p><ol><li>事务A加上X锁，更新了<strong>所有用户</strong>年龄从<code>20→18</code>；</li><li>过一会儿再读发现<strong>还有一个用户没修改</strong>，还是20岁？出现幻觉了吗？</li></ol><p>这是因为，其它事务B同时插入了一行新数据，年龄就是20岁。所以再读发现没修改。</p></blockquote></li><li><p><strong>Serializable</strong>： 序列化，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。耗费性能，一般不用。</p></li></ul><h5 id="2-1【猿辅导】-怎么解决幻读？">2.1【猿辅导】 怎么解决幻读？</h5><p>解决幻读使用两种方式：</p><ol><li><p><strong>间隙锁</strong></p><ul><li><p><strong>间隙锁（Gap Lock</strong>）：当我们用【范围条件】而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给<strong>符合条件的已有数据记录的索引项加锁</strong>；对于键值在<strong>条件范围内但并不存在的记录，叫做“间隙（GAP)”</strong>，InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁；</p></li><li><p><strong>举例</strong>： 假如user表中只有101条记录，其empid的值分别是 1,2,…,100,101，下面的SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>  <span class="keyword">user</span> <span class="keyword">where</span> user_id <span class="operator">&gt;</span> <span class="number">99</span> <span class="keyword">for</span> update;</span><br></pre></td></tr></table></figure><p>是一个范围条件的检索，InnoDB不仅会对（1）<strong>符合条件的user_id值（100、101）的记录加锁</strong>，也会对（2）user_id大于101（这些<strong>记录并不存在）的“间隙”加锁</strong>。</p></li><li><p><strong>如何解决幻读</strong>？ 产生幻读的原因是，行锁只能锁住行，但是新插入记录这个动作，要更新的是记录之间的“间隙”，导致下次读取产生幻读。如果锁住了间隙，自然也就没锁的问题了。</p></li></ul></li><li><p><strong>mvvc</strong></p><p>在RR（可重复读级别下）不会出现幻读。例如：</p><ol><li><p>开启事务1，获得事务ID为1。</p></li><li><p>事务1执行查询，得到readview。</p></li><li><p>开始事务2。</p></li><li><p>执行insert。</p></li><li><p>提交事务2。</p></li><li><p>执行事务1的第二次查询 (因为这里是RR级别，所以<strong>不会再去获得readview，<strong>还是使用第一次获得的readview，所以</strong>当前read view 事务的ID不会更新</strong>，即不会加入插入事务2)</p></li><li><p>最后得到的结果是，插入的数据不会被读取显示，因为<strong>插入的数据事务ID &gt; readview里的最大活跃事务ID</strong>。</p></li></ol></li></ol><h2 id="5-4-MySQ优化">5.4 MySQ优化</h2><h4 id="0-分页查询慢的原因？如何优化？">0. 分页查询慢的原因？如何优化？</h4><blockquote><p>参考：<a href="https://juejin.cn/post/6844904141878214664">https://juejin.cn/post/6844904141878214664</a></p></blockquote><p>在偏移量非常大的时候，也就是翻页到很靠后的页面时，查询速度会变得越来越慢，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t_order order by id limit 1000000000, 10;</span><br></pre></td></tr></table></figure><p>这是因为，需要查询 100000000010 (100000000000 + 10) 条记录，然后只返回最后 10 条，并将前面的 100000000000 条记录抛弃，这样当翻页越靠后时，代价就变得越来越高。</p><p><strong>优化方法</strong>：</p><ol><li><p><strong>最大id法</strong></p><ul><li><p>举例：查询第一页的时候是limit 400000,10 查询到的最后一条id是4000000，那么下一页的查询只需要查询id大于400000的10条数据即可。</p></li><li><p>语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user where id &gt; 4000000  limit 10;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>BETWEEN … AND</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where id BETWEEN 4000000 and 4000010</span><br></pre></td></tr></table></figure></li><li><p><strong>分表查询</strong></p><p>mysql推荐一张表的存储不要超过500w数据，查询400w不到1秒对于一般的查询来说已经可以了，如果还要更快的话，我建议使用分表存储，分表又分两种情况，水平分表于垂直分表。</p></li><li><p><strong>延迟关联（个人推荐</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table a,(select id from table limit 100000,20) b on a.id=b.id</span><br></pre></td></tr></table></figure></li></ol><h4 id="1-SQL优化手段有哪些？">1. <strong>SQL优化手段有哪些</strong>？</h4><ol><li><p>查询语句中不要使用select</p></li><li><p><strong>尽量减少子查询，使用关联查询</strong>（left join,right join,inner join）替代</p></li><li><p><strong>减少使用IN或者NOT IN ,使用exists，not exists</strong>或者关联查询语句替代(在确认没有重复数据或者不用剔除重复数据时，union all会更好)</p></li><li><p><strong>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符</strong>，否则将引擎放弃使用索引而进行全表扫描。</p></li><li><p><strong>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描</strong>，如： select id from t where num is null 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询： select id from t where num=0</p></li></ol><h4 id="2-请问如何防止SQL被注入？">2.<strong>请问如何防止SQL被注入</strong>？</h4><ul><li><p><strong>什么是SQL注入</strong>？</p><p>攻击者在HTTP请求中注入恶意的SQL代码，服务器使用参数构建数据库SQL命令时，恶意SQL被一起构造，并在数据库中执行。</p><ul><li><p>例如：用户登录，攻击者输入：<code>用户名 = liangzone</code>，<code>密码 = ‘ or ‘1’=’1</code>  ，那么拼接后的语句是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where name = ‘lianggzone’ and password = ‘’ or ‘1’=‘1’ </span><br></pre></td></tr></table></figure><p>攻击者就可以<strong>查询出所有的用户表信息</strong>！</p></li></ul></li><li><p><strong>如何防范SQL注入</strong>？</p><ul><li>Web端：1）有效性检验； 2）限制字符串输入的长度</li><li>服务器端：1）不用拼接SQL字符串， 2）使用预编译的PrepareStatement， 3）有效性检验，4）<strong>过滤SQL需要的参数中的特殊字符，比如单引号、双引号</strong>。</li></ul></li></ul><h4 id="3-MySQL-如何做到高并发解决方案？">3. <strong>MySQL 如何做到高并发解决方案</strong>？</h4><ol><li><strong>在web服务框架中加入缓存</strong>。在服务器与数据库层之间加入缓存层，将高频访问的数据存入缓存中，减少数据库的读取负担。</li><li><strong>增加数据库索引，进而提高查询速度</strong>。（不过索引太多会导致速度变慢，并且数据库的写入会导致索引的更新，也会导致速度变慢）</li><li><strong>主从读写分离分库</strong>，让主服务器负责写，从服务器负责读。</li><li><strong>将数据库表进行拆分表</strong>，使得数据库的表尽可能小，提高查询的速度。</li><li><strong>使用分布式架构</strong>，分散计算压力。</li></ol><h4 id="4-大表如何进行优化？">4. 大表如何进行优化？</h4><p>当MySQL单表记录数过大时，数据库的CRUD性能会明显下降，⼀些常⻅的优化措施如下。</p><ul><li><p><strong>限定数据的范围</strong>：务必禁⽌不带任何限制数据范围条件的查询语句。⽐如：我们当⽤户在查询订单历史的时候，我们可以控制在⼀个⽉的范围内；</p></li><li><p><strong>读/写分离</strong>：经典的数据库拆分⽅案，主库负责写，从库负责读；</p></li><li><p><strong>垂直分区</strong>：根据数据库⾥⾯数据表的相关性进行拆分。</p><blockquote><p>例如，⽤户表中既有⽤户的登录信息⼜有⽤户的基本信息，可以将⽤户表拆分成两个单独的表，甚⾄放到单独的库做分库。</p><ul><li><p>简单来说垂直拆分是指数据表列的拆分，把⼀张列⽐较多的表拆分为多张表。</p><p><img src="https://i.loli.net/2021/05/16/25HtBIuXygCUVrq.png" alt="image-20210516234359675"></p></li></ul></blockquote></li><li><p><strong>水平分区 :</strong> 保持数据表结构不变，通过某种策略存储数据分⽚。这样每⼀⽚数据分散到不同的表或者库中，<strong>达到了分布式的⽬的</strong>。 ⽔平拆分可以支撑⾮常大的数据量。</p></li></ul><p>其它数据库结构方面优化：</p><ul><li><strong>范式优化</strong>： 比如消除冗余（节省空间。。）</li><li><strong>反范式优化</strong>：比如适当加冗余等（减少join）</li></ul><h4 id="5-数据库如何去重？">5. 数据库如何去重？</h4><blockquote><p>参考：<a href="https://segmentfault.com/a/1190000002508404">MySQL数据库行去重复和列去重复</a></p></blockquote><h5 id="5-1-行去重">5.1 行去重</h5><blockquote><p>存在行重复，则无法建立 <u>唯一索引</u> 等。</p></blockquote><blockquote><p>用<code>distinct</code> 得到我们要保留的数据也是可以的。</p></blockquote><p>下面假设的是email字段重复。</p><ol><li><p>查看我们的分组后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *,count(id) from demo_table group by email having count(id)&gt;1 order by id;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----+------+--------------+-----------+</span><br><span class="line">| id | name | email        | count(id) |</span><br><span class="line">+----+------+--------------+-----------+</span><br><span class="line">|  1 | u1   | u1@email.com |         4 |</span><br><span class="line">|  2 | u2   | u2@email.com |         4 |</span><br><span class="line">|  3 | u3   | u3@email.com |         3 |</span><br><span class="line">|  4 | u4   | u4@email.com |         2 |</span><br><span class="line">|  5 | u5   | u5@email.com |         2 |</span><br><span class="line">+----+------+--------------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>保留每个分组<strong>最小的id</strong>，表中其余都删除</p><p>在表中删除不符合要求的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from demo_table where id not in (select min(id) from demo_table group by email);</span><br></pre></td></tr></table></figure><p>但是似乎有保护机制，无法直接删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1093 (HY000): You can&#x27;t specify target table &#x27;demo_table&#x27; for update in FROM clause</span><br></pre></td></tr></table></figure></li><li><p>创建临时表再删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建临时表保存每个分组中最小的那个id</span><br><span class="line">create table tmp_table as select min(id) from demo_table group by email;</span><br><span class="line"></span><br><span class="line"># 删除表中数据</span><br><span class="line">delete from demo_table where id not in (select * from tmp_table);</span><br><span class="line"></span><br><span class="line"># 删除临时表</span><br><span class="line">drop table tmp_table;</span><br></pre></td></tr></table></figure></li></ol><h5 id="5-2-列重复">5.2 列重复</h5><ol><li><p>先找到重复字段的<strong>行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from demo_table as a, demo_table as b where a.id=b.id and a.name=b.email;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----+--------------+--------------+----+--------------+--------------+</span><br><span class="line">| id | name         | email        | id | name         | email        |</span><br><span class="line">+----+--------------+--------------+----+--------------+--------------+</span><br><span class="line">| 31 | 31@email.com | 31@email.com | 31 | 31@email.com | 31@email.com |</span><br><span class="line">| 32 | 32@email.com | 32@email.com | 32 | 32@email.com | 32@email.com |</span><br><span class="line">| 33 | 33@email.com | 33@email.com | 33 | 33@email.com | 33@email.com |</span><br><span class="line">| 34 | 34@email.com | 34@email.com | 34 | 34@email.com | 34@email.com |</span><br><span class="line">| 35 | 35@email.com | 35@email.com | 35 | 35@email.com | 35@email.com |</span><br><span class="line">+----+--------------+--------------+----+--------------+--------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>重复记录的id都已经找出来了，删除就参考上述方式处理了。</p></li></ol><h4 id="6-select慢的原因？慢查询的优化策略？">6. select慢的原因？慢查询的优化策略？</h4><h5 id="6-1-select-很慢的原因">6.1 select 很慢的原因</h5><blockquote><p>参考：<a href="https://www.cnblogs.com/kubidemanong/p/10734045.html">腾讯面试：一条SQL语句执行得很慢的原因有哪些?</a></p></blockquote><ul><li><p><strong>如果是偶尔很慢</strong></p><p>针对这种情况，这条SQL语句的书写本身是没什么问题的。可能是其它原因导致：</p><ol><li><strong>被加锁。</strong> 要执行的这条语句，刚好这条语句涉及到的<strong>表</strong>，别人在用，并且加锁了，我们拿不到锁，只能慢慢等待别人释放锁了；或者，表没有加锁，但要使用到的某个一<strong>行</strong>被加锁了 。</li><li>数据库在刷新脏页 ？ 看链接，不太明白流程。</li></ol></li><li><p><strong>如果是经常很慢</strong></p><ol><li><p><strong>没用到索引</strong></p></li><li><p><strong>索引失效了</strong> ：</p><p>（1）联合索引不满足最左匹配（不包含第一个索引）；</p><p>（2）like语句不满足最左匹配（不包含第一个索引）</p><p>（3）或者索引加上了运算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t where c - 1 = 1000;</span><br></pre></td></tr></table></figure><p>这种情况不会有效，应该是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t where c = 1000 + 1;</span><br></pre></td></tr></table></figure><p>（4）或者函数操作用上索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t where pow(c,2) = 1000;</span><br></pre></td></tr></table></figure></li><li><p><strong>数据库使用非聚簇索引</strong></p><p>我们在进行查询操作的时候，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t where 100 &lt; c and c &lt; 100000;</span><br></pre></td></tr></table></figure><p>此时使用的非聚簇索引（辅助索引），只是存储了<strong>主键的key</strong> ，还是要再次通过聚簇索引去查找。效率可能不必全表扫描高。</p></li></ol></li></ul><h4 id="7-select…for-update用法？">7. select…for update用法？</h4><blockquote><p><a href="https://segmentfault.com/a/1190000023045909">数据库-MySQL中for update的作用和用法</a></p></blockquote><p><code>for update</code>是一种<code>行级锁</code>，又叫<code>排它锁</code>。</p><p>一旦用户对某个行施加了行级加锁，则<strong>该用户可以查询也可以更新</strong>被加锁的数据行，<strong>其它用户只能查询</strong>但不能更新被加锁的数据行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 开启事务</span><br><span class="line">begin;</span><br><span class="line">SELECT * FROM user WHERE id=3 FOR UPDATE;</span><br><span class="line">SELECT * FROM user WHERE id=3 and name=&#x27;Tom&#x27; FOR UPDATE;</span><br><span class="line">-- 提交事务</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h4 id="8-场景题：假如选择MySQL数据库，一天五万条增量，运维三年，有哪些优化手段？">8. 场景题：假如选择MySQL数据库，一天五万条增量，运维三年，有哪些优化手段？</h4><ol><li><strong>设计良好的数据库结构</strong>，允许部分数据冗余，尽量避免join查询，提高效率；</li><li>选择合适的表字段数据类型和存储引擎，适当的<strong>添加索引</strong>；</li><li>MySQL库主从<strong>分库读写分离</strong>；</li><li>找规律<strong>分表</strong>，减少单表中的数据量提高查询速度；</li><li><strong>添加缓存机制</strong>，比如Memcached，Apc等；</li><li><strong>书写高效率的SQL</strong>。比如 SELECT * FROM TABEL 改为 SELECT field_1, field_2, field_3 FROM TABLE。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 校招 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（四）_计算机基础_操作系统</title>
      <link href="/p/15646/"/>
      <url>/p/15646/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我的校招记录：<a href="https://www.hwh.zone/p/29708/">校招笔记（零）_写在前面</a> ，以下是校招笔记总目录。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><h1>四、操场系统</h1><h2 id="4-1-操作系统基础">4.1 操作系统基础</h2><h4 id="0-（百度安全一面）-冯诺依曼结构有哪几个模块？分别对应现代计算机的哪几个部分？">0. （百度安全一面） 冯诺依曼结构有哪几个模块？分别对应现代计算机的哪几个部分？</h4><ul><li>存储器：内存</li><li><strong>控制器：南桥北桥</strong></li><li>运算器：CPU</li><li>输入设备：键盘</li><li>输出设备：显示器、网卡</li></ul><h4 id="1-什么是操作系统？">1. 什么是操作系统？</h4><ol><li>操作系统（Operating System，简称 OS）是管理计算机硬件与软件资源的程序，是计算机系统的内核与基⽯；</li><li>操作系统本质上是运行在计算机上的软件程序 ；</li><li>操作系统为用户提供⼀个与系统交互的操作界面 ；</li><li>操作系统分内核与外壳（我们可以把外壳理解成围绕着内核的应用程序，而内核就是能操作硬件的程序）。</li></ol><h4 id="2-什么是系统调用呢？-能不能详细介绍⼀下？">2. 什么是系统调用呢？ 能不能详细介绍⼀下？</h4><p>根据进程访问资源的特点，我们可以把进程在系统上的运行分为两个级别：</p><ol><li><strong>用户态(user mode) :</strong> 用户态运行的进程或可以直接读取用户程序的数据。</li><li><strong>系统态(kernel mode)</strong>：可以简单的理解系统态运行的进程或程序⼏乎可以访问计算机的任何资源，不受限制。</li></ol><p>我们运行的程序基本都是运行在<strong>用户态</strong>，如果我们调用操作系统提供的系统态级别的子功能咋办呢？那就需要系统调用了！</p><p>这些系统调用按功能大致可分为如下⼏类：</p><ul><li><strong>设备管理</strong>。完成设备的请求或释放，以及设备启动等功能。</li><li><strong>⽂件管理</strong>。完成⽂件的读、写、创建及删除等功能。</li><li><strong>进程控制</strong>。完成进程的创建、撤销、阻塞及唤醒等功能。</li><li><strong>进程通信</strong>。完成进程之间的消息传递或信号传递等功能。</li><li><strong>内存管理</strong>。完成内存的分配、回收以及获取作业占用内存区大小及地址等功能。</li></ul><h4 id="3-CentOS-和-Linux的关系？">3. <strong>CentOS 和 Linux的关系？</strong></h4><p>Linux意思较广广义的范围，多指是Linux内核。CentOS是RedHat的一个分支，RedHat是Linux的一个发行版本，RedHat与CentOS的区别在于，RedHat收费，CentOS免费。</p><h4 id="4-什么是分布式，优缺点？集群？">4. 什么是分布式，优缺点？集群？</h4><ul><li><p><strong>分布式</strong></p><p>根据业务需求进行拆<strong>分成N个子系统</strong>，多个子系统相互协作才能完成业务流程<strong>子系统之间通讯</strong>使用<strong>RPC</strong>远程通讯技术。</p></li><li><p><strong>集群</strong></p><p>同一个工程部署在多个不同的服务器上。</p></li><li><p><strong>分布式优点</strong></p><p>1.把模块拆分，使用接口通信，降低模块之间的耦合度。</p><p>2.把项目拆分成若干个子项目，不同的团队负责不同的子项目。</p><p>3.增加功能时只需要再增加一个子项目，调用其它系统的接口就可以。</p><p>4.可以灵活的进行分布式部署。</p></li><li><p><strong>分布式缺点</strong></p><p>1.系统之间交互需要使用远程通信，接口开发增加工作量。</p><p>2.各个模块有一些通用的业务逻辑无法共用。</p></li></ul><h4 id="5-在Linux-windows栈空间的大小？">5. 在Linux/windows栈空间的大小？</h4><ul><li><p><strong>Linux环境下由操作系统决定</strong>，一般是<code>8KB</code> ， 通过ulimit命令查看以及修改</p><blockquote><p>在Linux下通过如下命令可查看和设置栈的大小：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">ulimit</span> -a            <span class="comment"># 显示当前栈的大小 （ulimit为系统命令，非编译器命令）</span></span>       </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">ulimit</span> -s 32768      <span class="comment"># 设置当前栈的大小为32MCopy to clipboardErrorCopied</span></span></span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>Windows环境下由编译器决定</strong>，VC++6.0一般是<code>1M</code> \</p><blockquote><p>Windows平台下栈的大小是被记录在可执行文件中的（由编译器来设置)，即：windows下可以由编译器决定栈大小，而在Linux下是由系统环境变量来控制栈的大小的。</p></blockquote></li></ul><h4 id="6-ASCII、Unicode和UTF-8编码的区别？">6. ASCII、Unicode和UTF-8编码的区别？</h4><ul><li><p><strong>ASCII :</strong>  ASCII 只有127个字符，表示英文字母的大小写、数字和一些符号 ；</p><blockquote><p>常用中文需要两个字节，且不能和ASCII冲突，中国定制了<code>GB2312</code>编码格式。</p></blockquote></li><li><p><strong>Unicode：</strong> Unicode就是将<strong>不同语言统一到一套编码格式中</strong>，通常<strong>两个</strong>字节表示一个字符，而<strong>ASCII是一个</strong>字节表示一个字符 ；</p><blockquote><p>如果你编译的文本是全英文的，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p></blockquote></li><li><p><strong>UTF-8 :</strong>  把Unicode编码转化为 “<strong>可变长编码</strong>” UTF-8编码，UTF-8编码将Unicode字符按数字大小编码为<strong>1-6</strong>个字节，英文字母被编码成<strong>1</strong>个字节，常用汉字被编码成<strong>2</strong>个字节。</p></li></ul><h5 id="6-1-三者区别和联系">6.1 三者区别和联系</h5><ul><li><p>在<strong>计算机内存</strong>中，统一使用<strong>Unicode</strong>编码 ；</p></li><li><p>当需要<strong>保存到硬盘或者需要传输</strong>的时候，就转换为<strong>UTF-8</strong>编码</p></li></ul><p>举例说明：</p><blockquote><p>例1 ：记事本编辑（内存）→保存（磁盘）。</p></blockquote><p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件。</p><p><img src="https://i.loli.net/2021/06/11/9IjWniLHqrwRd2s.png" alt="image-20210611131935690"></p><blockquote><p>例2：网络传输服务器→浏览器。</p></blockquote><p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。</p><p><img src="https://i.loli.net/2021/06/11/hZFaKbezvQEsxko.png" alt="image-20210611132058826"></p><h4 id="7-什么是并发和并行？同步和异步？">7. 什么是并发和并行？同步和异步？</h4><ul><li><strong>并发和并行</strong><ul><li><strong>并发</strong>： 是指宏观上在<strong>一段时间</strong>内能同时运行多个<strong>程序</strong>；</li><li><strong>并行</strong> ：则指<strong>同一时刻</strong>能运行多个<strong>指令</strong>。</li></ul></li><li><strong>同步和异步</strong><ul><li><p><strong>同步</strong>：可以理解为在执行完一个函数或方法之后，<strong>一直等待系统返回值或消息，这时程序是出于阻塞的</strong>，只有接收到返回的值或消息后才往下执行其他的命令。</p></li><li><p><strong>异步</strong>：执行完函数或方法后，<strong>不必阻塞性地等待返回值或消息，只需要向系统委托一个异步过程</strong>，那么当系统接收到返回值或消息时，系统会<strong>自动触发委托的异步过程</strong>，从而完成一个完整的流程。</p></li></ul></li></ul><h4 id="8-什么是共享？">8. 什么是共享？</h4><ul><li><p><strong>共享定义</strong>： 系统中的资源可以被多个并发进程共同使用 ；</p></li><li><p><strong>共享方式</strong>：<u>互斥</u>共享和<u>同时</u>共享：</p><ul><li><strong>互斥共享</strong>： 在<strong>同一时刻只允许一个进程访问</strong>，需要用同步机制来实现互斥访问 ，如：打印机。</li></ul></li></ul><h2 id="4-2-进程和线程">4.2 进程和线程</h2><h4 id="1-请问64位和32位的区别？">1.<strong>请问64位和32位的区别</strong>？</h4><ol><li><strong>运行能力不同</strong>：64位可以一次性可以处理8个字节的数据量，而32位一次性只可以处理4个字节的数据量，因此64位比32位的运行能力提高了一倍。</li><li><strong>内存寻址不同</strong>：64位最大寻址空间为2的64次方，理论值直接达到了16TB，而32位的最大寻址空间为2的32次方，为4GB，换而言之，就是说32位系统的处理器最大只支持到4G内存，而64位系统最大支持的内存高达亿位数。</li><li><strong>运行软件不同</strong>：由于32位和64位<u>CPU的指令集是不同</u>的。所以需要区分32位和64位版本的软件。<br>为了保证兼容性，64位CPU上也能运行老的32位指令，但反过来32位系统不可以运行64位的软件。</li></ol><h4 id="2-介绍一下线程和进程的区别？">2.<strong>介绍一下线程和进程的区别？</strong></h4><ol><li><p><strong>根本区别</strong>：进程是操作系统<strong>资源分配</strong>的基本单位，而线程是处理器<strong>任务调度</strong>和执行的基本单位</p></li><li><p><strong>资源开销：每个进程都有独立的代码和数据空间（程序上下文）</strong>，程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，<strong>每个线程都有自己独立的运行栈和程序计数器</strong>（PC），线程之间切换的开销小</p></li><li><p><strong>包含关系</strong>：如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程</p></li><li><p><strong>内存分配</strong>：同一进程的线程<strong>共享本进程的【地址空间和资源】</strong>，而进程之间的地址空间和资源是相互独立的</p></li><li><p><strong>影响关系</strong>：一个进程崩溃后，在保护模式下不会对其他进程产生影响，<strong>但是一个线程崩溃整个进程都死掉</strong>，<strong>所以多进程要比多线程健壮</strong>。</p><blockquote><p>线程没有独立的地址空间，如果崩溃，会发信号，如果没有错误处理的handler，OS一般直接杀死进程。</p></blockquote></li><li><p><strong>能否独立</strong>：每个独立的进程有程序运行的入口、顺序执行序列和程序出口。但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制，两者均可并发执行</p></li></ol><h5 id="2-1-线程和协程之间的区别？">2.1 线程和协程之间的区别？</h5><blockquote><p><strong>进程是资源调度的基本单位</strong>，<strong>运行一个可执行程序会创建一个或多个进程</strong>，进程就是运行起来的可执行程序 ;</p><p><strong>线程是程序执行的基本单位</strong>，是轻量级的进程。<strong>每个进程中都有唯一的主线程，和多个线程</strong>，且只能有一个，主线程和进程是相互依存的关系，主线程结束进程也会结束；</p><p><strong>协程</strong>是用户态的<strong>轻量级线程</strong>，<strong>也是线程内部调度的基本单位</strong> 。</p></blockquote><p>协程和线程的区别如下（补充了和进程的区别，方便对比）。</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">进程</th><th style="text-align:left">线程</th><th>协程</th></tr></thead><tbody><tr><td style="text-align:left">定义</td><td style="text-align:left">资源分配和拥有的基本单位</td><td style="text-align:left">程序执行的基本单位</td><td>用户态的轻量级线程，线程内部调度的基本单位</td></tr><tr><td style="text-align:left">切换情况</td><td style="text-align:left">进程CPU环境(栈、寄存器、页表和文件句柄等)的保存以及新调度的进程CPU环境的设置</td><td style="text-align:left">保存和设置程序计数器、少量寄存器和栈的内容</td><td>先将寄存器上下文和栈保存，等切换回来的时候再进行恢复</td></tr><tr><td style="text-align:left">切换者</td><td style="text-align:left">操作系统</td><td style="text-align:left">操作系统</td><td>用户</td></tr><tr><td style="text-align:left">切换过程</td><td style="text-align:left">用户态-&gt;内核态-&gt;用户态</td><td style="text-align:left">用户态-&gt;内核态-&gt;用户态</td><td>用户态(没有陷入内核)</td></tr><tr><td style="text-align:left">调用栈</td><td style="text-align:left">内核栈</td><td style="text-align:left">内核栈</td><td>用户栈</td></tr><tr><td style="text-align:left">拥有资源</td><td style="text-align:left"><strong>CPU资源、内存资源、文件资源和句柄等</strong></td><td style="text-align:left"><strong>程序计数器、寄存器、栈和状态字</strong></td><td><strong>拥有自己的寄存器上下文和栈</strong></td></tr><tr><td style="text-align:left">并发性</td><td style="text-align:left">不同进程之间切换实现并发，各自占有CPU实现并行</td><td style="text-align:left">一个进程内部的多个线程并发执行</td><td>同一时间只能执行一个协程，而其他协程处于休眠状态，适合对任务进行分时处理</td></tr><tr><td style="text-align:left">系统开销</td><td style="text-align:left">切换虚拟地址空间，切换内核栈和硬件上下文，CPU高速缓存失效、页表切换，开销很大</td><td style="text-align:left">切换时只需保存和设置少量寄存器内容，因此开销很小</td><td>直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快</td></tr><tr><td style="text-align:left">通信方面</td><td style="text-align:left">进程间通信需要借助操作系统</td><td style="text-align:left">线程间可以直接读写进程数据段(如全局变量)来进行通信</td><td>共享内存、消息队列</td></tr></tbody></table><h5 id="2-2-一个进程可以创建多少个线程，和什么有关？">2.2 一个进程可以创建多少个线程，和什么有关？</h5><p>一个进程可用虚拟空间是（C++）2G，默认情况下，（假设）<strong>线程的栈的大小是1MB</strong>（Linux是8kb），则理论上最多只能创建2048个线程。如果要创建多于2048的话，必须修改编译器的设置。</p><h5 id="2-3-进程之间的同步方式？（区分通信方式）">2.3 进程之间的同步方式？（区分通信方式）</h5><ol><li><p><strong>临界区</strong>。 对临界资源进行访问的那段代码称为临界区。</p><p>为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。</p></li><li><p><strong>同步和互斥</strong>。</p><ul><li>同步：多个进程因为合作产生的直接制约关系，使得进程有一定的先后执行关系。</li><li>互斥：多个进程在同一时刻<strong>只有一个进程</strong>能进入临界区。</li></ul></li><li><p><strong>信号量</strong>。 常见的 P 和 V 操作。</p><ul><li>特别的，<u>如果信号量的取值只能为 0 或者 1</u>，那么就成为了<strong>互斥量（Mutex）</strong> ，0 表示临界区已经加锁，1 表示临界区解锁。</li></ul></li><li><p><strong>条件变量</strong>。</p><blockquote><p>使用信号量机制实现的生产者消费者问题需要客户端代码做很多控制，而管程把控制的代码独立出来，不仅不容易出错，也使得客户端代码调用更容易。</p></blockquote><p>管程引入了<strong>条件变量</strong> 以及相关的操作：<strong>wait()</strong> 和 <strong>signal()</strong> 来实现同步操作。对条件变量执行 wait() 操作会导致调用进程阻塞，把管程让出来给另一个进程持有。signal() 操作用于唤醒被阻塞的进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 管程：解决生产者、消费者问题</span></span><br><span class="line">monitor ProducerConsumer</span><br><span class="line">    condition full, empty;</span><br><span class="line">    integer count := <span class="number">0</span>;</span><br><span class="line">    condition c;</span><br><span class="line"></span><br><span class="line">    <span class="function">procedure <span class="title">insert</span><span class="params">(item: integer)</span></span>;</span><br><span class="line">    begin</span><br><span class="line">        <span class="keyword">if</span> count = N then wait(full);</span><br><span class="line">        insert_item(item);</span><br><span class="line">        count := count + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> count = <span class="number">1</span> then signal(empty);</span><br><span class="line">    end;</span><br><span class="line"></span><br><span class="line">    function remove: integer;</span><br><span class="line">    begin</span><br><span class="line">        <span class="keyword">if</span> count = <span class="number">0</span> then wait(empty);</span><br><span class="line">        remove = remove_item;</span><br><span class="line">        count := count - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> count = N <span class="number">-1</span> then signal(full);</span><br><span class="line">    end;</span><br><span class="line">end monitor;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者客户端</span></span><br><span class="line">procedure producer</span><br><span class="line">begin</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">    begin</span><br><span class="line">        item = produce_item;</span><br><span class="line">        ProducerConsumer.insert(item);</span><br><span class="line">    end</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者客户端</span></span><br><span class="line">procedure consumer</span><br><span class="line">begin</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">    begin</span><br><span class="line">        item = ProducerConsumer.remove;</span><br><span class="line">        consume_item(item);</span><br><span class="line">    end</span><br><span class="line">end;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-请问【进程】之间如何进行通信？">3.<strong>请问【进程】之间如何进行通信</strong>？</h4><p>可以分为如下两个方面：</p><ol><li>本地进程之间的通信方式</li><li>远程进程之间的通信方式</li></ol><p><strong>1. 本地进程之间的通信方式（没有同步互斥！！</strong>）</p><ul><li><p><strong>无名管道</strong> ：半双工通信方式，<strong>数据(消息)单向流动</strong>，只能是字节流格式的消息。</p><ul><li><strong>优点</strong>：简单方便</li><li><strong>缺点</strong>：单向通信、只能用于<strong>具有亲缘关系（一般指父子</strong>）的进程之间、<strong>缓冲区有限</strong></li></ul></li><li><p><strong>有名管道：半双工通信</strong>方式，数据也称为命名管道：是一种文件类型，以一种特殊设备文件形式存在于文件系统中。</p><ul><li><strong>优点</strong>：可以实现<strong>任意关系的进程</strong>间的通信（无法同步）</li><li><strong>缺点</strong>： 长期存于系统中，使用不当容易出错、<strong>缓冲区有限</strong></li></ul></li><li><p><strong>消息队列</strong>：消息队列是消息的<strong>链表</strong>,存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少,管道只能承载无格式字节流以及缓冲区大小受限等特点。</p><ul><li><strong>优点</strong>：<u>可以实现任意进程间的通信</u>，并通过系统调用函数来实现消息发送和接收之间的同步<u>，无需考虑同步</u>问题</li><li><strong>缺点</strong>：信息的复制需要<u>额外消耗CPU的时间</u>，不适宜于信息量大或操作频繁的场合</li></ul></li><li><p><strong>共享内存</strong></p><p>直接对内存存取，<u>通信快</u>，但是多个进程可以同时操作，<u>需要用信号量进行同步</u>。</p></li><li><p><strong>信号量</strong></p><p>信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p><ul><li><p><strong>优点</strong>：可以同步进程；</p></li><li><p><strong>缺点</strong>：信号量有限</p><blockquote><p>注解：P操作就是对S减一，V操作就是对S加一</p></blockquote><ul><li><strong>同步</strong>：S = 0，进程A执行完进行V操作，进程B执行前执行P操作，这样B就可以等A执行完再执行；</li><li><strong>互斥</strong>：S = 1，进程执行前进行P操作，执行后进行V操作。</li></ul></li></ul></li></ul><p><strong>2.远程进程之间的通信方式</strong></p><p>首要解决的问题是如何唯一标识一个进程？本地上采用PID即可，但是网络中 <u>TCP/IP五层网络模型中传输层的 “<strong>套接字：IP+端口</strong>”</u></p><ul><li><p><strong>套接字交互</strong></p><ul><li><strong>优点</strong>：1）传输数据为字节级，传输数据可自定义，数据量小效率高；2）传输数据时间短，性能高；3) 适合于客户端和服务器端之间信息实时交互；4) 可以加密,数据安全性强</li><li><strong>缺点</strong>：1) 需对传输的数据进行解析，转化成应用级的数据。</li></ul></li><li><p><strong>远程过程调用（RPC）</strong></p></li></ul><h4 id="4-请问【线程】间同步方式（通信方式）？">4. 请问【线程】间同步方式（通信方式）？</h4><p><img src="https://i.loli.net/2021/06/11/38AqLbJEZnhSPC9.png" alt="image-20210611000107784"></p><p>【<strong>1. Linux下线程通知方式</strong>】</p><ol><li><strong>互斥量(Mutex)</strong>：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有⼀个，所以可以保证公共资源不会被多个线程同时访问。<ul><li>⽐如 Java 中的<strong>synchronized 关键词和各种 Lock锁</strong> 都是这种机制。</li></ul></li><li><strong>信号量(Semphares)</strong> ：它允许同⼀时刻多个线程访问同⼀资源，但是需要控制同⼀时刻访问此资源的最大线程数量</li><li><strong>条件变量</strong> : 通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级<ul><li>比如Wait/Notify</li></ul></li></ol><p>【<strong>2. Windows下线程通知方式</strong>】</p><ol><li><strong>全局变量</strong>：需要有多个线程来访问一个全局变量时，通常我们会在这个全局变量前加上volatile声明，以防编译器对此变量进行优化 ；</li><li><strong>CEvent对象</strong>：CEvent为MFC中的一个对象，可以通过对CEvent的触发状态进行改变，从而实现线程间的通信和同步，这个主要是实现线程直接同步的一种方法；</li><li><strong>Message消息机制</strong>：常用的Message通信的接口主要有两个：PostMessage和PostThreadMessage，PostMessage为线程向主窗口发送消息。而PostThreadMessage是任意两个线程之间的通信接口。</li></ol><h4 id="5-什么时候用多线程-多进程？">5.<strong>什么时候用多线程 / 多进程</strong>？</h4><ul><li><strong>需要<u>频繁创建销毁</u>的优先用线程</strong> ：创建和销毁的代价是很难承受的 ；</li><li><strong>需要进行<u>大量计算</u>的优先使用线程</strong> ：此时<strong>耗费很多CPU，切换频繁</strong>，用线程更轻量；</li><li><strong>任务间相关性比较强的用多线程</strong>，相关性比较弱的用多进程。因为线程之间的数据共享和同步比较简单；</li></ul><p>考虑多进程：</p><ul><li>扩展到<strong>多机分布</strong>的用<strong>多进程</strong>，多核分布的用<strong>多线程</strong> ；</li><li>其它一般用多线程比较好</li></ul><h4 id="6-【线程】调度算法？">6.<strong>【线程】调度算法？</strong></h4><p>在资源一定的情况下，调度算法需要在<strong>吞吐量（Throughput）、平均响应时间（延迟，Average Response Time）、公平性、调度引起的额外开销（overhead</strong>）等几个方面做权衡。</p><ol><li><p><strong>先进先出算法（FIFO，First-In-First-Out）</strong></p><ul><li><strong>优点</strong>：<ul><li><strong>最少的任务切换开销</strong>（因为没有在任务执行过程中发生切换，故任务切换开销为0）</li><li><strong>最大的吞吐量</strong>（因没有任务切换开销，在其他一定的情况下，吞吐量肯定是最大的）</li><li><strong>最朴实的公平性</strong>（先来先做）</li></ul></li><li><strong>缺点</strong>：<ul><li><strong>平均响应时间高</strong>：耗时只需10毫秒的任务若恰巧在耗时1000毫秒的任务后到来，他则需要1010毫秒才能执行完成，绝大部分时间都花在等待被调度。</li></ul></li></ul></li><li><p><strong>最短耗时任务优先算法</strong></p><p>优先调度耗时短的任务，需要预先知道每个任务的耗时情况，这在实际情况中是不大现实的。</p><ul><li>（<strong>优点</strong>）<strong>平均响应时间较低</strong>：这里有一点，因为将时间长的任务无限往后推移，实际计算的平均响应时间的任务都是执行较快的任务，统计出来的平均响应时间必然较低的。</li><li><strong>（缺点</strong>）<strong>耗时长任务饥饿</strong>：耗时长的任务迟迟得不到调度，不公平，容易形成饥饿 。</li><li><strong>（缺点</strong>）<strong>开销大</strong>：<u>频繁的任务切换</u>，调度的额外开销大。</li></ul></li><li><p><strong>时间片轮转算法</strong></p><p>给队列中的每个任务一个时间片，第一个任务先执行，时间片到了之后，将此任务放到队列尾部，切换到下个任务执行，<u>解决最短耗时任务优先算法中耗时长任务饥饿的问题</u> 。</p><ul><li><strong>（特点）时间片设置问题</strong>： 算法介于FIFO和SJF之间，若时间片足够<strong>大</strong>，则退化到FIFO ；若分片足够小（假设不考虑任务切换的开销），则任务的完成时间顺序是以耗时从小到大排列。</li><li>（<strong>优点）公平调度</strong>：每个任务都能够得到公平的调度<ul><li>（<strong>优点）不会饥饿</strong>：耗时短的任务即使落在耗时长的任务后面，也能够较快的得到调度执行</li></ul></li><li><strong>（缺点）开销大</strong>：<u>任务切换引起的调度开销较大</u>，需要多次切换任务上下文<ul><li><strong>（缺点</strong>）时间片不太好设置</li></ul></li></ul></li><li><p><strong>最大最小公平算法</strong></p></li></ol><h4 id="7-【进程】调度算法？">7.<strong>【进程】调度算法？</strong></h4><ul><li>先来先服务调度算法</li><li>短作业(进程)优先调度算法</li><li>时间片轮转法</li><li><strong>多级反馈队列调度算法</strong></li><li>优先权调度算法</li></ul><h4 id="8-CPU上下文切换？有什么类型？线程发生在什么地方？">8. <strong>CPU上下文切换？有什么类型？线程发生在什么地方？</strong></h4><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/52845869">https://zhuanlan.zhihu.com/p/52845869</a></p></blockquote><ul><li><p><strong>什么是 CPU 上下文</strong> ？</p><p><u>CPU 寄存器和程序计数器</u> 就是 CPU 上下文，因为它们都是 CPU 在运行任何任务前，<strong>必须的依赖环境</strong>。</p><blockquote><ul><li><u>CPU 寄存器</u> 是 CPU 内置的容量小、但速度极快的内存。</li></ul></blockquote></li><li><p><strong>什么是 CPU 上下文切换?</strong></p><p>通常指以下过程：</p><ol><li>前一个任务的 CPU 上下文（也就是 <strong>CPU 寄存器和程序计数器</strong>）保存起来;</li><li>然后加载新任务的上下文到这些寄存器和程序计数器;</li><li>最后再跳转到程序计数器所指的新位置，运行新任务。</li></ol></li><li><p><strong>CPU 上下文切换的类型</strong>？</p><p>根据任务的不同，可以分为以下三种类型 : <strong>进程上下文切换 - 线程上下文切换 - 中断上下文切换</strong> 。</p><ol><li><p><strong>进程上下文切换</strong></p><p>进程在用户空间运行时，被称为进程的用户态，而陷入内核空间的时候，被称为进程的内核态。</p><blockquote><ul><li><p>内核空间（Ring 0）具有最高权限，可以直接访问所有资源；</p></li><li><p>用户空间（Ring 3）只能访问受限资源，不能直接访问内存等硬件设备，必须通过系统调用陷入到内核中，才能访问这些特权资源。</p></li></ul></blockquote><p>从用户态到内核态的转变，需要通过<strong>系统调用</strong>来完成，在<u>这个过程中就发生了 <strong>CPU</strong> 上下文切换（<strong>两</strong>次，用户态-内核态-用户态））</u>。</p><blockquote><p><strong>系统调用</strong> : 查看文件时read()、wirte() 操作就发生了系统调用。</p><p>但是，系统调用过程中，<strong>并不会涉及到虚拟内存等进程用户态的资源，也不会切换进程</strong>。</p></blockquote><p><img src="https://pic3.zhimg.com/80/v2-440bb1699b2fa0f0340b38eabcbd7452_720w.jpg" alt="img"></p><p>而<u><strong>进程</strong>上下文切换</u> ，比系统调用时多了一步：在<strong>保存内核态资源</strong>（当前进程的<u>内核状态和 CPU 寄存器</u>）之前，需要先把该进程的<strong>用户态资源</strong>（<u>虚拟内存、栈等</u>）保存下来。</p></li><li><p><strong>线程上下文调用</strong></p><p>线程是调度的基本单位，而进程则是资源拥有的基本单位。</p><p>【面试高频】发生线程上下文切换的场景</p><ul><li><strong>前后两个线程属于不同进程</strong>。此时，因为资源不共享，所以切换过程就跟进程上下文切换是一样。</li><li><strong>前后两个线程属于同一个进程</strong>。此时，因为虚拟内存是共享的，所以在切换时，<u>虚拟内存</u>这些资源就保持不动，只需要切换<strong>线程的私有数据（栈、寄存器等</strong>)不共享的数据</li></ul></li><li><p><strong>中断上下文切换</strong></p></li></ol></li></ul><h4 id="9-如何杀死一个进程？进程终止的方式？">9.<strong>如何杀死一个进程</strong>？进程终止的方式？</h4><ol><li>linux命令：<code>kill -9 &lt;pid&gt;</code></li><li>接受能导致进程终止的信号：ctrl+c (^C)、SIGINT(SIGINT中断进程)</li><li>main函数的自然返回，<code>return</code></li><li>调用<code>exit</code>函数，属于c的函数库 3、调用<code>_exit</code>函数，属于系统调用</li><li>调用<code>abort</code>函数，异常程序终止，同时发送SIGABRT信号给调用进程</li></ol><h5 id="9-1-终端退出，终端运行的进程会怎么样？">9.1 终端退出，终端运行的进程会怎么样？</h5><ol><li><p>终端在退出时会发送<code>SIGHUP</code>给对应的bash进程，</p></li><li><p>bash进程收到这个信号后首先将它发给session下面的进程</p><blockquote><p>一个session就是一个shell终端会话窗口。</p></blockquote></li><li><p>如果程序没有对SIGHUP信号做特殊处理，那么进程就会随着终端关闭而退出</p></li></ol><h5 id="9-2-怎么让进程后台运行？">9.2 怎么让进程后台运行？</h5><ol><li><code>命令 + &amp;</code> 即可，实际上，这样是将命令放入到一个作业队列中了</li><li><code>ctrl + z</code> 挂起进程，使用jobs查看序号，在使用bg %序号后台运行进程</li><li><code>nohup + &amp;</code>，将标准输出和标准错误缺省会被重定向到 nohup.out 文件中，忽略所有挂断（SIGHUP）信号</li><li><code>setsid + 命令</code>，使其父进程编程init进程，不受HUP信号的影响</li><li>将<code>命令+ &amp;</code>放在()括号中，也可以是进程不受HUP信号的影响</li></ol><h4 id="10-外中断和异常的区别？">10. 外中断和异常的区别？</h4><ul><li><p><strong>外中断是指由 CPU 执行指令以外的事件引起</strong>，如 I/O 完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。</p></li><li><p><strong>异常时由 CPU 执行指令的内部事件引起</strong>，如非法操作码、地址越界、算术溢出等。</p></li></ul><h4 id="11-什么是父进程、子进程、进程组、作业和会话？">11. 什么是父进程、子进程、进程组、作业和会话？</h4><ul><li><p><strong>父进程</strong>： 已创建一个或多个子进程的进程 ；</p></li><li><p><strong>子进程</strong>： 由<strong>fork</strong>创建的新进程被称为子进程（child process），函数被调用一次，但返回两次；</p><p>fork之后，操作系统会<strong>复制一个与父进程完全相同的子进程</strong>，虽说是父子关系，但是在操作系统看来，他们更像兄弟关系：</p><ul><li>（1）它们共<strong>享代码空间</strong>，（2）<strong>数据空间是互相独立</strong>的，但<strong>子进程数据空间中的内容是父进程的完整拷贝</strong>，（3）<strong>指令指针也完全相同</strong>，（4）子进程拥有父进程当前运行到的位置（两进程的程序计数器pc值相同）。</li></ul><p>除了：fork成功，<strong>子进程中fork的返回值是0，父进程中fork的返回值是子进程的进程号pid</strong> 。</p></li><li><p><strong>进程组</strong>： 进程组就是多个进程的集合，其中肯定有一个组长，其进程PID等于进程组的PGID ；</p></li><li><p><strong>作业</strong>： shell<strong>分前后台</strong>来控制的不是进程而是作业（job）或者进程组（Process Group）。</p><blockquote><p>一个前台作业可以由多个进程组成，一个后台也可以由多个进程组成，shell可以运行一个前台作业和任意多个后台作业，这称为作业控制。、</p></blockquote></li><li><p><strong>会话</strong>。 一个或多个<strong>进程组的集合</strong>，<strong>一个会话可以有一个控制终端</strong>。在xshell或者WinSCP中打开一个窗口就是新建一个会话。</p></li></ul><h4 id="12-什么是守护进程、僵尸进程、孤儿进程？">12. 什么是守护进程、僵尸进程、孤儿进程？</h4><blockquote><p>参考：<a href="https://liubigbin.github.io/2016/03/11/Linux-%E4%B9%8B%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E3%80%81%E5%83%B5%E6%AD%BB%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B/">Linux 之守护进程、僵死进程与孤儿进程</a></p></blockquote><ul><li><p><strong>守护进程</strong></p><p><strong>在后台运行的，没有控制终端与之相连</strong>的进程。它<strong>独立于控制终端</strong>，周期性地执行某种任务。它不需要用户输入就能运行而且提供某种服务，不是<strong>对整个系统就是对某个用户程序</strong>提供服务。</p><ul><li>举例：常见的守护进程包括系统日志进程syslogd、 web服务器httpd、邮件服务器sendmail和数据库服务器mysqld等。</li></ul><p>一个守护进程的父进程是init进程，也是一个<u>孤儿进程</u> ，一般在系统启动时开始运行，除非强行终止，否则直到系统关机都保持运行。</p></li><li><p><strong>孤儿进程</strong></p><p>一个<strong>父进程退出，而它的一个或多个子进程还在运行</strong>，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。</p></li><li><p><strong>僵尸进程</strong></p><p>一个进程使用fork创建子进程，如果<strong>子进程退出</strong>，而父进程并没有调用wait或waitpid获取子进程的状态信息（子进程必须<strong>等到父进程捕获到了子进程的退出状态才真正结束</strong>），那么<strong>子进程的进程描述符仍然保存在系统中</strong>。这种进程称之为僵死进程。</p></li></ul><h5 id="11-1-如何避免僵尸进程？">11.1 如何避免僵尸进程？</h5><ul><li><p>通过<strong>signal(SIGCHLD, SIG_IGN</strong>)通知内核对子进程的结束不关心，由内核回收；</p><blockquote><p>如果不想让父进程挂起，可以在父进程中加入一条语句：signal(SIGCHLD,SIG_IGN); 表示父进程忽略SIGCHLD信号，该信号是子进程退出的时候向父进程发送的。</p></blockquote></li><li><p>父进程调用wait/waitpid等函数等待子进程结束，如果尚无子进程退出wait会导致父进程阻塞；</p><blockquote><p>waitpid可以通过传递WNOHANG使父进程不阻塞立即返回。</p></blockquote></li><li><p>如果父进程很忙可以用signal注册信号处理函数，在信号处理函数调用wait/waitpid等待子进程退出;</p></li><li><p>通过两次调用fork。父进程首先调用fork创建一个子进程然后waitpid等待子进程退出，子进程再fork一个孙进程后退出。这样子进程退出后会被父进程等待回收，而对于孙子进程其父进程已经退出所以孙进程成为一个孤儿进程，孤儿进程由init进程接管，孙进程结束后，init会等待回收。</p></li></ul><h2 id="4-3-socket编程">4.3 socket编程</h2><p>暂略</p><h2 id="4-4-内存管理">4.4 内存管理</h2><h4 id="1-介绍一下操作系统的堆和栈？">1.<strong>介绍一下操作系统的堆和栈？</strong></h4><ul><li><p><strong>栈内存</strong>：栈内存首先是一片内存区域，存储的都是<u>局部变量</u>，栈内存的<u>更新速度很快</u>，因为局部变量的生命周期都很短。</p><blockquote><p>局部变量：方法内的变量，for循环内部定义的也是局部变量等。</p></blockquote></li><li><p><strong>堆内存</strong>：存储的是<u><strong>数组</strong></u>和<strong>对象</strong>（其实数组就是对象），凡是new建立的都是在堆中，堆中存放的都是实体（对象）。堆里的实体虽然不会被释放，但是会被当成垃圾，Java有垃圾回收机制不定时的收取。</p></li></ul><h5 id="1-1-什么时候会栈溢出？">1.1 什么时候会栈溢出？</h5><p>栈能使用的内存是有限的，一般是 1M~8M，这在编译时就已经决定了，程序运行期间不能再改变。</p><ul><li>如果程序使用的栈内存超出最大值，就会发生栈溢出（Stack Overflow）错误，程序就崩溃了；</li><li>一般常见的情况，如<strong>递归过深</strong></li></ul><h4 id="2-介绍一下什么内存管理？常用的内存管理机制？">2. 介绍一下什么内存管理？常用的内存管理机制？</h4><ul><li><p><strong>内存管理</strong></p><p>操作系统的内存管理主要负责内存的（1）<strong>分配与回收（<strong>malloc 函数：申请内存，free 函数：释放内存），（2）另外地址转换也就是将</strong>逻辑地址转换成相应的物理地址</strong>等功能也是操作系统内存管理做的事情。</p></li><li><p><strong>常用内存管理机制</strong></p><p>简单分为<strong>连续分配管理方式</strong>和<strong>非连续分配管理方式</strong>这两种。连续分配管理方式是指为⼀个用户程序分配⼀个连续的内存空间，常见的如<strong>块式管理</strong> 。同样地，非连续分配管理方式允许⼀个程序使用的内存分在离散或者说不相邻的内存中，常见的如<strong>页式管理 和 段式管理</strong>。</p><ol><li><p><strong>块式管理</strong> ： 远古时代的计算机操系统的内存管理方式。<strong>将内存分为⼏个固定大小的块</strong>，每个块中只包含⼀个进程。如果程序运行需要内存的话，操作系统就分配给它⼀块，如果程序运行只需<br>要很小的空间的话，分配的这块内存很大⼀部分⼏乎被浪费了。这些在每个块中未被利用的空间，我们称之为碎片。</p></li><li><p><strong>页式管理</strong> ：把主存分为大小相等且固定的⼀页⼀页的形式，<strong>页较小，相对相⽐于块式管理的划分⼒度更大</strong>，提高了内存利用率，减少了碎片。页式管理通过<u>页表对应逻辑地址和物理地址</u>。</p></li><li><p><strong>段式管理</strong> ： 页式管理虽然提高了内存利用率，但是页式管理其中的页实际并无任何实际意义。段式管理把主存分为⼀段段的，<strong>每⼀段的空间⼜要⽐⼀页的空间小很多</strong> 。</p></li></ol><blockquote><p>但是，最重要的是段是有实际意义的，每个段定义了⼀组逻辑信息，例如，有主程段 MAIN、子程序段 X、数据段 D及栈段 S 等。 段式管理通过段表对应逻辑地址和物理地址。</p></blockquote><ol start="4"><li><strong>段页式管理机制</strong> 。段页式管理机制结合了段式管理和页式管理的优点。简单来说段页式管理机制就是把主存先分成若⼲段，每个段⼜分成若⼲页，也就是说 段页式管理机制中段与段之间以及段的内部的都是离散的。</li></ol></li></ul><h5 id="2-1-介绍一下逻辑地址和物理地址？">2.1 介绍一下逻辑地址和物理地址？</h5><ul><li>我们编程⼀般只有可能和逻辑地址打交道，⽐如在 C 语⾔中，指针⾥面存储的数值就可以理解成为<strong>内存⾥的⼀个地址</strong>，这个地址也就是我们说的逻辑地址，逻辑地址由操作系统决定。</li><li>物理地址指的是<strong>真实物理内存中地址</strong>，更具体⼀点来说就是内存地址寄存器中的地址。</li></ul><h5 id="2-2-操作系统在内存管理需要做什么？">2.2 操作系统在内存管理需要做什么？</h5><ul><li>内存空间的分配与回收；</li><li>从逻辑上对内存空间进行扩充；</li><li>逻辑地址与物理地址的转换；</li><li>操作系统需要提供内存保护功能。保证各进程在各自存储空间内运行，互不干扰。</li></ul><h4 id="3-介绍一下快表和多级页表？">3. 介绍一下快表和多级页表？</h4><p>在分页内存管理中，很重要的两点是：</p><ol><li>虚拟地址到物理地址的转换要快。</li><li>解决虚拟地址空间大，<strong>页表也会很大</strong>的问题。</li></ol><h5 id="快表介绍">快表介绍</h5><p>快表理解为⼀种<strong>特殊的高速缓冲存储器</strong>（Cache），其中的<strong>内容是页表的⼀部分或者全部内容</strong>。作为页表的 Cache，它的作用与页表相似，但是提高了访问速率。</p><blockquote><p>但有时快表不命中要访问两次缓存，不过总体还是提高了性能。</p></blockquote><h5 id="多级页表介绍">多级页表介绍</h5><p>引⼊多级页表的主要⽬的是为了 <u><strong>避免把全部页表⼀直放在内存中占用过多空间</strong></u>，特别是那些根本就不需要的页表就不需要保留在内存中。多级页表<strong>属于时间换空间</strong>的典型场景。</p><h4 id="4-分页机制和分段机制的共同点和区别-？">4. 分页机制和分段机制的共同点和区别 ？</h4><ol><li>共同点 ：<ul><li>分页机制和分段机制都是为了<strong>提高内存利用率，较少内存碎片</strong>。</li><li>页和段都是<strong>离散存储</strong>的，所以两者都是离散分配内存的方式。但是，每个页和段中的内存是连续的。</li></ul></li><li>区别 ：<ul><li><strong>页的大小是固定的</strong>，由操作系统决定；<strong>而段的大小不固定</strong>，取决于我们当前运行的程序。</li><li>分页仅仅是为了<strong>满⾜操作系统内存管理</strong>的需求，而<strong>段是逻辑信息的单位，在程序中可以体现为代码段，数据段</strong>，能够更好满⾜用户的需要。</li></ul></li></ol><h4 id="5-【待扩充】CPU-寻址了解吗-为什么需要虚拟地址空间">5. 【待扩充】CPU 寻址了解吗?为什么需要虚拟地址空间?</h4><ul><li><p>现代处理器使用的是⼀种称为 虚拟寻址(Virtual Addressing) 的寻址⽅式。使用虚拟寻址，<strong>CPU 需要虚拟地址翻译成物理地址</strong>，这样才能访问到真实的物理内存。</p><blockquote><p>实际上完成虚拟地址转换为物理地址转换的硬件是 CPU 中含有⼀个被称为 内存管理单元（Memory Management Unit, MMU） 的硬件。</p></blockquote></li><li><p><strong>如果直接把物理地址暴露出来的话会带来严重问题</strong>，⽐如可能对操作系统造成伤害以及给同时运行多个程序造成困难。</p></li></ul><h4 id="6-如果系统中具有快表后，那么地址的转换过程变成什么样了？">6. 如果系统中具有快表后，那么地址的转换过程变成什么样了？</h4><blockquote><p>简单来说：cup计算页号 → 快表查询是否有该页号 → 否则页表查询</p></blockquote><ol><li><strong>计算页号和页偏移量</strong>。 CPU给出逻辑地址，由某个硬件算得页号、页内偏移量；</li><li><strong>快表中查找内存块号</strong>。 将页号与快表中的所有页号进行比较，如果找到匹配的页号，则直接从中取出该页对应的内存块号，再<strong>将内存块号与页内偏移量拼接形成物理地址</strong>；</li><li><strong>页表中查找内存块号</strong>。 如果快表中查找不存在，访问内存中的页表，找到对应页表项，得到页面存放的内存块号，再将内存块号与页内偏移量拼接形成物理地址，最后，访问该物理地址对应的内存单元。</li></ol><h4 id="7-进程内存分配动态分区算法？">7. 进程内存分配动态分区算法？</h4><ol><li><p><strong>首次适应法</strong>。</p><ul><li><p><strong>算法思想</strong>：每次都从低地址开始查找，找到第一个能满足大小的空闲分区；</p></li><li><p><strong>实现方式</strong>：空闲分区以<strong>地址递增</strong>的次序排列。每次分配内存时顺序查找空闲分区链( 或空闲分[表)，找到大小能满足要求的第-一个空闲分区。</p></li><li><p><strong>优点</strong>： 综合性能最好，开销小。</p><p><img src="https://i.loli.net/2021/06/10/PEpjmDW52eqGl4f.png" alt="image-20210610231604639"></p></li></ul></li><li><p><strong>最佳适应法</strong>。</p><ul><li><strong>算法思想</strong>：为了保证当“大进程”到来时能有连续的大片空间，可以尽可能多地留下大片的空闲区,即，优先使用更小的空闲区；</li><li><strong>实现方式</strong>： 空闲分区按<strong>容量递增</strong>次序链接。每次分配内存时顺序查找空闲分区链(或空闲分区表)，找到大小能满足要求的第一个空闲分区。</li><li><strong>优点</strong>： 会有更多的大分区被保留下来，<u>更能满足大进程需求</u></li><li><strong>缺点</strong>： 产生很多太小的、难以利用的碎片，算法开销大</li></ul></li><li><p><strong>最坏适应法</strong>。</p><ul><li><strong>算法思想</strong>： 为了解决最佳适应算法的问题—即留下太多难以利用的小碎片，可以在每次分配时优先使用最大的连续空闲区，这样分配后剩余的空闲区就不会太小，更方便使用。</li><li><strong>实现方式</strong>：空闲分区按<strong>容量递减</strong>次序链接。每次分配内存时顺序查找空闲分区链(或空闲分区表)，找到大小能满足要求的第一个空闲分区。</li><li><strong>优点</strong>： 可以减少难以利用的小碎片</li><li><strong>缺点</strong>： 大分区容易被用完，不利于大进程，算法开销大</li></ul></li><li><p><strong>领近适应法</strong>。</p><ul><li><strong>算法思想</strong>： 首次适应算法每次都从链头开始查找的。这可能会导致低地址部分出现很多小的空闲分区，而每次分配查找时，都要经过这些分区，因此也增加了查找的开销。</li><li><strong>实现方式</strong>：空闲分区以<strong>地址递增</strong>的顺序排列(可排成一个<strong>循环链表</strong>)。每次分配内存时<u>从上次查找结束的位置开始</u> ，查找空闲分区链(或空闲分区表)，找到大小能满足要求的第一个空闲分区。</li><li><strong>优点</strong>： 算法开销小</li></ul></li></ol><h4 id="8-什么是内存覆盖和内存交换？">8. 什么是内存覆盖和内存交换？</h4><ul><li><strong>内存覆盖</strong><ul><li><strong>思想</strong>： 把用户空间分成为一个<strong>固定区</strong>和<strong>若干个覆盖区</strong>。将经常活跃的部分放在固定区，其余部分按照调用关系分段，首先将那些即将要访问的段放入覆盖区，其他段放在外存中，在需要调用前，系统将其调入覆盖区，替换覆盖区中原有的段。</li><li><strong>特点</strong>：<strong>打破</strong>了必须将<strong>一个进程的全部信息装入内存后才能运行</strong>的限制 。</li></ul></li><li><strong>内存交换</strong><ul><li><strong>思想</strong>： <u>内存空间紧张</u> 时，系统将内存中<strong>某些进程暂时换出外存</strong>，把外存中某些已<strong>具备运行条件的进程换入内存</strong>。</li></ul></li></ul><h2 id="4-5-虚拟内存">4.5 虚拟内存</h2><h4 id="0-什么是虚拟技术-？从时间和空间两方面来说。">0. 什么是虚拟技术 ？从时间和空间两方面来说。</h4><p>虚拟技术<strong>把一个物理实体转换为多个逻辑实体</strong> ：</p><ul><li><strong>时分复用技术</strong> ： 如多个进程能在同一个处理器上并发执行使用了时分复用技术，让<u>每个进程轮流占用处理器，每次只执行一小个时间片并快速切换</u> ；</li><li><strong>空分复用技术</strong>： <u>物理内存抽象为地址空间，每个进程都有各自的地址空间</u>。地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用到一个没有在物理内存的页时，执行页面置换算法，将该页置换到内存中。</li></ul><h4 id="1-介绍一下局部性原理吧？">1. 介绍一下局部性原理吧？</h4><p>局部性原理是虚拟内存技术的基础，正是因为程序运行具有局部性原理，才可以只装⼊部分程序到内存就开始运行。</p><p>局部性原理表现在以下两个⽅面：</p><ol><li><strong>时间局部性</strong>：如果程序中的<strong>某条指令</strong>⼀旦执行，不久以后<strong>该指令可能再次执</strong>行；如果某数据被访问过，不久以后该数据可能再次被访问。产⽣时间局部性的典型原因，是由于在程序中存在着大量的循环操作。</li></ol><blockquote><p>时间局部性是通过将近来使用的指令和数据保存到高速缓存存储器中，并使用高速缓存的层次结构实现。</p></blockquote><ol start="2"><li><strong>空间局部性</strong>：⼀旦程序访问了<strong>某个存储单元</strong>，在不久之后，其<strong>附近的存储单</strong>元也将被访问，即程序在⼀段时间内所访问的地址，可能集中在⼀定的范围之内，这是因为指令通常是顺序存放、顺序执行的，数据也⼀般是以向量、数组、表等形式簇聚存储的。</li></ol><blockquote><p>空间局部性通常是使用教大的高速缓存，并将预取机制集成到高速缓存控制逻辑中实现。</p></blockquote><p>虚拟内存技术实际上就是建⽴了 “内存⼀外存”的两级存储器的结构，利用局部性原理实现髙速缓存。</p><h4 id="2-介绍一下，什么是虚拟内存？页式存储？">2.<strong>介绍一下，什么是虚拟内存？页式存储</strong>？</h4><ul><li><p><strong>虚拟内存</strong></p><p>虚拟内存是一种存储机制，可为用户提供一个拥有很大主内存的错觉。<strong>通过将辅存的一部分作为主存</strong>来完成。在虚拟内存中，用户可以存储比可用主内存更大的进程。</p><blockquote><p>每个进程创建加载的时候，会被分配一个大小为4G的连续的虚拟地址空间，仅仅是每个进程“认为”自己拥有4G的内存。等到进程真正运行的时候，<strong>需要某些数据并且数据不在物理内存中，才会触发缺页异常，进行磁盘数据拷贝到物理内存中</strong></p></blockquote><p><img src="https://i.loli.net/2021/04/20/NO5zyG824P9FSHs.jpg" alt="img"></p></li><li><p><strong>页式存储</strong></p><p>大部分虚拟存储系统采用的是一种称为<strong>分页（paging</strong>）的技术。这种方式叫做虚拟页式存储管理。</p><ul><li><p>物理内存空间划分为固定大小的内存块，称为物理页面，或者是<strong>页框</strong>（page frame）</p></li><li><p>虚拟地址空间也划分成大小相同的块，称为虚拟页面，或者简称<strong>页面</strong>（page）</p><blockquote><p>页表：将<strong>虚拟页面映射为</strong>相应的<strong>物理页面</strong>。</p></blockquote></li></ul></li></ul><h4 id="3-虚拟内存的技术实现-？">3. 虚拟内存的技术实现 ？</h4><p>虚拟内存的实现需要建⽴在离散分配的内存管理⽅式的基础上。 虚拟内存的实现有以下三种⽅式：</p><ol><li><strong>请求分页存储管理</strong> ：建⽴在分页管理之上，为了支持虚拟存储器功能而增加了<strong>请求调页功能和页面置换功能</strong>。请求分页是⽬前最常用的⼀种实现虚拟存储器的⽅法。请求分页存储管理系统中，在作业开始运行之前，仅装⼊当前要执行的部分页即可运行。假如在作业运行的过程中发现要访问的页面不在内存，则由处理器通知操作系统按照对应的页面置换算法将相应的页面调⼊到主存，同时操作系统也可以将暂时不用的页面置换到外存中。</li><li><strong>请求分段存储管理</strong>：建⽴在分段存储管理之上，增加了<strong>请求调段功能、分段置换功能</strong>。请求分段储存管理⽅式就如同请求分页储存管理⽅式⼀样，在作业开始运行之前，仅装⼊当前要执行的部分段即可运行；在执行过程中，可使用请求调⼊中断动态装⼊要访问但⼜不在内存的程序段；当内存空间已满，而⼜需要装⼊新的段时，根据置换功能适当调出某个段，以便腾出空间而装⼊新的段。</li><li><strong>请求段页式存储管理</strong></li></ol><h4 id="4-请你介绍一下页面置换算法？">4. 请你介绍一下页面置换算法？</h4><p>当发⽣缺页中断时，如果当前内存中并没有空闲的页面，操作系统就必须在内存选择⼀个页面将其移出内存，以便为即将调⼊的页面让出空间。用来选择淘汰哪⼀页的规则叫做页面置换算法，我们可以把页<br>⾯置换算法看成是淘汰页面的规则。</p><ul><li><p><strong>OPT （最佳页面置换算法）</strong>：最佳(Optimal, OPT)置换算法所选择的被淘汰页面将是以后永不使用的，或者是在最⻓时间内不再被访问的页面,这样可以保证获得最低的缺页率。</p><blockquote><p>但由于⼈们⽬前无法预知进程在内存下的若千页面中哪个是未来最⻓时间内不再被访问的，因⽽该算法无法实现。⼀般作为衡量其他置换算法的⽅法。</p></blockquote></li><li><p><strong>FIFO（First In First Out） （先进先出页面置换算法</strong>）: 总是淘汰最先进⼊内存的页面，即选择在内存中驻留时间最久的页面进行淘汰。</p></li><li><p><strong>LRU （Least Currently Used）（最近最久未使用页面置换算法</strong>）：LRU算法赋予每个页面⼀个访问字段，用来记录⼀个页面⾃上次被访问以来所经历的时间 T，当须淘汰⼀个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。</p></li><li><p><strong>LFU （Least Frequently Used）（最少使用页面置换算法</strong>）: 该置换算法选择在前时期使用最少的页面作为淘汰页。</p></li></ul><h4 id="5-你怎么理解操作系统里的内存碎片，有什么解决办法？">5.<strong>你怎么理解操作系统里的内存碎片，有什么解决办法</strong>？</h4><p>内存碎片分为：内部碎片和外部碎片。</p><ul><li><p><strong>内部碎片</strong>： 已经<strong>被分配</strong>出去（能明确指出属于哪个进程）却<strong>不能被利用</strong>的内存空间；</p><blockquote><p><strong>内存泄漏</strong>：不再会被使用的<strong>对象</strong>的内存不能被<strong>回收</strong> 。</p></blockquote></li><li><p><strong>外部碎片</strong>： 还<strong>没有被分配</strong>出去（不属于任何进程），但由于<strong>太小了无法分配</strong>，给申请内存空间的新进程的内存空闲区域。</p></li></ul><h4 id="6-什么是内存抖动？">6. 什么是内存抖动？</h4><ul><li><strong>现象</strong>：刚刚换出的页面马上又要换入内存，刚刚换入的页面马上又要换出外存，这种<strong>频繁的页面调度行为</strong>称为抖动，或颠簸；</li><li><strong>原因</strong>： 程频繁访问的页面数目高于可用的物理块数(分配给进程的物理块不够) ；</li><li><strong>解决</strong>： 分配更多的物理块</li></ul><h2 id="4-6-并发和死锁">4.6 并发和死锁</h2><h4 id="0-介绍几种典型的锁？">0. 介绍几种典型的锁？</h4><ol><li><strong>读写锁</strong>。 可以同时读，但写必须互斥，只允许一个写；</li><li><strong>互斥锁</strong>。 一次只能一个线程拥有锁，其它只能等待；</li><li><strong>条件变量</strong>：  互斥锁一个明显的缺点是他只有两种状态：锁定和非锁定；而条件变量<strong>通过允许线程阻塞和等待另一个线程发送信号</strong>的方法弥补了互斥锁的不足；</li><li><strong>自旋锁</strong>。 如果进线程无法取得锁，进线程不会立刻放弃CPU时间片，而是一直循环尝试获取锁，直到获取为止。</li></ol><h4 id="1-【重点】什么是线程死锁？什么情况下会发生死锁？解决死锁的策略有哪些？">1. 【<strong>重点</strong>】<strong>什么是线程死锁？什么情况下会发生死锁？解决死锁的策略有哪些</strong>？</h4><ul><li><p><strong>什么是死锁</strong></p><p>死锁是指<u>两个或两个以上的进程（线程）在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象</u>，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程（线程）称为死锁进程（线程）。</p></li><li><p><strong>发生死锁的条件</strong></p><ol><li><strong>互斥</strong>：一个资源只能给一个进程使用；</li><li><strong>占有并等待</strong>：进程持有资源并申请新资源，在申请到需要的资源之前，<u>已有的资源不释放</u>；</li><li><strong>不可剥夺</strong>：进程申请到的资源在使用完之前，不可以被其他进程使用；</li><li><strong>循环等待</strong>：各个进程的资源请求形成首尾连接循环等待。</li></ol></li><li><p><strong>解决方法：预防，避免，检测与恢复三种</strong></p><ol><li><strong>预防：破坏死锁会发生的四个条件</strong><ul><li>破坏互斥：这个条件我们没有办法破坏，因为我们用锁本来就是想让他们互斥的</li><li><strong>破坏请求和保持</strong>：实行资源预先分配策略。即进程在运行前一次性地向系统申请它所需要的全部资源；</li><li><strong>破坏不剥夺条件</strong> ：占用部分资源的线程进⼀步申请其他资源时，<strong>如果申请不到</strong>，可以<strong>主动释放它占有的资源</strong>；</li><li><strong>破坏循环等待</strong>：资源分类标号，进行有序分配。</li></ul></li><li><strong>避免</strong>： <u>它不限制进程有关申请资源的命令</u>，而是对进程所发出的每一个申请资源命令加以<strong>动态地检查</strong>，并根据检查结果决定是否进行资源分配<ul><li><strong>安全序列</strong>：找到一种能让进程安全执行完的有序序列<code>&#123;P1，P2，...，Pn&#125;</code></li><li><strong>银行家算法</strong>：系统在为进程分配资源之前，首先计算此次资源分配的安全性，<strong>如果是安全的，则进行分配</strong>；如果这次分配会导致进入不安全状态，不进行分配。</li></ul></li><li><strong>恢复</strong>： 用<u>资源分配图、进程等待图</u>来协助这种检测出死锁，然后进行恢复。<ul><li>系统重新启动，但代价很大</li><li><strong>撤消参与死锁的全部或部分进程，剥夺资源</strong></li></ul></li></ol></li></ul><h5 id="1-1-什么时候需要使用分布式锁？">1.1 <strong>什么时候需要使用分布式锁</strong>？</h5><ul><li>在<strong>单体应用的</strong>时候，如果<strong>多个线程要访问共享资源的时候，我们通常线程间加锁的机制</strong>，在某一个时刻，只有一个线程可以对这个资源进行操作，其他线程需要等待锁的释放，Java中也有一些处理锁的机制，比如synchronized。</li><li>而到了<strong>分布式的环境</strong>中，当<strong>某个资源可以被多个系统访问使用到的时候（例如，有多个客户端需要访问并操作同一个资源，还需要保持这个资源一致性的时候，就需要使用【分布式锁）</strong>，为了保证大家访问这个数据是一致性的，那么就要求再同一个时刻，只能被一个系统使用，这时候<strong>线程之间的锁机制就无法起到作用</strong>了，因为分布式环境中，系统是会部署到不同的机器上面的，那么就需要【分布式锁】了。</li></ul><h4 id="2-（待补充）请你解释一下，通常系统CPU比较高是什么原因？">2. （待补充）<strong>请你解释一下，通常系统CPU比较高是什么原因</strong>？</h4><ol><li>首先查看是哪些进程的CPU占用率最高</li></ol><h4 id="3-说一下NIO，BIO，AIO区别">3.<strong>说一下NIO，BIO，AIO区别?</strong></h4><blockquote><p>参考：<a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/basis/IO%E6%A8%A1%E5%9E%8B.md">JAVaGuide</a></p></blockquote><p>【<strong>BIO（同步阻塞）</strong>】</p><ul><li><p><strong>BIO</strong>：同步阻塞 IO 模型中，应用程序发起 read 调用后，会一直阻塞，直到在内核把<u> </u>。</p><img src="https://i.loli.net/2021/05/06/HqJyg2Ykxtm6Wba.png" alt="图源：《深入拆解Tomcat & Jetty》" style="zoom: 67%;" /></li></ul><p>【<strong>NIO（同步非阻塞）</strong>】</p><p>NIO 本身是基于 <u>事件驱动</u> 的思想来实现的，其目的就是解决 BIO 的大并发问题：</p><ul><li>BIO 模型中，<strong>如果需要并发处理多个 I/O 请求，那就需要多线程来支持</strong>；</li><li><strong>IO 多路复用模型</strong>中，线程首先发起 <u>select 调用，询问内核数据是否准备就绪</u>，等内核把数据准备好了，用户线程再发起 <strong>read 调用</strong>。<strong>read 调用的过程（数据从内核空间-&gt;用户空间）还是阻塞的</strong>。</li></ul><img src="https://i.loli.net/2021/05/06/9iJE3IaVOW2xAwh.png" alt="img" style="zoom:67%;" /><p>【<strong>AIO（异步非阻塞）</strong>】</p><blockquote><p>Java 7 中引入了 NIO 的改进版 NIO 2,它是异步 IO 模型 。</p></blockquote><p><strong>AIO：</strong> 异步非阻塞无需一个线程去轮询所有IO操作的状态改变，在相应的状态改变后，系统会通知对应的线程来处理。</p><blockquote><p>异步 IO 是基于事件和<strong>回调机制</strong>实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p></blockquote><p><img src="https://i.loli.net/2021/05/06/uIcCQeBUliqT2gk.png" alt="img" style="zoom:67%;" />0.</p><h4 id="4-【重点】介绍一下select，poll，epoll-原理？">4. 【重点】<strong>介绍一下select，poll，epoll 原理？</strong></h4><blockquote><p><strong>参考</strong></p><ol><li><a href="https://blog.csdn.net/jiejiemcu/article/details/107083724">select、poll、epoll的原理与区别</a></li></ol></blockquote><h5 id="4-1-从阻塞I-O-非阻塞I-O说起">4.1 从阻塞I/O &amp; 非阻塞I/O说起</h5><ul><li><p><strong>阻塞I/O</strong></p><blockquote><p>在linux中，默认情况下所有的socket都是阻塞的。</p></blockquote><p><img src="https://i.loli.net/2021/05/17/aJFOtPvy4xiMKkI.png" alt="image-20210517125922790"></p><ol><li>当用户进程调用了<code>read()/recvfrom()</code>等系统调用函数，它会进入内核空间中；</li><li>当这个网络I/O没有数据的时候，内核就要等待数据的到来，此时<strong>用户进程被阻塞</strong>；</li><li>当内核空间的数据准备好了，它就会将数据从<strong>内核空间中拷贝到用户空间</strong>；</li><li>用户进程才解除阻塞的的状态，重新运行读取数据。</li></ol></li><li><p><strong>非阻塞I/O</strong></p><blockquote><p>linux下，可以通过设置socket使其变为非阻塞模式，这种情况下，当内核空间并无数据的时候，它会<u>马上返回结果而不会阻塞</u>。</p></blockquote><p><img src="https://i.loli.net/2021/05/17/hW2DtsGBiU8AnHN.png" alt="image-20210517130232559"></p><ol><li>当用户进程调用了<code>read()/recvfrom()</code>等系统调用函数，它会进入内核空间中；</li><li>如果内核空间中的数据还没有准备好，那么它并不会阻塞用户进程，而是<strong>立刻返回一个error</strong>；</li><li>对于应用进程来说，它发起一个<code>read()</code>操作后，并不需要等待，那么它可以再次调用read()/recvfrom()等函数；</li><li>当内核空间的数据准备好了，它就会将数据从内核空间中拷贝到用户空间；</li><li>用户进程才解除阻塞的的状态，重新运行读取数据。</li></ol></li></ul><blockquote><p>多路复用I/O就是我们说的<code>select，poll，epoll</code>等操作，复用的好处就在于<strong>单个进程</strong>就可以同时处理<strong>多个</strong>网络连接的I/O，能实现这种功能的原理就是<code>select、poll、epoll</code>等函数会不断的<strong>轮询</strong>它们所负责的所有<code>socket</code>，当某个<code>socket</code>有数据到达了，就通知用户进程。</p></blockquote><h5 id="4-2-select原理">4.2 select原理</h5><blockquote><p>更加深刻对比理解：<a href="https://www.cnblogs.com/skyfsm/p/7079458.html">Linux编程之select</a></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span> <span class="params">(<span class="keyword">int</span> n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>select函数监视的文件socket描述符分3类，分别是writefds、readfds、和exceptfds；</li><li>调用后select<strong>函数会阻塞（不是线程）</strong>，直到有描述符就绪（有数据 <u>可read、可write、except、超时timeout</u>），函数返回。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">select(socket);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">sockets = select(); <span class="comment">// 还是要从内核拷贝到用户</span></span><br><span class="line"><span class="keyword">for</span>(socket in sockets) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(can_read(socket)) </span><br><span class="line">&#123;</span><br><span class="line">read(socket, buffer);</span><br><span class="line">process(buffer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细执行原理如下：</p><ol><li><p>用户首先将需要进行IO操作的<strong>socket添加到select</strong>中，然后<strong>阻塞函数select（不是线程）等待系统调用返回</strong>；</p></li><li><p><strong>当数据到达时，socket被激活，select函数返回</strong>，会唤醒其等待队列上睡眠的内核进程，即在<strong>socket可读写时唤醒</strong>，或者在<strong>超时</strong>后唤醒；</p><blockquote><p>每次调用<code>select</code>查看fd，都需要把fd集合拷贝进行系统调用<strong>陷入内核态</strong> 。</p></blockquote></li><li><p>返回<code>select()</code>函数的调用结果给用户进程，<strong>返回就绪socket描述符的数目</strong>，超时返回0，出错返回-1；</p></li><li><p>在select()函数返回后<strong>还是需要轮询</strong>去找到就绪的socket描述符的（<u>将此前传入内核空间的<code>fd_set</code>拷贝到用户空间</u>），此时用户进程才可以去操作socket；</p></li><li><p>进程调用<code>read() / recvfrom()</code> 读取数据 。</p></li></ol><p><strong>select优点</strong>：</p><blockquote><p>从流程上来看，使用select函数进行IO请求和<strong>同步阻塞模型</strong>没有太大的区别，甚至还多了添加监视socket，以及调用select函数的额外操作，效率更差。</p><p><strong>那为什么还要使用select？</strong></p></blockquote><ul><li>使用select以后最大的优势是用户可以在一<strong>个线程内同时处理多个socket</strong>的IO请求。用户可以注册多个socket，然后不断地调用select读取被激活的socket，即可达到在同一个线程内同时处理多个IO请求的目的；</li><li>而在<strong>同步阻塞模型</strong>中，必须通过<strong>多线程的方式才能达到这个目的</strong>。</li></ul><p><strong>select缺点</strong>：</p><ol><li><p><strong>描述符数量</strong>：<code>select</code>支持的文件描述符数量太小了，默认是<code>1024</code>  ；</p></li><li><p><strong>系统开销</strong>：每次调用<code>select</code>都需要把fd集合拷贝进行系统调用<strong>陷入内核态</strong>，这个开销在fd很多时会很大 ；</p></li><li><p><strong>二次轮询</strong>：<code>select</code>需要二次查询拷贝所有文件描述fd_set进行遍历查看是否有描述符准备就绪。</p></li></ol><h5 id="4-3-poll原理">4.3 poll原理</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span> <span class="params">(struct pollfd *fds, <span class="keyword">unsigned</span> <span class="keyword">int</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> fd; <span class="comment">/* file descriptor */</span></span><br><span class="line">    <span class="keyword">short</span> events; <span class="comment">/* requested events to watch */</span></span><br><span class="line">    <span class="keyword">short</span> revents; <span class="comment">/* returned events witnessed */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不同与select使用三个位图来表示三个fdset的方式，poll使用一个 <strong>pollfd指针</strong>实现。</p><blockquote><p>poll使用<strong>链表</strong>维护这些socket描述符，而select使用的是<strong>数组</strong>（位图）。</p></blockquote><p>其他的都差不多和select()函数一样，poll()函数返回后，需要轮询pollfd来获取就绪的描述符，根据描述符的状态进行处理，<u>但是poll没有最大文件描述符数量的限制</u>。</p><p><strong>poll缺点</strong>：</p><p>解决了selec第一个缺点（文件描述符数量太少），但是依旧存在后面两个缺点。</p><ol start="2"><li><p><strong>系统开销</strong>：每次调用<code>poll</code>都需要把fd集合拷贝进行系统调用<strong>陷入内核态</strong>，这个开销在fd很多时会很大 ；</p></li><li><p><strong>二次轮询</strong>：<code>poll</code>需要二次查询拷贝所有文件描述fd_set进行遍历查看是否有描述符准备就绪。</p></li></ol><h5 id="4-3-epoll原理">4.3 epoll原理</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// epoll只有epoll_create()、epoll_ctl()、epoll_wait() 3个系统调用函数。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>epoll_create</code></p><p>创建一个epoll文件描述符的epfd（或者称之为句柄）, <strong>epoll使用一个epfd文件描述符管理多个socket描述符</strong>。</p><blockquote><p>当创建好epoll句柄后，它就是会占用一个fd值，必须调用close()关闭，否则可能导致fd被耗尽 。</p></blockquote></li><li><p><code>epoll_ctl</code></p><p>该函数用于控制某个epoll文件描述符上的事件，可以注册事件，修改事件，以及删除事件。相关参数：</p><blockquote><p>使用<strong>红黑树</strong>对监视的文件描述符进行：添加、修改、删除等。</p></blockquote><ul><li><p><code>epdf</code>：由epoll_create()函数返回的epoll文件描述符（句柄）；</p></li><li><p><code>op</code> ： op是操作的选项，注册要监听的目标socket描述符fd到epoll句柄中 ；修改epoll句柄已经注册的fd的监听事件；从epoll句柄删除已经注册的socket描述符 ；</p></li><li><p><code>fd</code>：指定监听的socket描述符；</p></li><li><p><code>event</code>：事件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">epoll_data</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span>        *ptr;</span><br><span class="line">    <span class="keyword">int</span>          fd;</span><br><span class="line">    <span class="keyword">uint32_t</span>     u32;</span><br><span class="line">    <span class="keyword">uint64_t</span>     u64;</span><br><span class="line">&#125; <span class="keyword">epoll_data_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span>     events;      <span class="comment">/* Epoll events */</span></span><br><span class="line">    <span class="keyword">epoll_data_t</span> data;        <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>epoll_wait()</code></p><p>epoll_wait()函数的作用就是等待监听的事件的发生，<strong>类似于调用select()函数</strong>。 相关参数如下：</p><blockquote><p>函数的返回值表示需要处理的事件数目，如返回0表示已超时。</p></blockquote><ul><li><code>events</code>：用来从内核得到事件的集合。</li><li><code>maxevents</code> ：告之内核这个events有多大，这个 maxevents的值不能大于创建epoll_create()时的指定的size。</li><li><code>timeout</code>：超时时间。</li></ul></li></ul><p><strong>epoll高效运行过程</strong></p><blockquote><p>参考：<a href="https://www.jianshu.com/p/31cdfd6f5a48">彻底搞懂epoll高效运行的原理</a></p></blockquote><ol><li><p>执行<code>epoll_create</code>会在内核的高速cache区中建立一颗红黑树以及就绪链表(该链表存储已经就绪的文件描述符)。接着用户执行<code>epoll_ctl</code> 函数添加文件描述符会在红黑树上增加相应的结点。</p><blockquote><p>select：创建3个文件描述符集并<u>拷贝到内核</u>中 ; poll：将传入的struct pollfd结构体数组<u>拷贝到内核</u>中进行监听。</p></blockquote></li><li><p>调用<code>epoll_wait</code> <strong>阻塞，等待可读事件</strong>；</p></li><li><p>内核在检测到满足条件的socket描述符会调用<strong>回调函数</strong> ，回调函数将文件描述符<strong>放在就绪链表</strong>中 ；</p><blockquote><p>而select/poll 都需要 ，遍历所有文件描述符fd_set 。</p><p>而执行epoll_ctl的add操作时，不仅将文件描述符放到红黑树上，而且也注册了回调函数，只需调用回调函数。</p></blockquote></li><li><p>epoll_wait只用观察就绪链表中有无数据即可，最后将链表的数据<strong>返回给读写事件数组events</strong> &amp;<strong>返回就绪的数量</strong>，只用<strong>遍历events</strong>依次处理即可。</p><blockquote><p>这里返回的文件描述符是通过<strong>mmap让内核和用户空间共享同一块内存</strong>实现传递的，减少了不必要的拷贝。</p><p>而select/poll <u>只返回socket就绪数目</u>， 还需要将<strong>所有的文件描述符再次从内核→用户</strong>，遍历就绪的socket文件描述符。</p></blockquote></li></ol><h5 id="4-4-select，poll，epoll-各自区别？">4.4 select，poll，epoll 各自区别？</h5><blockquote><p>不错的文章：<a href="https://www.codenong.com/cs105364662/">https://www.codenong.com/cs105364662/</a></p></blockquote><p><strong>相同点</strong>：</p><ul><li><p>select，poll，epoll 都是 IO 多路复用的机制（NIO？yes）；</p><blockquote><p>IO 多路复用的本质是通过一种机制，让<strong>单个进程可以监视多个描述符</strong>，当发现某个描述符就绪之后，能够通知程序进行相应的操作。</p></blockquote></li><li><p>select，poll，epoll 都是同步 IO 。</p></li></ul><p><strong>不同点</strong>：</p><img src="https://i.loli.net/2021/05/17/xj2ncf8VLbAGrwh.png" alt="image-20210517125057917" style="zoom: 80%;" /><ol><li><strong>IO 效率</strong>：（1）select 只知道<u>有 IO 事件发生，却不知道是哪几个流</u>，只能采取轮询所有流（ fd_set 集合）的方式，故其具有 O(n) 的无差别轮询复杂度，处理的流越多，无差别轮询时间就越长；（2）poll 与 select 并无区别，它的时间复杂度也是O(n)；（3）epoll 会将哪个流发生了怎样的 IO 事件通知我们（当描述符就绪时，<u>系统注册的回调函数会被调用</u>，将就绪描述符放到 readyList 里面），<strong>它是事件驱动的</strong>，其时间复杂度为 O(1)；</li><li><strong>操作方式</strong>：select 和 poll 都是采取遍历的方式，而 epoll 则是采取了回调的方式；</li><li><strong>底层实现</strong>：select 的底层实现为数组，poll 的底层实现为链表；而 epoll 的底层实现为红黑树；</li><li><strong>最大连接数</strong>：select 的最大连接数为 1024 或 2048；而 poll 和 epoll 是无上限的；</li><li><strong>对描述符的拷贝</strong>：select 和 poll 每次被调用时都会把描述符集合从用户态拷贝到内核态，而 epoll 在调用 epoll_ctl 时会拷贝进内核并保存，之后每次 epoll_wait 时不会拷贝；</li><li><strong>性能</strong>：<u>epoll 在绝大多数情况下性能远超 select 和 poll</u>，但在连接数少并且连接都十分活跃的情况下，select 和 poll 的性能可能比 epoll 好，因为 epoll 的通知机制需要很多函数回调 。</li></ol><h5 id="4-5-ET-LT-模式介绍？各自优缺点？">4.5 ET , LT 模式介绍？各自优缺点？</h5><blockquote><p>参考：<a href="https://cloud.tencent.com/developer/article/1636224">https://cloud.tencent.com/developer/article/1636224</a></p></blockquote><ul><li><p><strong>边缘触发模式</strong>（<strong>E</strong>dge <strong>T</strong>rigger，ET），只有一个事件从无到有才会触发；</p><blockquote><ol><li>低电平 =&gt; 高电平 。</li></ol></blockquote></li><li><p><strong>水平触发模式</strong>（<strong>L</strong>evel <strong>T</strong>rigger，LT），一个事件只要有，就会一直触发。</p><blockquote><ol><li>低电平 =&gt; 高电平 ; 2. 处于高电平状态</li></ol></blockquote></li><li><p><strong>举例说明</strong></p><ul><li><strong>socket 的读事件</strong><ul><li><strong>LT模式</strong>，只要 socket 上有未读完的数据，就会一直产生 EPOLLIN 事件；</li><li><strong>ET模式</strong>，socket 上每新来一次数据就会触发一次，如果上一次触发后，<strong>未将 socket 上的数据读完，也不会再触发</strong>，除非再新来一次数据。</li></ul></li><li><strong>对于 socket 写事件</strong><ul><li><strong>LT模式</strong>，如果 socket 的 TCP 窗口一直不饱和，会一直触发 EPOLLOUT 事件；</li><li><strong>ET模式</strong>，只会触发一次，除非 TCP 窗口由不饱和变成饱和再一次变成不饱和，才会再次触发 EPOLLOUT 事件。</li></ul></li></ul></li><li><p><strong>优缺点</strong></p><ul><li>使用 LT 模式，我们可以自由决定<strong>每次收取多少字节（对于普通 socket）或何时接收连接</strong>（对于侦听 socket），但是可能会<strong>导致多次触发</strong>；</li><li>使用 ET 模式，我们必须<strong>每次都要将数据收完</strong>（对于普通 socket）或必须理解调用 accept 接收连接（对于侦听socket），其<strong>优点是触发次数少</strong>。</li></ul></li></ul><h4 id="5-操作系统底层是怎么实现原子操作的？">5. 操作系统底层是怎么实现原子操作的？</h4><p>处理器使用基于对<strong>缓存加锁</strong>或<strong>总线加锁</strong>的方式，来实现多处理器之间的原子操作。</p><ol><li><p><strong>总线锁</strong>： 处理器提供的一个LOCK＃信号，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住，那么该处理器<strong>可以独占共享内存</strong>；</p><blockquote><p><strong>总线锁定把CPU和内存之间的通信锁住了</strong>，这使得锁定期间，其他处理器不能操作其他内存地址的数据</p></blockquote></li><li><p><strong>缓存锁</strong>：相比总线锁，缓存锁即降低了锁的力度。核心机制是基于<u>缓存一致性协议</u>来实现的。</p><blockquote><p>详细参考：<a href="https://www.jianshu.com/p/06717ac8312c">JMM基础（总线锁、缓存锁、MESI缓存一致性协议、CPU 层面的内存屏障）</a></p></blockquote></li></ol><h2 id="4-7-其它">4.7 其它</h2><h4 id="1-常见的磁盘调度算法？">1. 常见的磁盘调度算法？</h4><p>读写一个磁盘块的时间的影响因素有：</p><ul><li>旋转时间（主轴转动盘面，使得磁头移动到适当的扇区上）</li><li>寻道时间（制动手臂移动，使得磁头移动到适当的磁道上）</li><li>实际的数据传输时间</li></ul><p>其中，<strong>寻道时间最长</strong>，因此磁盘调度的主要目标是使磁盘的平均寻道时间最短。</p><ol><li><p><strong>先来先服务</strong>。 按照磁盘请求的顺序进行调度。</p><ul><li><strong>优点</strong>：公平、简单；</li><li><strong>缺点</strong>：未对寻道做任何优化，使平均寻道时间可能较长。</li></ul></li><li><p><strong>最短寻道优先</strong>。 优先调度与当前磁头所在磁道距离最近的磁道。</p><ul><li><strong>优点</strong>： 平均寻道时间比较低；</li><li><strong>缺点</strong>：不公平，如果新到达的磁道请求总是比一个在等待的磁道请求近，那么在等待的磁道请求会一直等待下去。</li></ul></li><li><p><strong>电梯扫描算法</strong>。 电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。</p><ul><li><strong>优点</strong>： 性能较好，同时不会存在饥饿现象。</li></ul></li></ol><h4 id="2-服务器高并发的解决方案你知道多少？">2. 服务器高并发的解决方案你知道多少？</h4><ul><li><strong>应用数据与静态资源分离</strong>：将静态资源（图片，视频，js，css等）单独保存到专门的静态资源服务器中，在客户端访问的时候从<strong>静态资源服务器中返回静态资源</strong>，从<strong>主服务器中返回应用数据</strong>；</li><li><strong>客户端缓存</strong> ：例如先生成静态页面，然后用ajax异步请求获取动态数据；</li><li><strong>集群和分布式</strong> ：使用服务器集群和分布式架构，使得原本属于一个服务器的计算压力分散到多个服务器上。同时加快请求处理的速度；</li><li><strong>反向代理</strong>： 在访问服务器的时候，服务器通过别的服务器获取资源或结果返回给客户端。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校招 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（三）_计算机基础_计算机网络</title>
      <link href="/p/46361/"/>
      <url>/p/46361/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我的校招记录：<a href="https://www.hwh.zone/p/29708/">校招笔记（零）_写在前面</a> ，以下是校招笔记总目录。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><h1>三、计算机网络</h1><h2 id="3-1-ISO-OSI模型-和-TCP-IP-模型">3.1 ISO/OSI模型  和 TCP/IP 模型</h2><h4 id="1-请你简要介绍一下TCP-IP-五层协议-和-ISO-OSI七层协议？">1.<strong>请你简要介绍一下TCP/IP 五层协议 和 ISO/OSI七层协议？</strong></h4><p><img src="https://uploadfiles.nowcoder.com/images/20190814/980266035_1565787665824_1ABB2DC3D76311944FFDBE9980FBAADD" alt="img"></p><ul><li><p><strong>应用层</strong>：为用户的<strong>应用程序</strong>（如：电子邮件、文件传输和仿真终端）<u><strong>*提供网络服务</strong></u>；</p></li><li><p><strong>表示层</strong>： 可以确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取；</p></li><li><p><strong>会话层</strong>：  通过运输层（端口号：传输端口与接收端口）建立数据传输的通路，主要在你的系统之间发起会话或者接受会话请求；</p></li><li><p><strong>运输层:</strong> 任务是为两台主机中<strong>进程之间的通信</strong>提供通用的<u><strong>*数据传输服务</strong></u>，传输的是<strong>报文段（tcp）/用户数据报（udp）</strong>；</p><blockquote><p>复用：多个应用层进程可同时使用下面运输层的服务。<br>分用：运输层把收到的信息分别交付上面应用层中的相应进程。</p></blockquote></li><li><p><strong>网络层</strong>： 为主机间<u><strong>*提供通信服务</strong></u>。在发送数据时，网络层把运输层的报文段或用户数据报封装成分组或包进行传送。在TCP/IP体系中，由于网络层使用IP协议，因此分组也叫做IP数据报，或简称为<strong>数据报</strong></p></li><li><p><strong>数据链路层（忘</strong>）： 两台主机通信，总是在<strong>一段一段的链路</strong>上传送的，这就需要需要专门的链路层的协议。在两个相邻结点之间传送数据时，数据链路层将网络层交下来的<u><strong>*IP数据报组装成帧</strong></u>，在两个相邻结点间的链路上传送帧。每一帧包括数据和必要的控制信息。</p></li><li><p><strong>物理层</strong>：主要作用是<u>传入比特流（就是由1、0转化为电流强弱来进行传输，到达目的地后再转化为1、0）</u>，定义物理设备标准（例如网线的接口类型、光线的接口类型、各种传输介质的传输速率）。</p></li></ul><h4 id="2-请你简要介绍一下各层的协议？">2.<strong>请你简要介绍一下各层的协议？</strong></h4><ul><li><p><strong>物理层</strong>：暂无</p></li><li><p><strong>（<u>快手</u>）数据链路层</strong>：数据链路层主要是负责传输数据，</p><ul><li><p><strong>PPP（点到点协议</strong>）：在<strong>点对点</strong>连接上传输多协议数据包提供了一个标准方法，PPP 最初设计是为<strong>两个对等节点</strong>之间的 IP <strong>流量传输</strong>提供一种封装协议。这种链路提供<strong>全双工</strong>操作，并按照顺序传递数据包。</p><blockquote><p>设计目的主要是用来通过拨号或专线方式建立点对点连接发送数据，使其成为各种主机、网桥和路由器之间简单连接的一种共通的解决方案。</p></blockquote></li><li><p><strong>以太网（Ethernet)</strong>：</p></li><li><p><strong>CSMA/CD 协议</strong>： 冲突检测的载波监听多路访问技术(载波监听多点接入/碰撞检测)。</p><blockquote><p>许多计算机以<strong>多点接入</strong>的方式连接<strong>在一根总线</strong>上，每个主机都必须不停地监听信道。发送前监听，如果忙则等待，如果空闲则发送。</p><p>若检测到信道有干扰信号，则表示产生了碰撞，于是就要停止发送数据，计算出退避等待时间，然后使用 CSMA 方法继续尝试发送。</p></blockquote></li></ul></li><li><p><strong>网络层</strong>： <a href="https://www.hhcycj.com/post/item/491.html">可参考</a></p><p><strong>IP</strong>：网络协议，非常重要的中间层协议，TCP和UDP必须基于IP工作</p><p><strong>ICMP</strong>：非常重要的中间层协议，用于在 <u>IP主机、路由器</u> 之间传递控制消息</p><p><strong>IGMP</strong>：网络组消息协议，用来在<u>IP主机</u>和与其<strong>直接相邻的<u>组播路由器</u>之间</strong>建立、维护组播组成员</p><p><strong>ARP</strong>：地址解析协议，建立<code>IP→MAC</code>地址映射表</p><p><strong>RARP</strong>：反向地址解析协议，某个网络设备的MAC物理地址转换为IP地址</p></li><li><p><strong>运输层:TCP(Transmission Control Protocol)</strong> 面向连接的，数据传输的单位是<u><strong>报文段</strong></u>，能够提供可靠的交付。</p><p><strong>UDP(User Datagram Protocol)</strong> ：无连接的，数据传输的单位<strong>是<u>用户数据报</u>，不保证提供可靠的交付</strong>，只能提供“尽最大努力交付”</p></li><li><p><strong>应用层</strong>：如支持万维网应用的<strong>HTTP</strong>协议，支持电子邮件的<strong>SMTP</strong>协议，支持文件传送的<strong>FTP</strong>协议，DNS，POP3，SNMP，Telnet等等。</p></li></ul><h5 id="2-1-RARP-工作原理？">2.1 RARP 工作原理？</h5><p>RARP发出要反向解释的物理地址并希望返回其IP地址，应答包括能够提供所需信息的RARP服务器发出的IP地址。</p><blockquote><p>网络上的每台设备都会有一个独一无二的硬件地址，通常是由设备厂商分配的MAC地址。</p></blockquote><ol><li>主机从网卡上读取MAC地址，然后在网络上发送一个RARP请求的广播数据包；</li><li><strong>RARP服务器</strong>收到了<strong>RARP请求数据包</strong>，<strong>为其分配IP地址</strong>，并将<strong>RARP回应发送</strong>给主机；</li><li>主机收到RARP回应后，就使用得到的IP地址进行通讯。</li></ol><h4 id="3-端口在哪一层？有效端口范围？">3. 端口在哪一层？有效端口范围？</h4><p>端口在<strong>传输层</strong>。传输层以下的包封装过程：</p><ul><li>数据报在传输层：加源端口号和目的端口号；</li><li>在网络层加上：源ip和目的ip ；</li><li>在数据链路层转化成：数据桢进行校验；</li><li>在物理层变成信号（电、光、等信号）发送出去。</li></ul><p>UDP和TCP报头使用<strong>两个字节存放端口号</strong>，端口一共有一共有<strong>65535</strong>个。</p><ul><li>知名端口号从0~1023，比如其中HTTP是80，FTP是20（数据端口）、21（控制端口） ；</li><li>动态端口的范围是从1024~65535。</li></ul><h2 id="3-2-运输层">3.2 运输层</h2><h4 id="0-TCP报文头？UDP报文头？">0. TCP报文头？UDP报文头？</h4><blockquote><p>参考：<a href="http://st233.com/blog.php?id=30">IP、TCP、UDP报文头说明</a></p></blockquote><ul><li><p><strong>TCP报文头</strong></p><p><img src="https://i.loli.net/2021/06/11/RtnwTmysWBvVlPD.png" alt="img"></p><ul><li><p><strong>来源端口</strong>：向目标主机指明接入他的主机所使用的端口号 用于目标主机回应</p></li><li><p><strong>目标端口</strong>：指明要连接的目标主机的端口号</p><blockquote><p>从这也可以看书，端口占16bit，故范围是0~65535。</p></blockquote></li><li><p><strong>顺序号：数据包编号</strong>， 表明发送的数据包的顺序 。其值通常应该为<code>上次发送包中的顺序号+1</code> ，若该数据包是整个TCP连接中的第一个包(SYN包) 则该值随意(通常随机)</p></li><li><p><strong>确认号</strong>：通常该值是<code>接受到的顺序号+1</code> ，若该数据包是整个TCP连接中的第一个数据包(SYN包) 则该值随意(通常为0)</p></li><li><p><strong>首部长度</strong>：TCP头长度 。表明包好多少个32Bit 包括可选头(如果有) 值为TCP头大小除以4 ：</p><ul><li>如：没有可选头TCP头为20字节 则该值为5</li></ul></li><li><p><strong>标志位</strong>：</p></li><li><ul><li>紧急标志位(URG)：开启时表明此数据包处于紧急状态应该优先处理</li><li>确认标志位(ACK)：开启时表明确认号有效 否则忽略确认号</li><li>推送标志位(PSH)：开启时表明应该尽快交付给应用进程 而不必等到缓存区填满才推送</li><li>复位标志位(RST)：开启时表明TCP连接出现连接出现错误 数据包非法拒绝连接</li><li>同步标志位(SYN)：开启时表明一个连接的请求或者接受报文</li><li>终止标志位(FIN)：开启时表明释放一个连接</li></ul></li><li><p><strong>窗口大小</strong>：表示期望接受到的每个数据包字节数</p></li><li><p><strong>校验和</strong>：该值为TCP报文头括数据部分中每16Bit的二进制反码求和</p></li><li><p><strong>紧急指针</strong>：若指定该值 他应该是一个偏移量 该值加上顺序号表示紧急数据最后一个字节的顺序号</p></li><li><p><strong>可选字段</strong>：包含最大载荷与窗口比例等信息 注：若使用该字段则长度必须为32Bit的倍数 不足则填充0</p></li></ul></li><li><p><strong>UDP报文</strong></p><p><img src="https://i.loli.net/2021/06/11/Bfh3THSLgzZCUAu.png" alt="img"></p><ul><li><p><strong>来源端口</strong>：向目标主机指明接入他的主机所使用的端口号 用于目标主机回应</p></li><li><p><strong>目标端口</strong>：指明要连接的目标主机的端口号</p></li><li><p><strong>数据包长度</strong>：UDP头和数据总长度字节数</p></li><li><p><strong>检验和</strong>：该值为UDP报文头括数据部分中每16Bit的二进制反码求和</p></li><li><ul><li><strong>注：UDP检验和不是必须的</strong></li></ul></li></ul></li></ul><h4 id="1-请你说明一下，TCP协议的3次握手（进行连接）？">1. 请你说明一下，TCP协议的3次握手（进行连接）？</h4><blockquote><p>参考：<a href="https://juejin.cn/post/6844903834708344840">三次握手与四次挥手面试官想考我们什么？</a></p></blockquote><blockquote><p>TCP中，对<strong>确认ACK报文是不需要发送确认</strong>的 。</p></blockquote><ul><li><p><strong>简略过程</strong></p><blockquote><p>⚠️ SYN 和ACK报文是一起发的！！</p></blockquote><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/27203200-7e3630b0fe1442898e6824ac061d475e.x-png" alt="TCP三次握手原理- asfion - 博客园"></p><p><strong>1、第一次握手</strong>：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 <strong>ISN©</strong>。此时客户端处于 <strong>SYN_Send</strong> 状态。</p><p><strong>2、第二次握手</strong>：（⚠️ <strong>SYN+ACK是在一个包里发的！（字节一面</strong>） ）服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 <strong>ISN(s)</strong>，同时会把客户端的 ISN + 1 作为 ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 <strong>SYN_REVD</strong> 的状态。</p><p><strong>3、第三次握手</strong>：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 <strong>establised</strong> 状态。</p><p>服务器收到 ACK 报文之后，也处于 <strong>establised 状态</strong>，此时，双方以建立起了链接。</p></li></ul><h5 id="1-1-ISN-（Initial-Sequence-Number）是固定的吗？">1.1 ISN （Initial Sequence Number）是固定的吗？</h5><ul><li><p><strong>ISN作用</strong></p><p>三次握手，其中一个重要功能是客户端和服务端交换 ISN，以便让对方知道<strong>接下来接收数据的时候如何按序列号组装数据</strong>。</p></li><li><p><strong>ISN为什么不固定</strong>（还是不太理解）</p><blockquote><p>ISN随时间而变化，因此每个连接都将具有不同的ISN。ISN可以看作是一个<strong>32比特</strong>的计数器，<strong>每4ms加1</strong> 。</p></blockquote><ul><li><strong>防止在网络中被延迟的分组在以后被重复传输</strong>，而导致某个连接的一端对它作错误的判断；</li><li>如果 ISN 是固定的，攻击者很<strong>容易猜出后续的确认号</strong>，因此 ISN 是动态生成的。</li></ul></li></ul><h4 id="2-为什么要三次握手？">2.<strong>为什么要三次握手</strong>？</h4><p>1.<strong>用来确定服务端和客户端的发送能力是否正常；</strong></p><ul><li><strong>第一次握手</strong>：客户端发送网络包，服务端收到了。这样服务端就能得出结论：<u>客户端的发送能力、服务端的接收能力是正常的。</u></li><li><strong>第二次握手</strong>：服务端发包，客户端收到了。这样客户端就能得出结论：<u>服务端的接收、发送能力，客户端的接收、发送能力是正常的</u>。<strong>不过此时服务器并不能确认客户端的接收能力是否正常</strong>。</li><li><strong>第三次握手</strong>：客户端发包，服务端收到了。这样服务端就能得出结论：<u>客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。</u></li></ul><p>2.<strong>指定自己的初始化序列号，为后面的可靠传送做准备；</strong></p><ul><li>如果只有两次握手，那么客户端的起始序列号可以确认，<u>服务端的起始序列号</u>将得不到确认。</li></ul><ol start="3"><li><strong>如果是 https 协议的话，三次握手这个过程，还会进行数字<u>证书的验证以及加密密钥</u>的生成</strong>。</li></ol><h5 id="2-1-三次握手可以携带数据吗？">2.1 三次握手可以携带数据吗？</h5><p><strong>第一次、第二次握手不可以携带数据 ，</strong> 第三次可以携带数据：</p><ul><li><strong>对于第一次握手</strong>，不可以放数据，其中一个简单的原因就是会让服务器更加容易受到攻击了。<ul><li>如果有人要恶意攻击服务器，那他每次都在第一次握手中的 SYN 报文中放入大量的数据，<strong>消耗服务器空间来接收数据</strong>；</li></ul></li><li><strong>对于第三次握手</strong>，客户端已经处于 ESTABLISHED 状态。对于客户端来说，他已经建立起连接了，<strong>已经知道服务器的接收、发送能力正常</strong>，所以能携带数据。</li></ul><h4 id="3-请你说明一下，TCP协议的4次挥手（断开连接）？">3.<strong>请你说明一下，TCP协议的4次挥手（断开连接）</strong>？</h4><blockquote><p><a href="https://www.zhihu.com/question/63264012">为什么不像三次握手一样执行三次即可？</a></p><p>因为第二次和第三次对于被动方来说，意义是不一样的。<br>第二次是为了让主动方闭嘴（不再发挥手请求），自己该干嘛还是干嘛（但是自己可能还有数据美处理完）。<br>第三次是为了表示“我的活儿干完了，可以结束了”。<br>通常server接收到挥手的时候，手里还有活儿没做完。</p></blockquote><p>由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。这个原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接。</p><p><u>收到一个 FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据</u>。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。</p><p>TCP的连接的拆除需要发送四个包，因此称为四次挥手(four-way handshake)。客户端或服务器均可主动发起挥手动作，在socket编程中，任何一方执行close()操作即可产生挥手操作。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20211127191012778.png" alt="image-20211127191012778"></p><p>（1）客户端A发送一个FIN，<u>报文中会指定一个序列号</u>M，用来关闭客户A到服务器B的数据传送，此时客户端处于<strong>FIN_WAIT1</strong>状态；</p><p>（2）服务器B收到这个FIN，它发回一个ACK，<u>确认序号为收到的序号M+1</u>。和SYN一样，一个FIN将占用一个序号，此时服务端处于 <strong>CLOSE_WAIT</strong>状态；</p><p>（3）服务器B关闭与客户端A的连接，发送一个FIN给客户端A和序列号N，此时服务端处于 <strong>LAST_ACK</strong> 的状态；</p><p>（4）客户端A发回ACK报文确认，并将确认序号设置为收到序N+1，此时客户端处于 <strong>TIME_WAIT</strong> 状态，需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 <strong>CLOSED</strong> 状态；服务端收到 ACK 报文之后，就处于关闭连接了，处于 <strong>CLOSED</strong> 状态。</p><h5 id="3-1-为什么TCP四次挥手要基于全双工，不基于半双工呢？基于半双工可以改为三次挥手吗？">3.1 为什么TCP四次挥手要基于全双工，不基于半双工呢？基于半双工可以改为三次挥手吗？</h5><blockquote><p>半双工：同时只能有一端发送消息 ； 全双工：两端都可以随机接受/发送。</p></blockquote><p>在四次挥手过程中，似乎C/S两端都是等待对方发送FIN/ACK，才会发送对应的ACK/FIN版本。同一时刻只有一方在发送消息，满足半双工。</p><p>但是，半双工模式效率会更低：比如C端（客户端）发送FIN报文请求关闭，但是S端（<strong>服务端</strong>）依旧<strong>可以同时发生数据</strong> ，这个时候效率更高。</p><h5 id="3-2（重点）-服务器出现大量close-wait的连接的原因是什么？有什么解决方法？">3.2（重点） 服务器出现大量close_wait的连接的原因是什么？有什么解决方法？</h5><p>close_wait状态是在，TCP四次挥手的时候<strong>服务器收到FIN，但是没有发送自己的FIN时出现的</strong>。服务器出现大量close_wait状态的原因有两种：</p><ul><li><strong>服务器内部业务处理占用了过多时间</strong>，都没能处理完业务；或者还有数据需要发送；或者服务器的业务逻辑有问题，没有执行close()方法</li><li>服务器的父进程派生出子进程，子进程继承了socket，收到FIN的时候<strong>子进程处理但父进程没有处理该信号</strong>，导致socket的引用不为0无法回收</li></ul><p>处理方法：</p><ul><li>停止应用程序</li><li>修改程序里的bug</li></ul><h4 id="4-为什么要有TIME-WAIT-状态？为什么等待是2MSL？">4. 为什么要有TIME_WAIT 状态？为什么等待是2MSL？</h4><ul><li><p><strong>要确保服务器是否已经收到了客户端最后的ACK 报文</strong>，如果没有收到的话，<u>服务器会重新发 FIN + ACK报文给客户端</u>，客户端再次收到 FIN + ACK 报文之后，就知道之前的 ACK 报文丢失了，然后<u>再次发送 ACK 报文。</u></p></li><li><p><strong>确保之前连接的一些数据不在滞留在网络中</strong>：确保已经失效连接请求报文段不会再出现在本连接中，<strong>客户端发完最后一个ACK报文段后</strong>，再经过<strong>2MSL</strong>可以使得本连接中所有的报文段都从网络中消失。客户端就可以放心地<strong>释放</strong>TCP占用的资源、端口号，连接任何服务器。</p><blockquote><p>如果<strong>客户端</strong>直接CLOSED，然后又再次向服务器<strong>发起一个新连接</strong>，有可能<strong>新、老连接的端口号一样</strong>的。假设新、老连接端口号一致，若老连接的一些数据仍滞留在网络中，这些滞留数据在新连接建立后才到达服务器，鉴于前后端口号一致，TCP协议就默认这些数据属于新连接，于是数据就这样乱成一锅粥了。</p></blockquote></li></ul><h5 id="4-1-为什么是2MSL">4.1 为什么是2MSL?</h5><p>MSL是报文在网络中最长生存时间，这是一个工程值(经验值)，不同的系统中可能不同 。</p><p>考虑最坏 情况，客户端A最后一次挥手发送给服务端B的ACK报文丢失了：</p><ol><li>ACK从最多经过1MSL会到达服务端，<strong>超过1MSL服务端会重发FIN</strong></li><li>服务端重发的FIN最多经过1MSL到达A</li></ol><p>所以为了确保，客户端能<strong>接收到服务端重发的FIN报文</strong>。</p><h4 id="5-【重点】请问TCP为什么要更可靠？哪种场景会有所应用？">5. 【重点】<strong>请问TCP为什么要更可靠？哪种场景会有所应用？</strong></h4><ol><li><p><strong>超时重传</strong>：当 TCP 发出⼀个报文段后，它启动⼀个定时器，等待⽬的端确认收到这个报⽂段。如果不能及时收到⼀个确认，将重发这个报⽂段；</p></li><li><p><strong>数据排序</strong>：TCP有专门的序列号<strong>ISN字段</strong>，可提供数据re-order；</p></li><li><p><strong>流量控制</strong>：滑动窗口和计时器的使用。TCP窗口中会指明双方能够<u>发送接收的最大数据量；</u></p><blockquote><p><strong>ARQ协议</strong>： 也是为了实现可靠传输的，它的基本原理就是每发完⼀个分组就停⽌发送，等待对方确认。在收到确认后再发下⼀个分组。</p></blockquote></li><li><p><strong>拥塞控制</strong>：TCP的拥塞控制由4个核心算法组成。“慢启动”（Slow Start）、<u>“拥塞避免”</u>（Congestion avoidance）、“快重传 ”（Fast Retransmit）、“快恢复”（Fast Recovery）；</p></li><li><p><strong>校验和</strong>： TCP 将保持它⾸部和数据的检验和。这是⼀个端到端的检验和，⽬的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将<strong>丢弃这个报⽂段和不确认收到此报⽂段</strong>。</p></li></ol><p>【<strong>应用场景</strong>】</p><p><u>当对网络通讯质量有要求的时候，</u>比如：整个数据要准确无误的传递给对方，这往往用于一些要求可靠的应用</p><ul><li>比如HTTP、HTTPS、FTP等传输文件的协议，POP、SMTP等邮件传输的协议</li></ul><h5 id="5-1-超时重传机制原理？">5.1 超时重传机制原理？</h5><p>基本原理：在发送一个数据之后，就开启一个<strong>定时器</strong>，若是在这个时间内<strong>没有收到发送数据的ACK确认报文</strong>，则对该报文进行<strong>重传</strong>，在达到一定次数还没有成功时放弃并发送一个复位信号。</p><p>TCP中有四种计时器（Timer），分别为：</p><ol><li><p><strong>重传计时器</strong>：在<strong>滑动窗口协议</strong>中，接受窗口会在<strong>连续收到的包序列（连续ARQ）<strong>中的</strong>最后一个包</strong>向接收端发送一个ACK。当网络拥堵的时候，发送端的数据包和接收端的ACK包都有可能丢失。TCP为了保证数据可靠传输，就规定在<strong>重传的“时间片”<strong>到了以后，如果还没有收到对方的ACK，就</strong>重发此包</strong>，以避免陷入无限等待中。</p></li><li><p><strong>坚持计时器</strong>：在<strong>滑动窗口协议</strong>中，当发送TCP收到<strong>窗口大小为0</strong>的确认ACK时，就坚持启动计时器。当坚持计时器期限到时，发送TCP就发送一个特殊的报文段，叫做探测报文。这个报文段只有一个字节的数据。他有一个序号，但他的序号永远不需要确认；甚至在计算机对其他部分的数据的确认时该序号也被忽略。探测报文段提醒接受TCP：确认已丢失，必须重传。</p></li><li><p><strong>保活计时器</strong>：保活计时器使用在某些实现中，用来<strong>防止在两个TCP之间的连接出现长时间的空闲</strong>。假定客户打开了到服务器的连接，传送了一些数据，然后就保持静默了。也许这个客户出故障了。在这种情况下，这个连接将永远的处于打开状态。</p><p>通常设置为两小时。若服务器过了两小时还没有收到客户的信息，他就发送探测报文段。若<strong>发送了10个探测报文段</strong>（每一个像个75秒）还没有响应，就假定客户除了故障，因而就终止了该连接。</p></li><li><p><strong>时间等待计时器</strong>：四次挥收后time waiter状态中使用。</p></li></ol><h5 id="5-2-介绍一下ARQ协议-？">5.2 介绍一下ARQ协议 ？</h5><p>⾃动重传请求（Automatic Repeat-reQuest，ARQ）是OSI模型中数据链路层和传输层的错误纠正协议之⼀。它通过使用<strong>确认和超时</strong>这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后⼀段时间之内没有收到确认帧，它通常会重新发送。</p><p>ARQ包括<strong>停⽌等待ARQ协议</strong>和<strong>连续ARQ协议</strong>。</p><ul><li><strong>停⽌等待ARQ协议</strong>。 停⽌等待协议是为了实现可靠传输的，它的基本原理就是每发完⼀个<strong>分组</strong>就停⽌发送，等待对方确认（回复ACK）。如果过了⼀段时间（超时时间后），还是没有收到 ACK 确认，说明没有发送成功，需要重新发送，直到收到确认后再发下⼀个分组；在停⽌等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认。<ul><li><strong>优点</strong>：简单</li><li><strong>缺点</strong>：信道利用低，等待时间长</li></ul></li><li><strong>连续ARQ协议</strong>。连续 ARQ 协议可提高信道利用率。发送方维持⼀<strong>个发送窗口</strong>，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方⼀般采用<strong>累计确认</strong>，对按序到达的<strong>最后⼀个分组发送确</strong>认，表明到这个分组为⽌的所有分组都已经正确收到了。<ul><li><strong>优点</strong>： 信道利用率高，容易实现，即使确认丢失，也不必重传。</li><li><strong>缺点</strong>： 不能向发送方反映出接收方已经正确收到的所有分组的信息。 ⽐如：发送方发送了 5条 消息，<strong>中间第三条丢失（3号</strong>），这时接收方<strong>只能对前两个发送确认</strong>。发送方无法知道后三个分组的下落，而只好把后<strong>三个全部重传</strong>⼀次。这也叫 <strong>Go-Back-N</strong>（回退 N），表示需要退回来重传已经发送过的N 个消息。</li></ul></li></ul><h5 id="5-2-介绍一下连续ARQ协议滑动窗口和流量控制？">5.2 介绍一下连续ARQ协议滑动窗口和流量控制？</h5><p>TCP 利用滑动窗口实现流量控制。流量控制是为了<strong>控制发送方发送速率，保证接收方来得及接收</strong>。 接收方发送的确认报⽂中的窗口字段可以用来控制<strong>发送方窗口</strong>大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p><h5 id="5-3-介绍一下拥塞控制？">5.3 介绍一下拥塞控制？</h5><p>为了进行拥塞控制，TCP 发送方要维持⼀个 <u>拥塞窗口(cwnd)</u> 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让⾃⼰的<strong>发送窗口 == 取为拥塞窗口和接收方的接受窗口中较小的⼀个</strong>。</p><p>TCP的拥塞控制采用了四种算法：</p><ul><li><p><strong>慢开始</strong>： 慢开始算法的思路是当主机开始发送数据时，如果⽴即把大量数据字节注⼊到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测⼀下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd初始值为1，<strong>每经过⼀个传播轮次RTT，cwnd加倍</strong>；</p></li><li><p><strong>拥塞避免</strong>： 拥塞避免算法的思路是让拥塞窗⼝cwnd缓慢增大，即每经过<strong>⼀个往返时间RTT，就把发送放的cwnd加1</strong>；</p></li><li><p><strong>快重传/快恢复</strong>：</p><blockquote><p>区分快重传，连续ARQ中间丢失是Go back n。</p></blockquote><p>在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是⼀种拥塞控制算法，<u>它能快速恢复丢失的数据包。</u>如果<strong>接收机</strong>接收到⼀个【<strong>不按顺序】的数据段，它会⽴即给发送机发送⼀个重复确认（而不是等到自己发送数据时才捎带确认）。如果发送机接收到三个重复确认</strong>，它会假定确认指出的数据段丢失了，并⽴即重传这些丢失的数据段（<strong>而不必继续等待为该报文段设置的重传计时器的超时</strong>）。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/20170823152124856" alt="img"></p></li></ul><h5 id="5-4-如何区分流量控制和拥塞控制？">5.4 如何区分流量控制和拥塞控制？</h5><ul><li><strong>流量控制属于通信双方协商，拥塞控制涉及通信链路全局；</strong></li><li>流量控制需要通信双方各维护一个发送窗、一个接收窗，对任意一方，<strong>接收窗大小由自身决定，发送窗大小由接收方响应的TCP报文段中窗口值确定</strong>；拥塞控制的拥塞窗口大小变化由试探性发送一定数据量数据探查网络状况后而自适应调整。</li></ul><h4 id="6-如何提高客户端并发数？">6.<strong>如何提高客户端并发数？</strong></h4><p>客户端建立的tcp数量受限于最大文件句柄数，一个连接就会建一个文件句柄，在linux 上默认是<strong>1024</strong>。</p><ul><li>使用<code>ulimit</code> 可以修改最大进程数（<strong>最大为65535</strong>）</li></ul><h4 id="7-说说HTTP、TCP、Socket-的关系是什么？">7.<strong>说说HTTP、TCP</strong>、Socket 的关系是什么？</h4><ul><li><strong>TCP/IP</strong> 代表传输控制协议/网际协议，指的是一系列协议族；</li><li><strong>HTTP</strong> 本身就是一个协议，是从 <u>Web 服务器和本地浏览器</u>的超文本传送协议；</li><li><strong>Socket</strong> 是 TCP/IP 网络的 <strong>API</strong> ，其实就是一个门面模式，它把复杂的 TCP/IP 协议族隐藏在Socket 接口后面。对用户来说，一组简单的接口就是全部，让 Socket 去组织数据，以符合指定的协议。</li></ul><h4 id="8-什么是半连接队列？泛洪攻击（DDos攻击的一种），以及解决策略-？">8. 什么是半连接队列？<strong>泛洪攻击（DDos攻击的一种），以及解决策略</strong> ？</h4><ul><li><p><strong>半连接队列</strong></p><p>服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个<strong>队列</strong>里，我们把这种队列称之为<strong>半连接队列</strong>。</p><blockquote><p>已经完成三次握手，建立起连接的就会放在<strong>全连接队列</strong>中。如果队列满了就有可能会出现丢包现象。</p></blockquote></li><li><p><strong>泛洪攻击</strong></p><p>在 TCP 的三次握手机制的第一步中，客户端会向服务器发送 SYN 报文段。</p><ol><li>服务器接收到 SYN 报文段后会为该 <u>TCP分配<strong>缓存和变量</strong></u>，如果<u>攻击分子<strong>伪造大量不存在的IP地址</strong>，大量地往服务器发送 SYN 报文段</u>，服务器的连接资源终将被耗尽，导致<strong>内存溢出</strong>无法继续服务。</li><li>当服务端接收到 SYN 后进入 SYN-RECV 状态，此时的连接称为<strong>半连接</strong>，同时会被服务端写入一个<strong>半连接队列</strong>。<br>想象一下，如果攻击者在短时间内不断的向服务端发送大量的 SYN 包而不响应，那么服务器的<strong>半连接队列很快会被写满</strong>，从而导致无法工作。</li></ol></li><li><p><strong>解决策略</strong></p><p><strong>设置验证机制</strong>：当服务器接受到 SYN 报文段时，<strong>不直接为该 TCP 分配资源</strong>，而只是打开一个<u>半开的套接字</u>。接着会使用 SYN 报文段的<u>源 Id，目的 Id，端口号</u>以及只有服务器自己知道的一个<u>秘密函数生成一个 cookie，并<strong>把 cookie作为序列号响应</strong></u> 给客户端。</p><p>如果客户端是正常建立连接，将会返回一个确认字段为 <strong>cookie + 1 的报文段</strong>。接下来服务器会根据确认报文的源 Id，目的 Id，端口号以及秘密函数计算出一个结果，如果结果的值 + 1 等于确认字段的值，则证明是刚刚请求连接的客户端，这时候才为该 TCP 分配资源 。</p><p><strong>防火墙过滤</strong>： 暂不了解具体</p></li></ul><h4 id="9-为什么DNS（域名解析）用UDP，而区域传送用TCP">9.<strong>为什么DNS（域名解析）用UDP，而区域传送用TCP?</strong></h4><ul><li><strong>DNS用UDP</strong>：客户端向DNS服务器查询域名，一<u>般返回的内容都不超过512字节，用UDP传输即可</u>。不用经过TCP三次握手，这样<u>DNS服务器负载更低，响应更快</u>。</li><li><strong>区域传送用TCP：</strong> TCP协议可靠性好，<u>TCP协议传输的内容大，而UDP最大只能传512字节</u>。</li></ul><h4 id="10-说一下-TCP-粘包是怎么产生的？怎么解决粘包？">10.<strong>说一下 TCP 粘包是怎么产生的？怎么解决粘包？</strong></h4><p><strong>TCP粘包</strong></p><p><strong>TCP粘包</strong>是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。</p><p>客户端要发送原信息是A和B两个数据包，服务端接收到之后，可能出现如下情况：</p><ul><li><strong>正常情况</strong>：读取到了A和B两个数据包；</li><li><strong>粘包</strong>：A和B两个数据包一起读取了；</li><li><strong>拆包</strong>：读取了A数据包的一部分，A的另一部分和B数据包一起读取了。</li></ul><p><strong>TCP粘包原因</strong></p><ul><li><strong>【发送方】TCP默认使用Nagle算法</strong>。客户端通过socket给服务端发送数据，为了传输更有效率，会将<strong>多次间隔较小的且数据量小的数据</strong>，通过<strong>nagle</strong>算法，合并成一个大的数据块，然后进行封包。这样做提高了效率，缺点就是你发送到服务端的数据，服务端不知道是不是完整的，不知道哪几小块数据拼起来才是原来的数据；</li><li><strong>【接收方】来不及接收缓存区的包</strong>，导致多个包接收；</li><li>TCP<strong>连接复用</strong>造成的粘包问题；</li><li>流量控制，<strong>拥塞控制</strong>也可能导致粘包。</li></ul><p><strong>解决粘包</strong></p><p>解决问题的关键在于如何给<strong>每个数据包添加边界信息</strong>：</p><ol><li><strong>Nagle算法</strong>问题导致的，需要结合应用场景适当关闭该算法；</li><li><strong>发送端给每个数据包添加包 <u>首部</u> <strong>，首部中应该至少包含数据包的</strong>长度</strong>，这样接收端在接收到数据后，通过读取包首部的长度字段，便知道每一个数据包的实际长度了；</li><li><strong>数据包之间设置边界</strong>，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开 ；</li><li><strong>发送端将每个数据包封装为固定长度</strong>（不够的可以通过补0填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。</li></ol><h4 id="11-TCP-UDP的区别？">11. TCP, UDP的区别？</h4><ul><li>UDP 在<strong>传送数据之前不需要先建立连接</strong>。远地主机在收到 UDP 报⽂后，不需要给出任何确认。虽然UDP 不提供可靠交付，但在某些情况下 UDP 确是⼀种最有效的⼯作方式（⼀般用于即时通信）<ul><li>⽐如： <u>QQ 语⾳、 QQ 视频 、直播</u>等等</li></ul></li><li>TCP <strong>提供面向连接的服务</strong>。在传送数据之前必须先建⽴连接，数据传送结束后要释放连接。 TCP 不提供⼴播或多播服务。由于 TCP 要提供可靠的，面向连接的传输服务（TCP的可靠体现在TCP在传递数据之前，会有三次握⼿来建⽴连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源），这⼀难以避免增加了许多开销，如确认，流量控制，计时器以及连接管理等。这不仅使协议数据单元的⾸部增大很多，还要占用许多处理机资源。<ul><li>TCP ⼀般用于<u>⽂件传输、发送和接收邮件、远程登录</u>等场景。</li></ul></li><li><strong>数据包</strong>： TCP是<strong>报文段</strong>，UDP是<strong>用户数据报</strong>。</li><li><strong>应用场景</strong> ： TCP用于一些需要可靠传输的场景； UDP则应用一些即时通信场景，不需要可靠传输的场景。</li><li><strong>长度</strong>：UDP在DNS最长只能是512字节，TCP会更长。</li></ul><h2 id="3-3-网络层">3.3 网络层</h2><h4 id="1-请简单解释一下，ARP协议和ARP攻击">1.<strong>请简单解释一下，ARP协议和ARP攻击?</strong></h4><ul><li>ARP协议：地址解析协议，建立<code>IP/MAC</code>地址映射表</li><li>ARP攻击：</li></ul><h4 id="2-什么是ICMP协议，它的作用是什么？">2.<strong>什么是ICMP协议，它的作用是什么</strong>？</h4><p>用于在<strong>IP主机、路由器</strong>之间传递控制消息。</p><blockquote><p>控制消息是指：<strong>网络通不通、主机是否可达、路由是否可用</strong>等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p></blockquote><h4 id="3-请你讲一下路由器和交换机的区别？">3.<strong>请你讲一下路由器和交换机的区别？</strong></h4><ol><li><p><strong>动态IP</strong>：<u>路由器可以给你的局域网自动分配IP</u>，虚拟拨号，就像一个交通警察，指挥着你的电脑该往哪走，你自己不用操心那么多了。<u>交换机只是用来分配网络数据的</u>。</p><p><u>路由器可以把一个IP分配给很多个主机使用，这些主机对外只表现出一个IP</u>。交换机可以把很多主机连起来，这些主机对外各有各的IP。</p></li><li><p><strong>寻址方式</strong>：路由器在<strong>网络层</strong>，<u>路由器根据IP地址寻址</u>，路由器可以处理TCP/IP协议，交换机不可以；交换机在<strong>中继层</strong>，<u>交换机根据MAC地址</u>寻址。</p></li><li><p><strong>防火墙</strong>：路由器提供防火墙的服务，交换机不能提供该功能。集线器、交换机都是做端口扩展的，就是扩大局域网(通常都是以太网)的接入点，也就是能让局域网可以连进来更多的电脑。路由器是用来做网间连接，也就是用来连接不同的网络。</p></li></ol><h4 id="4-请解释ping命令过程？">4.<strong>请解释<code>ping</code>命令过程？</strong></h4><ol><li>域名在DNS服务器查找IP地址；</li><li>通过Ping程序发送<strong>ICMP包；</strong></li><li>同一网段的情况下，调用IP层的<strong>ARP协议</strong>请求<strong>广播</strong>（不同网段的情况下，交给路由器处理），<strong>查找目标主机的MAC地址</strong>；</li><li>目标主机ARP协议收到请求后，将本机<strong>MAC地址填充</strong>并<strong>发送ARP应答</strong>回到请求发送方；</li><li>请求发送方发送<strong>ICMP数据</strong>到目标主机；</li><li>目标主机<strong>响应ICMP包</strong>；</li><li>请求主机收到目标主机的<strong>ICMP响应包</strong>。</li></ol><h4 id="5-（补充介绍）介绍一下IPV6？一共多少位？">5. （补充介绍）介绍一下IPV6？一共多少位？</h4><p><img src="https://i.loli.net/2021/05/17/i5Nz6lF9RXYsShw.png" alt="IPv6 协议基础_果子哥丶的博客-CSDN博客"></p><p>源IP和目的IP地址都是，128（4*32）位（图中标识不清晰）！</p><h4 id="6-介绍一下IP地址分类？C类哪些是保留地址？网络号全-0-全-1-，主机号全-0-全1-分别什么含义？">6. 介绍一下IP地址分类？C类哪些是保留地址？网络号全 0 全 1   ，主机号全 0 全1 分别什么含义？</h4><ul><li><p><strong>IP地址分类</strong></p><p><code>IP地址 == &#123;&lt;网络号&gt;，&lt;主机号&gt;&#125;</code></p><p><img src="https://i.loli.net/2021/05/17/ZINJCj9l8WM7qhf.jpg" alt="img"></p><ul><li><p><strong>A类</strong>： 第1位固定为0，网络号只有7位 。0（0000 0000）的IP地址是<strong>保留地址</strong>，意思是“本网络” ； 127（0111 1111）的IP地址也是<strong>保留地址</strong>，作为本地环回软件测试 。</p><blockquote><p>特别的，<strong>主机号全1</strong>的是<a href="https://baike.baidu.com/item/%E5%B9%BF%E6%92%AD%E5%9C%B0%E5%9D%80">广播地址</a>，它代表了网络全部的<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA">主机</a>。</p></blockquote></li><li><p><strong>B类</strong>： 第1、2位固定为10，网络号有14位可以使用 。</p><blockquote><p>B类地址网络号为128.0（1000 000  0000 0000）的IP地址是不指派的，所以可指派的网络号需要减一。</p></blockquote></li><li><p><strong>C类</strong>： 第1、2、3位固定为110，网络号有21位可以使用 。</p><blockquote><p>（快手问）C类IP地址包含<strong>私有C类地址</strong>，范围从192.0.0.0 到223.255.255.255，其中私有C类地址范围从<strong>192.168.0.0 到192.168.255.255。</strong></p></blockquote></li></ul></li><li><p><strong>全0或者全1的含义</strong></p><ul><li><p><strong>网络号全0：</strong>（1）如果主机号也为全0，那么此类ip地址可以当源端但不可以做目的端 （2）如果主机号不全为0，那么此类ip地址的使用和（1)相同，只是它代表的是网络上特定的主机</p></li><li><p><strong>网络号全1：<strong>全1的网络号和</strong>任意的主机号</strong>组合当做<strong>回环地址</strong>来使用。</p><blockquote><p>例如：127（0111 1111）的IP地址</p></blockquote></li><li><p><strong>主机号全0：</strong> 全为0，所得到的地址就是192.168.100.0，它是一个网络地址，代表的是一个<strong>网段</strong>；</p></li><li><p><strong>主机号全1：</strong> 机号全1 代表的是<strong>广播地址</strong>，广播地址是不可以做源端的，但是可以做目的端。</p></li></ul></li></ul><h2 id="3-4-应用层">3.4 应用层</h2><h4 id="1-请你谈谈DNS的寻址过程？">1.<strong>请你谈谈DNS的寻址过程？</strong></h4><p>（1）检查<strong>浏览器缓存、检查本地hosts文</strong>件：是否有这个网址的映射，如果有，就调用这个IP地址映射，解析完成。</p><p>（2）如果没有，则查找<strong>本地DNS解析器缓存</strong>：是否有这个网址的映射，如果有，返回映射，解析完成。</p><blockquote><p><strong>本地dns服务器一般都是你的网络接入服务器商提供</strong>，比如中国电信，中国移动等。</p></blockquote><p>（3）如果没有，则查找填写或分配的<strong>首选DNS服务器</strong>：称为本地DNS服务器。服务器接收到查询时：</p><ul><li><p>如果要查询的域名包含在本地配置区域资源中，返回解析结果，查询结束，此解析具有权威性。</p></li><li><p>如果要查询的域名不由本地DNS服务器区域解析，但服务器缓存了此网址的映射关系，返回解析结果，查询结束，此解析不具有权威性。</p></li></ul><p>（4）如果本地DNS服务器也失效：</p><ul><li>如果未采用<u>转发模式</u>（<strong>迭代</strong>，从上至下）（1）<strong>本地DNS服务器</strong>就把<strong>请求发至13台根DNS</strong>，根DNS服务器收到请求后，会判断这个域名（<a href="http://xn--bvs.com">如.com</a>）是谁来授权管理，<u>并返回一个负责该顶级域名服务器的IP</u>，（2）本地DNS服务器收到顶级域名服务器IP信息后，继续向该<strong>顶级域名</strong>服务器IP发送请求，（3）该服务器如果无法解析，则会找到负责这个域名的下一级DNS服务器（如http://baidu.com）的IP给本地DNS服务器，循环往复直至查询到映射，（4）将解析结果<strong>返回<u>本地DNS服务器</u>，再由本地DNS服务器</strong>返回解析结果，查询完成。</li><li>如果采用<u>转发模式</u>（<strong>递归</strong>，从下至上）（1）则此DNS服务器就会把请求转<strong>发至上一级DNS服务器</strong>，（2）如果上一级DNS服务器不能解析，则继续向上请求，（3）最终将解析结果依次<u>返回本地DNS服务器</u>，本地DNS服务器再返回给客户机，查询完成。</li></ul><h5 id="1-1-怎么获取13台根服务器？">1.1 怎么获取13台根服务器？</h5><p>ping -R ? 抓包？</p><h5 id="1-2-解释一下DNS劫持和DNS污染？">1.2 <strong>解释一下DNS劫持和DNS污染</strong>？</h5><blockquote><p>参考：<a href="https://juejin.cn/post/6844903991764058126">什么是http劫持 ? </a></p></blockquote><p><strong>一、DNS劫持</strong></p><p>DNS劫持某些手段取得<strong>某域名的解析记录控制权</strong>，进而修改此域名的解析结果，返回给用户一个错误的查询结果。</p><ul><li><p><strong>劫持过程</strong></p><ol><li><p>客户端发起域名请求到DNS解析服务器（一般是LocalDNS），<u>但此时DNS解析服务器被攻击篡改</u>；</p></li><li><p>被攻击篡改后的DNS解析服务器将请求转发给虚假服务器；</p><blockquote><p>DNS查询没有任何认证机制且基于UDP不可靠连接，因此很容易被篡改。</p></blockquote></li><li><p>虚假服务器返回<u>响应虚假信息</u>给被攻击篡改后的DNS解析服务器（也可能直接不响应）；</p></li></ol></li><li><p><strong>解决办法</strong></p><p>DNS劫持的本质是<strong>运营商的DNS解析服务器被攻击篡改</strong></p><ul><li>使用国外免费公用的DNS服务器解决。例如OpenDNS（208.67.222.222）或GoogleDNS（8.8.8.8）</li><li>直接使用ip进行访问</li></ul></li></ul><p><strong>二、DNS污染</strong></p><p>DNS污染是一种让一般用户由于<strong>得到虚假目标主机IP</strong>而不能与其通信的方法，是一种DNS缓存投毒攻击（DNS cache poisoning）。因为是不是<u>劫持单个DNS服务器，而是监听所有的，所以个人比较难防范。</u></p><ul><li><p><strong>污染原理</strong></p><ol><li><p>通过对UDP端口53上的<strong>DNS查询进行入侵检测</strong>；</p><blockquote><p>由于通常的DNS查询没有任何认证机制，而且DNS查询通常基于的UDP是无连接不可靠的协议，因此DNS的查询非常容易被篡改。</p></blockquote></li><li><p>一经发现与关键词相匹配的请求则<u><strong>立即伪装成目标域名的解析服务器</strong></u>（NS，Name Server）给查询者返回虚假结果。</p></li></ol></li><li><p><strong>解决办法</strong></p><ol><li>VPN代理或者域名远程解析的方法解决</li><li>通过修改Hosts，手动设置<u>域名正确的IP地址</u></li></ol></li></ul><h4 id="2-Forward和Redirect的区别？">2. <strong>Forward和Redirect的区别</strong>？</h4><ul><li><p><strong>浏览器 URL 地址</strong>：Forward 是服务器<u>内部的重定向</u>，服务器<strong>内部请求某个 servlet</strong>，然后获取响应的内容，<strong>浏览器的 URL 地址不会变化</strong>；Redirect 是客户端请求服务器，然后服务器给客户端返回了一个<strong>302</strong> 状态码和<strong>新的 location</strong>，客户端<u><strong>重新发起 HTTP 请求</strong></u>，服务器给客户端响<u>应 location 对应的 URL 地址，</u>浏览器的 <strong>URL 地址发生了变化</strong>。</p></li><li><p><strong>数据的共享</strong>：Forward 是服务器内部的重定向，request 在整个重定向过程中是不变的，<strong>request 中的信息在 servlet 间是共享</strong>的。Redirect 发起了<strong>两次 HTTP 请求</strong>分别使用<strong>不同的request</strong>。</p></li><li><p><strong>请求的次数</strong>：Forward 只有一次请求；Redirect 有两次请求。</p></li></ul><h4 id="3-请你简单讲解一下，负载均衡反向代理模式的优点、缺点？">3.<strong>请你简单讲解一下，负载均衡反向代理模式的优点、缺点？</strong></h4><blockquote><p>联系实际：<a href="https://server.zol.com.cn/633/6339623_all.html">正反向代理、科学上网、VPN之间的关系</a> 和<a href="https://superxlcr.github.io/2018/07/01/%E4%B8%8A%E7%BD%91%E9%99%90%E5%88%B6%E5%92%8C%E7%BF%BB%E5%A2%99%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/">翻墙基本原理（看他的其他文章补充）</a></p></blockquote><p>【基本介绍】</p><ol><li><p><strong>反向代理</strong>（Reverse Proxy）：方式是指<u>以代理服务器来接受internet上的连接请求</u>，然后将请求转发给内部网络上的服务器，并将从<strong>服务器上得到的结果返回给internet上请求连接的客户端</strong>，此时代理服务器对外就表现为一个服务器；</p><ul><li><p><strong>优点</strong>： 网络络外部用户不能直接访问真实的服务器，具备额外的安全性</p></li><li><p><strong>缺点</strong>： 反向代理是处于OSI参考模型第七层应用的，所以就必须为每一种应用服务专门开发一个反向代理服务器；限制了应用范围；</p><p><u><strong>针对每一次代理，代理服务器就必须打开两个连接</strong></u>，一个对外，一个对内，因此在并发连接请求数量非常大的时候，<strong>代理服务器的负载也就非常大了</strong>，在最后代理服务器本身会成为服务的瓶颈。</p></li></ul></li><li><p><strong>反向代理负载均衡技术</strong>：是把将来自internet上的连接请求以反向代理的方式动态地<strong>转发</strong>给内部网络上的<strong>多台服务器</strong>进行处理，从而达到负载均衡的目的。</p><ul><li><strong>实现</strong>：apache mod_proxy、netscape proxy等，也可以在高速缓存器、负载均衡器等硬件设备上实现。</li><li><strong>优点</strong>：可以将优化的 <u>负载均衡策略和代理服务器的高速缓存技术</u>结合在一起，提升静态网页的访问速度，提供有益的性能</li><li><strong>缺点</strong>：</li></ul></li></ol><h5 id="3-1-请解释下负载均衡的相关算法？">3.1 请解释下负载均衡的相关算法？</h5><p>不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。</p><ul><li>给配置高、负载低的机器配置更高的权重，让其处理更多的请求；</li><li>给配置低、负载高的机器分配较低的权重，降低系统负载。</li></ul><p>下面是几种比较相关的算法。</p><ul><li><p><strong>加权轮询算法</strong></p><blockquote><p>参考：<a href="https://www.fanhaobai.com/2018/11/load-balance-round-robin.html">加权轮询算法</a></p></blockquote><ul><li><p>基本定义</p><ol><li>假设有 N 台实例 S = {S1, S2, …, Sn}，权重 W = {W1, W2, …, Wn}</li><li>currentPos 表示当前选择的实例 ID，初始化为 -1；</li><li>currentWeight 表示当前权重，初始值为 max(S)；</li><li>max(S) 表示 N 台实例的最大权重值，gcd(S) 表示 N 台实例权重的最大公约数。</li></ol></li><li><p>算法过程</p><ol><li>从上一次调度实例起，<strong>遍历后面</strong>的每个实例；</li><li>若所有实例已被遍历过一次，则减小 currentWeight 为 currentWeight - gcd(S)，并从头开始遍历；若 currentWeight 小于等于 0，则重置为 max(S)；</li><li><strong>直到</strong> 遍历的实例的权重 &gt;= currentWeight 时结束，<strong>此时实例为需调度的实例</strong>；</li><li>每次调度重复步骤 1、2、3；</li></ol></li><li><p>算法实例</p><p><img src="https://i.loli.net/2021/05/30/YCVDN4miMvPy7sJ.png" alt="image-20210529232315965"></p><p>例如，上述 4 个服务，最大权重 max(S) 为 4，最大公约数 gcd(S) 为 1。其调度过程如下：</p><p><img src="https://i.loli.net/2021/05/30/7A4s6i3opra8LWR.png" alt="image-20210529232350799"></p></li><li><p>算法优缺点</p><ul><li><p><strong>优点</strong>： 相比 <u>简单轮询</u> 方式，通过权重进行分配，更加均匀</p></li><li><p><strong>缺点</strong>：如下一个极端情况</p><blockquote><p>服务实例 S = {a, b, c}，权重 W = {5, 1, 1}，使用加权轮询调度生成的实例序列为 {a, a, a, a, a, b, c}，那么就会存在连续 5 个请求都被调度到实例 a。</p></blockquote><p>关于这点，可以采用  <a href="https://www.fanhaobai.com/2018/11/load-balance-round-robin.html#">平滑加权轮询</a> 调度算法 。</p></li></ul></li></ul></li><li><p><strong>一致性哈希算法</strong></p><p>负载均衡算法中的哈希算法，就是根据某个值生成一个哈希值，然后对应到某台服务器上去，即<strong>哈希环</strong>。</p><p><img src="https://i.loli.net/2021/05/30/fAa2jzXxGZ7lVq1.png" alt="image-20210529232953082"></p><p>但是可能出现一种，<strong>哈希倾斜</strong>的情况：A负责的区域太大，B，C负责的小。这个时候采用虚拟节点去解决，这里不表。</p></li></ul><h5 id="3-2-DNS-负载均衡是什么策略？">3.2 DNS 负载均衡是什么策略？</h5><blockquote><p>参考：<a href=""></a></p></blockquote><ul><li><strong>原理</strong>： 还是不太明白，DNS递归查询本身就是个负载均衡策略吧？多台服务器满足同一个查询服务？</li></ul><h4 id="4-请说明一下http和https的区别？">4.<strong>请说明一下http和https的区别？</strong></h4><ol><li>https协议要申请证书到ca，需要一定<u>经济成本</u>；</li><li>http是明文传输，https是加密的安全传输；</li><li>（🚩*1）连接的端口不一样，http是<strong>80</strong>，https是<strong>443</strong>；</li><li>http连接很简单，没有状态；</li><li>https是ssl加密的传输，身份认证的网络协议，相对http明文传输比较安全。</li></ol><h5 id="4-1-讲一讲http的请求报文和响应报文？协议？">4.1 讲一讲http的请求报文和响应报文？协议？</h5><ul><li><p><strong>请求报文和协议</strong></p><p>一个HTTP请求报文由<strong>请求行（request line）</strong>、<strong>请求头部（header）</strong>、<strong>空行</strong>和<strong>请求数据</strong>4个部分组成，下图给出了请求报文的一般格式。</p><p><img src="https://i.loli.net/2021/05/17/uxX1gbcnhTsS9td.png" alt="img"></p><ul><li><p><strong>请求行</strong> ：由请求方法字段、URL字段和HTTP协议版本字段3个字段组成。</p><blockquote><p><strong>HTTP协议</strong> :  的请求方法有GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT。</p></blockquote></li><li><p><strong>请求头部</strong>： 请求头部由<strong>关键字/值</strong>对组成，每行一对，关键字和值用英文冒号“:”分隔 。 请求头部<strong>通知服务器有关于客户端请求的信息</strong>。</p><blockquote><p>User-Agent：产生请求的浏览器类型。</p><p>Accept：客户端可识别的内容类型列表。</p><p><strong>Host</strong>：请求的主机名，允许多个域名同处一个IP地址，即虚拟主机。</p></blockquote></li><li><p><strong>请求数据 :</strong> 请求数据<strong>不在GET方法中使用，而是在POST方法</strong>中使用。POST方法适用于需要客户填写表单的场合。</p></li></ul></li><li><p><strong>响应报文和协议</strong></p><p>HTTP响应也由四个部分组成，分别是：<strong>状态行、响应头、空格、响应数据</strong>。</p><p><img src="https://i.loli.net/2021/05/17/QNIRoY5f7jk6sHv.jpg" alt="img"></p><ul><li><strong>状态行</strong> ： 状态行（status line）通过提供一个状态码来说明所请求的资源情况。如<strong>404</strong>等</li></ul></li></ul><h5 id="4-2-一个TCP连接中多个HTTP请求发生可以【同时】一起发生吗？">4.2  一个TCP连接中多个HTTP请求发生可以【同时】一起发生吗？</h5><ul><li><strong>HTTP/1.1单个 TCP 连接在同一时刻只能处理一个请求</strong>。意思是说：两个请求的生命周期不能重叠，任意两个 HTTP 请求从开始到结束的时间在同一个 TCP 连接里不能重叠；</li><li><strong>Pipelining 技术 &amp; Multiplexing。</strong> Pipelining 技术可以完成这个多个请求同时发送，但是由于浏览器默认关闭，所以可以认为这是不可行的。在 HTTP2 中由于 Multiplexing 特点的存在，多个 HTTP 请求可以在同一个 TCP 连接中并行进行；</li></ul><blockquote><p>那么在 HTTP/1.1 时代，浏览器是如何提高页面加载效率的呢？</p></blockquote><ul><li>维持和服务器已经建立的 TCP 连接，在同一连接上<strong>顺序处理多个请求</strong>；</li><li><strong>和服务器建立多个 TCP 连接</strong>。</li></ul><h4 id="5-请说明一下http1-0-和https1-1-区别？">5.<strong>请说明一下http1.0 和https1.1 区别</strong>？</h4><ul><li><strong>长连接</strong><ul><li>HTTP1.0默认使用短连接，每次HTTP请求都需要建立新的TCP连接，连接不能复用；</li><li>HTTP1.1支持<strong>持久连接和请求的流水线处理（但不是并发！！</strong>），在<strong>一个TCP连接上可以传送多个HTTP请求和响应</strong>，<u>减少建立和关闭TCP连接的消耗和延迟，提高效率</u></li></ul></li><li><strong>host字段</strong><ul><li>在<strong>HTTP1.0中为每台服务器绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名</strong>（hostname）</li><li>HTTP1.1的请求消息和响应消息都应支持Host头域（<u>补充：F12 抓包可以看到</u>），且请求消息中如果<strong>没有Host头域</strong>，会<strong>报400 Bad Request错误</strong></li></ul></li><li><strong>缓存处理</strong><ul><li>HTTP1.1则引入了更多的缓存控制策略</li></ul></li><li><strong>带宽优化及网络连接的使用</strong><ul><li>HTTP1.0中存在浪费带宽现象，例如：（1）客户端只需要某个对象的一部分，而服务器却<u>将整个对象发送过来</u>；(2) 下载大文件不支持断点续传功能，在发生断连后需要重新下载完整的包；</li><li>HTTP1.1则在请求头中引入range头域，它允许<strong>只请求资源的某个部分(因此也支持断点重传)</strong>，即返回码是206；</li></ul></li><li><strong>新增一些错误通知状态码</strong><ul><li>如：409（Conflict）表示请求的资源与资源的当前状态发生冲突 。</li></ul></li></ul><h4 id="6-请说明一下http1-0-和https2-0-区别？">6.<strong>请说明一下http1.0 和https2.0 区别</strong>？</h4><h4 id="7-请讲一下浏览器从接收到一个URL，到最后展示出页面，经历了哪些过程？">7.<strong>请讲一下浏览器从接收到一个URL，到最后展示出页面，经历了哪些过程</strong>？</h4><ol><li><p>在浏览器地址栏中输入URL；</p></li><li><p>DNS域名解析，获得域名相对应的IP地址（详见：<u>应用层DNS寻址过程</u>）；</p><blockquote><p>浏览器首先会从（1）本地浏览器缓存、hosts文件是否存在相应的域名、IP对应关系，如果有则向这个IP地址发送请求，如果没有则向（2）本地DNS<strong>解析器</strong>缓存中查找，如果都没有，（3）再去DNS<strong>服务器</strong>中找IP。</p></blockquote></li><li><p>浏览器向服务器发起TCP连接，与浏览器建立TCP三次握手；然后 <u><strong>向服务器发送HTTP请求</strong></u>，请求数据包</p><blockquote><p><strong>HTTP请求是由三部分组成：请求行、请求报头和请求正文</strong>。</p><p>与服务器建立了连接后，就可以向服务器发起请求了。发送HTTP请求的过程就是<u>构建HTTP请求报文</u>，并通过TCP协议发送到服务器指定端口（<u>HTTP协议80/8080，HTTPS协议443</u>）。</p></blockquote></li><li><p>服务端（由web服务器）处理收到的请求</p><blockquote><p>服务器端收到请求后，由web服务器（准确来说应该是HTTP服务器）处理请求，诸如Apache、Ngnix、IIS 。</p></blockquote></li><li><p>服务器返回相应结果（响应报文）至浏览器</p><blockquote><p>HTTP响应报文也是由三部分组成：<strong>状态码、响应报头和响应报文</strong>。</p><p>状态码是由三位数组成，<u>第一个数字定义了响应的类别</u>：</p><ul><li><strong>1XX</strong>：指示信息，表示请求已接受，继续处理；</li><li><strong>2XX</strong>：成功，表示请求已被成功接收、理解、接受；</li><li><strong>3XX</strong>：重定向，要完成请求必须进行更进一步的操作；</li><li><strong>4XX</strong>：客户端错误，请求有语法错误或无法实现；</li><li><strong>5XX</strong>：服务器端错误，服务器未能实现合法的请求。</li></ul></blockquote></li><li><p>四次挥手关闭TCP连接</p><blockquote><p>四次挥手，当双方没有请求或响应传递时，任意一方都可以发起关闭请求。</p></blockquote></li><li><p>浏览器解析渲染页面</p><blockquote><p>浏览器在 <u>收到HTML、CSS、JS文件</u>后，就需要进行渲染。</p><p>（1）浏览器解析HTML文件构建<u>DOM树</u>，（2）然后解析CSS文件构建<u>渲染树</u>，（3）等到渲染树构建完成后，浏览器开始布局渲染树并将其<u>绘制到屏幕</u>上</p></blockquote></li></ol><h4 id="8-请解释一下SSL工作过程（Https传输过程）？">8.<strong>请解释一下SSL工作过程（Https传输过程）？</strong></h4><blockquote><p>https是http的扩展，在传输层使用了安全协议：<strong>安全套接字层SSL(Secure Socket Layer)</strong>。</p><p>参考：<a href="https://www.ruanyifeng.com/blog/2014/02/ssl_tls.html">https://www.ruanyifeng.com/blog/2014/02/ssl_tls.html</a></p></blockquote><blockquote><p><strong>公钥</strong>通常用于加密会话密钥、验证数字签名，或加密可以用相应的私钥解密的数据。公钥和私钥是通过一种算法得到的一个密钥对(即一个公钥和一个私钥)。</p><ul><li>通过这种算法得到的密钥对能保证在世界范围内是唯一的。</li><li>使用这个密钥对的时候,如果用其中一个密钥加密一段数据，必须用另一个密钥解密。</li></ul></blockquote><p>SSL/TLS协议的基本思路是采用<a href="http://en.wikipedia.org/wiki/Public-key_cryptography">公钥加密法</a>，也就是说，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。</p><p><img src="https://i.loli.net/2021/04/21/aH6gjc5UT9Xu2io.png" alt="image-20210421171336262"></p><p>所以基本过程是：</p><blockquote><p>（1） 客户端向服务器端索要并验证公钥。</p><p>（2） 双方协商生成&quot;对话密钥&quot;。</p><p>（3） 双方采用&quot;对话密钥&quot;进行加密通信。</p></blockquote><ol><li><p><strong>协商加密算法</strong>。客户端（通常是浏览器）先向服务器发出<u>加密通信的请求</u>，这被叫做ClientHello请求；</p><blockquote><p>（1） 支持的协议版本，比如TLS 1.0版。</p><p>（2） <u>一个客户端生成的随机数</u>，来生成&quot;对话密钥&quot;。</p><p>（3） 支持的加密方法，比如RSA公钥加密。</p><p>（4） 支持的压缩方法。</p></blockquote></li><li><p><strong>服务器回应</strong>。服务器收到客户端请求后，向客户端发出回应，这叫做SeverHello；</p><blockquote><p>（1） 确认使用的加密通信协议版本，比如TLS 1.0版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。</p><p>（2） <u>一个服务器生成的随机数</u>，稍后用于生成&quot;对话密钥&quot;。</p><p>（3） 确认使用的加密方法，比如RSA公钥加密。</p><p>（4） 服务器证书。</p></blockquote></li><li><p><strong>客户端鉴别</strong>。客户端收到服务器回应以后，（1）<u>首先验证服务器证书</u>：如果证书不是可信机构颁布、或者证书中的域名与实际域名不一致、或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。</p><p>（2）<u>如果证书没有问题，客户端就会从证书中取出服务器的公钥</u>。然后，向服务器发送下面三项信息：</p><blockquote><p>（1） <u>一个随机数</u>。该随机数用服务器公钥加密，防止被窃听。</p><p>（2） <u>编码改变通知</u>，表示随后的信息都将用双方商定的加密方法和密钥发送。</p><p>（3） <u>客户端握手结束通知</u>，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验。</p></blockquote></li><li><p><strong>会话秘钥计算</strong>。 服务器收到客户端的第三个随机数pre-master key之后，计算生成本次会话所用的&quot;会话密钥&quot;（使用3个随机数生成更安全）；</p><blockquote><p>（1）编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。</p><p>（2）服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供客户端校验。</p></blockquote></li><li><p><strong>安全数据传输</strong>。双方用会话秘钥加密和解密之间传送的数据。</p></li></ol><h5 id="8-1-公钥如何保证不被篡改？说一说证书。">8.1 公钥如何保证不被篡改？说一说证书。</h5><p>将公钥放在数字证书中。只要证书是可信的，公钥就是可信的。</p><ul><li><p>数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。</p></li><li><p>服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，<strong>会对已申请的公开密钥做数字签名</strong>，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。</p></li><li><p>进行 HTTPS 通信时，服务器会把证书发送给客户端。客户端取得其中的公开密钥之后，先使用数字签名进行验证，如果验证通过（<strong>证书不可信浏览器会提示</strong>），就可以开始通信了。</p></li></ul><h5 id="8-2-公钥加密计算量太大，如何减少耗用的时间？">8.2 公钥加密计算量太大，如何减少耗用的时间？</h5><p>每一次对话（session），客户端和服务器端都生成一个&quot;对话密钥&quot;（session key），用它来加密信息。由于<strong>对话密钥是对称加密</strong>，所以<strong>运算速度非常快</strong>，而服务器公钥只用于加密&quot;对话密钥&quot;本身，这样就减少了加密运算的消耗时间。</p><h5 id="8-3-为什么有的时候刷新页面不需要重新建立-SSL-连接？">8.3 为什么有的时候刷新页面不需要重新建立 SSL 连接？</h5><p>TCP 连接有的时候会被浏览器和服务端维持一段时间，<strong>TCP 不需要重新建立，SSL 自然也会用之前的</strong>。</p><h4 id="9-介绍一下常见的几种非对称加密算法？优缺点？">9. 介绍一下常见的几种非对称加密算法？优缺点？</h4><ul><li><p><strong>非对称加密</strong></p><p>非对称密钥加密，又称公开密钥加密（Public-Key Encryption），加密和解密使用不同的密钥。</p><p>公开密钥所有人都可以获得，<strong>通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密</strong>，<strong>接收方收到通信内容后使用私有密钥解密</strong>。</p></li><li><p><strong>常用非对称加密算法</strong></p><p><img src="https://i.loli.net/2021/04/21/8cmyAzUZYDw5vJt.png" alt="面试题——对称加密和非对称加密3"></p><ul><li>RSA：由 RSA 公司发明，是一个支持<strong>变长密钥</strong>的公共密钥算法，需要加密的文件块的长度也是可变的</li><li>DSA（Digital Signature Algorithm）<strong>：数字签名</strong>算法，是一种标准的 DSS（数字签名标准）</li><li>ECC（Elliptic Curves Cryptography）<strong>：椭圆曲线加密</strong></li></ul></li><li><p><strong>非对称加密优缺点</strong></p><ul><li><strong>优点</strong>： 可以更安全地将公开密钥传输给通信发送方；</li><li><strong>缺点</strong>： 运算速度慢。</li></ul></li></ul><h4 id="10-公钥加密–私钥解密与公钥解密–私钥加密有什么区别">10.<strong>公钥加密–私钥解密与公钥解密–私钥加密有什么区别?</strong></h4><p>主要是应用场景不同。</p><ul><li><p>加解密：公钥加密，私钥解密</p><blockquote><p>不希望别人知道我的消息，<u>所以只有我才能解密</u>，所以可得出公钥负责加密，私钥负责解密</p></blockquote></li><li><p>签名：私钥签名，公钥验签</p><blockquote><p>是不希望有人冒充我发消息，只有<u>我才能发布这个签名</u>，所以可得出私钥负责签名，公钥负责验证</p></blockquote></li><li><p><strong>https可以只有非对称加密吗?</strong></p><p>https<u>验证证书阶段是非对称加密</u>，但是在数据传输阶段是对称加密。<strong>https不可以只有非对称加密</strong>：</p><ul><li><strong>非对称加密</strong>的加解密<strong>效率是非常低</strong>的，而 http 的应用场景中通常端与端之间存在大量的交互，非对称加密的效率是无法接受的；</li><li>在 HTTPS 的场景中只有服务端保存了私钥，一对公私钥只能实现单向的加解密，所以HTTPS 中内容传输加密采取的是对称加密，而不是非对称加密。</li></ul></li></ul><h4 id="11-HTTPS-为什么安全？为什么需要CA证书？只有认证机构可以生成证书吗？HTTPS-绝对安全吗？">11. <strong>HTTPS 为什么安全？为什么需要CA证书？只有认证机构可以生成证书吗？HTTPS 绝对安全吗？</strong></h4><ul><li><p><strong>安全</strong>：因为 HTTPS 保证了传输安全，防止传输过程被监听、防止数据被窃取，可以确认网站的真实性；</p></li><li><p><strong>CA证书</strong>： <u>HTTP 协议被认为不安全是因为传输过程容易被监听者勾线监听、伪造服务器</u>，而 HTTPS 协议主要解决的便是网络传输的安全性问题，所以需要CA证书</p></li><li><p><strong>证书生成</strong>： 如果需要浏览器不提示安全风险，那只能使用认证机构签发的证书。但<strong>浏览器通常只是提示安全风险，并不限制网站不能访问</strong>，所以从技术上<strong>谁都可以生成证书</strong>，只要有证书就可以完成网站的 HTTPS 传输。</p></li><li><p><strong>不绝对安全</strong>： 不是绝对安全的，可以通过中间人攻击。</p><blockquote><p>CA证书不是可以解决“中间人”吗？</p></blockquote><p>过程原理：</p><ol><li>本地请求被劫持（<u>如DNS劫持等</u>），所有请求均发送到中间人的服务器</li><li>中间人服务器返回中间人自己的证书（<strong>但是这一步服务器不是会对服务器证书进行验证吗？</strong>）</li><li>客户端创建随机数，通过中间人证书的公钥对随机数加密后传送给中间人，然后凭随机数构造对称加密对传输内容进行加密传输</li><li>中间人因为拥有客户端的随机数，可以通过对称加密算法进行内容解密</li><li>中间人以客户端的请求内容再向官方网站发起请求</li><li>因为中间人与服务器的通信过程是合法的，官方网站通过建立的安全通道返回加密后的数据</li><li>中间人凭借与官方网站建立的对称加密算法对内容进行解密</li><li>中间人通过与客户端建立的对称加密算法对官方内容返回的数据进行加密传输</li><li>客户端通过与中间人建立的对称加密算法对返回结果数据进行解密</li></ol></li></ul><h4 id="12-http应答码中的301-2-4、500、502、503、504状态码进行解释？">12. <strong>http应答码中的301/2/4、500、502、503、504状态码进行解释</strong>？</h4><ul><li><p><strong>200：</strong>  请求成功。</p></li><li><p><img src="https://i.loli.net/2021/04/21/MRi5Oy9Ltd3v8uA.png" alt="image-20210421150625709"></p></li><li><p><strong>500：</strong> 500 (<strong>服务器内部错误</strong>) 服务器遇到错误，无法完成请求。 例如，服务器<strong>无法识别请求方法</strong>时可能会返回此代码。</p></li><li><p><strong>501：<strong>服务器</strong>不支持请求的功能</strong>，无法完成请求</p></li><li><p><strong>502：</strong> 作为<strong>网关或者代理工作的服务器</strong>尝试执行请求时，从<u>上游服务器</u>接收到<strong>无效</strong>的响应。</p></li><li><p><strong>503：</strong> 由于超载或系统维护，服务器暂时的<strong>无法处理客户端</strong>的请求。</p></li><li><p><strong>504(及时)</strong>：作为网关或者代理工作的服务器尝试执行请求时，<strong>未能及时</strong>从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。</p></li></ul><h4 id="13-介绍一下http请求get、post等？">13.<strong>介绍一下http请求get、post等</strong>？</h4><p><img src="https://i.loli.net/2021/04/21/WRLspE4fvjdKq8F.png" alt="image-20210421140204266"></p><p><strong>重点区分一下get和post：</strong></p><ul><li><p><code>get</code> ：GET方法用于使用给定的URI从给定服务器中<u>检索信息</u>，即从指定资源中请求数据。</p><ul><li><strong>GET请求是可以缓存的</strong>，浏览器历史记录中查找到GET请求；<strong>长度有限制</strong>；不安全，<strong>url会暴露请求的参数</strong></li></ul></li><li><p><code>post</code>：POST方法用于将数据发送到服务器以<u>创建或更新资源</u> 。</p><ul><li><strong>POST请求不会被缓存</strong>；<strong>长度无限制</strong>；更安全</li></ul></li><li><p><strong>特别的：<code>GET产生一个TCP数据包;POST产生两个TCP数据包。</code></strong></p><ul><li><p>get：http header和body一并发送出去 ；</p></li><li><p>post：浏览器先发送header，服务器响应100 continue，浏览器再发送body 。</p><blockquote><p>⚠️ post是不一定会发生两个的。</p><ul><li>HTTP 协议中没有明确说明 POST 会产生两个 TCP 数据包，而且实际测试(Chrome)发现，header 和 body 不会分开发送；</li><li>header 和 body 分开发送<strong>是部分浏览器或框架的请求方法</strong>，不属于 post 必然行为。</li></ul></blockquote></li></ul></li></ul><h5 id="13-1-Get方法长度有限制是怎么回事？">13.1 Get方法长度有限制是怎么回事？</h5><p>HTTP 协议没有 Body 和 URL 的长度限制，<strong>对 URL 限制的大多是浏览器 / 服务器的原因</strong>。</p><ul><li>服务器是因为处理长 URL 要消耗比较多的资源，为了性能和安全（防止恶意构造长 URL 来攻击）考虑，会给 URL 长度加限制；</li><li>浏览器也会设置url有限。</li></ul><h5 id="13-2-POST-方法相比GET方法是绝对安全吗？">13.2 POST 方法相比GET方法是绝对安全吗？</h5><ul><li>POST 比 GET 安全，因为数据在地址栏上不可见；</li><li><strong>POST不是绝对安全</strong>，从传输的角度来说，他们都是不安全的，因为 HTTP 在网络上是明文传输的，只要在网络节点上捉包，就能完整地获取数据报文。</li></ul><p>想要安全，只有使用<strong>HTTPS</strong>。</p><h4 id="14-HTTP是不保存状态的协议-如何保存用户状态">14.  HTTP是不保存状态的协议,如何保存用户状态?</h4><p>Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太⼀样。</p><ul><li><strong>Cookie ⼀般用来保存用户<u>信息</u></strong><ul><li>我们在 Cookie 中<strong>保存已经登录过得用户信息</strong>，下次访问网站的时候页面可以⾃动帮你登录的⼀些基本信息给填了；</li><li>⼀般的网站都会有<strong>保持登录</strong>也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以<strong>存放了⼀个 Token 在 Cookie</strong>中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录⼀般要将 Token<br>重写)；</li><li>登录⼀次网站后访问网站其他页面不需要重新登录。</li></ul></li><li><strong>Session 的主要作用就是通过服务端记录用户的<u>状态</strong></u>。<ul><li><strong>典型的场景是购物⻋</strong>，当你要添加商品到购物⻋的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。</li><li><strong>既然 Session 存放在服务器端，那么我们如何实现 Session 跟踪呢</strong>？大部分情况下，我们都是通过在Cookie 中附加⼀个 Session ID 来方式来跟踪。</li></ul></li></ul><h4 id="15-cookie-、session的作用和区别？">15. <strong>cookie 、session的作用和区别</strong>？</h4><ul><li><p><strong>Cookie</strong></p><ul><li><p><strong>作用</strong>： 服务器发送到用户浏览器并保存在本地的一小块数据，它会在<u>浏览器下次向同一服务器再发起请求时被携带并发送到服务器上</u>。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。</p><blockquote><p>Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p></blockquote></li></ul></li><li><p><strong>Session</strong></p><ul><li><strong>作用</strong>： Session 代表着服务器和客户端<strong>一次会话的过程</strong>，Session <u>对象存储特定用户会话所需的属性及配置信息</u>。</li></ul></li><li><p><strong>二者区别</strong></p><ul><li><strong>作用范围不同</strong>，Cookie 保存在客户端（浏览器），Session 保存在服务器端；</li><li><strong>有效期不同</strong>，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效；</li><li><strong>安全性</strong>： Cookie 存储在客户端，比较容易遭到不法获取，早期有人将用户的登录名和密码存储在 Cookie 中导致信息被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些；</li><li><strong>存储大小不同</strong>：  <u>单个 Cookie 保存的数据不能超过 4K</u>，Session 可存储数据远高于 Cookie；</li><li><strong>存取类型的不同</strong>，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li></ul></li></ul><h5 id="15-1-Session的共享方式？（好未来问过）">15.1 Session的共享方式？（好未来问过）</h5><blockquote><p>参考：<a href="https://www.cnblogs.com/jing99/p/11785070.html">Session如何共享</a></p></blockquote><ul><li><p><strong>问题描述</strong></p><ol><li>在集群环境中，假设客户端第一次访问服务A，服务A响应返回了一个sessionId并且存入了本地Cookie中。第二次不访问服务A了，转去访问服务B；</li><li>访问服务B的时候，会将sessionId加入到请求头中，而服务B因为通过sessionId没有找到相对应的数据，因此它就会<strong>创建一个新的sessionId并且响应返回给客户端</strong></li></ol><p>这样就造成了不能共享Session的问题。</p></li><li><p><strong>解决方案</strong></p><ol><li><strong>使用Cookie实现</strong>。 将系统用户的Session信息加密、序列化后，以Cookie的方式， 统一种植在根域名下（如：.host.com），利用浏览器访问该根域名下的所有二级域名站点时，会传递与之域名对应的所有Cookie内容的特性，从而实现用户的Cookie化Session在多服务间的共享访问。</li><li><strong>数据库同步session。</strong>  每次将session数据存到数据库中。这个方案还是比较可行的。<ul><li><strong>缺点</strong>： Session的并发读写能力取决于MySQL数据库的性能，对数据库的压力大，同时需要自己实现Session淘汰逻辑，以便定时从数据表中更新、删除 Session记录，当并发过高时容易出现表锁。</li></ul></li><li><strong>使用token代替session。</strong> 就是Token方式替代了，但是还是没解决。</li><li><strong>Spring-Sesion实现</strong> 。将原本需要由Web服务器创建会话的过程转交给Spring-Session进行创建。Spring-Session会将原本应该保存在Web服务器内存的Session存放到Redis中。然后<strong>Web服务器之间通过连接Redis来共享数据</strong>，达到Sesson共享的目的。</li></ol></li></ul><h4 id="16-Cookie-和-Session有什么关联？（问过）token有什么作用，优点，（JWT）结构是什么？">16.  Cookie 和 Session有什么关联？（问过）token有什么作用，优点，（JWT）结构是什么？</h4><blockquote><p>参考：<a href="https://juejin.cn/post/6844904009061367821">一文彻底搞懂Cookie、Session、Token到底是什么</a></p></blockquote><ul><li><p><strong>为什么需要session？</strong></p><blockquote><p>既然浏览器已经通过<code>Cookie</code>实现了有状态这一需求，那么为什么又来了一个<code>Session</code>呢？</p></blockquote><p>如果将账户的一些重要信息都存入<code>Cookie</code>中的话，一旦<strong>被拦截</strong>，那么我们所有的账户信息都会丢失掉。所以就出现了<code>Session</code>，在一次会话中将重要信息保存在<code>Session</code>中，浏览器只记录<code>SessionId</code>一个<code>SessionId</code>对应一次会话请求。</p></li><li><p><strong>session和cookie二者关联</strong></p><p><img src="https://i.loli.net/2021/05/04/jNerb9CXZ6Jpgs2.jpg" alt="img"></p><blockquote><p>以用户一次登录为例。</p></blockquote><ol><li>用户第一次请求服务器的时候，用户提交包含<strong>用户名和密码</strong>的表单，放入 HTTP 请求报文中；</li><li>服务器验证该用户名和密码，如果正确则把用户信息存储到 <strong>Redis</strong> 中，它在 Redis 中的 Key 称为 Session ID；并将此 Session 的唯一标识信息 SessionID 返回给浏览器；</li><li>浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名；</li><li>当用户第二次访问服务器的时候，请求会自动判断<u>此域名下是否存在 Cookie 信息，如果存在自动将 Cookie 信息也发送给服务端</u>；</li><li>服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 <u>Session 信息，如果没有找到说明用户没有登录或者登录失效</u>，如果找到 Session 证明用户已经登录可执行后面操作。</li></ol></li><li><p><strong>什么是Token？</strong></p><blockquote><p><code>Session</code>是将要验证的信息存储在服务端，并以<code>SessionId</code>和数据进行对应，<code>SessionId</code>由客户端存储，在请求时将<code>SessionId</code>也带过去，因此实现了状态的对应。</p></blockquote><p>但是，而<code>Token</code>是在服务端将<strong>用户信息经过Base64Url【编码，不是加密】过后传给在客户端</strong>，每次用户请求的时候都会带上这一段信息，因此服务端拿到此信息进行解密后就知道此用户是谁了。</p><p>这个方法叫做<strong>JWT(Json Web Token)</strong>。</p><blockquote><p>一个例子理解：基于Token的身份验证流程，在服务端不需要存储用户的登录记录 。</p><ol><li><p>客户端<strong>使用用户名跟密</strong>码请求登录</p></li><li><p>服务端收到请求，去验证用户名与密码</p></li><li><p>验证成功后，服务端会<strong>签发一个 Token</strong>，再把这个 Token 发送给客户端</p><blockquote><p>Token在服务器端，可以保存在Redis缓存中。</p></blockquote></li><li><p>客户端收到 Token 以后可以把它存储起来，比如<strong>放在 Cookie 里或者 Local Storage</strong> 里</p></li><li><p>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</p></li><li><p>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</p></li></ol></blockquote><ul><li><p><strong>Token的优点</strong></p><ol><li><strong>无状态，可扩展和解耦</strong>： 使用 token 而不是 cookie 的最大优点应该就是无状态，<strong>后端不需要保持对 token 的记录，每个 token 都是独立的</strong>，包含了检查其有效性的所有数据，并通过申明传达了用户信息。</li><li><strong>在 JWT 中存储数据</strong> ： 当使用 cookie 进行验证时，你是将 session id 存储到 cookie 里，JWT 允许你存储任何类型的元数据，只要是合法的 JSON。</li><li><strong>自包含</strong>：由于串包含了用户所需要的信息，避免了多次查询数据库。</li></ol></li><li><p><strong>JWT介绍</strong></p><p>JWT有三部分组成：Header，Payload，Signature。</p><p><img src="https://i.loli.net/2021/05/26/AC6ULh5293HQngE.png" alt="image-20210526214555872"></p><ul><li><p><strong>Header：</strong> 一个Json对象，描述JWT的元数据，通常是下面这样子的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>, # 签名的算法为HS256</span><br><span class="line">  <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span>    # Token类型为JWT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Payload：</strong> 也是一个Json对象，用来存放实际需要传输的数据，也可以自己定义一些私有字段，如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;xiaoMing&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="number">14</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Signature</strong>： <strong>对前面的两部分的数据进行签名</strong>，<strong>防止数据篡改</strong> 。</p><blockquote><p>首先需要定义一个<strong>秘钥</strong>，这个秘钥只有服务器才知道，不能泄露给用户，然后使用<strong>Header中指定的签名算法</strong>(默认情况是HMAC SHA256)。算出签名以后将Header、Payload、Signature三部分拼成一个字符串，<strong>每个部分用<code>.</code>分割开来</strong>，就可以返给用户了。</p></blockquote></li></ul></li></ul></li></ul><h5 id="16-1-session和cookie应该如何去选择（适用场景）？">16.1 session和cookie应该如何去选择（适用场景）？</h5><ul><li>Cookie 只能存储 ASCII 码字符串，而 Session 则可以存储任何类型的数据，因此在<strong>考虑数据复杂性时首选 Session</strong>；</li><li>Cookie 存储在浏览器中，容易被恶意查看。如果非要将一些隐私数据存在 Cookie 中，可以将 Cookie 值进行加密，然后在服务器进行解密；<strong>考虑安全考虑session</strong></li><li>对于大型网站，如果用户所有的信息都存储在 Session 中，那么开销是非常大的，因此<strong>不建议将所有的用户信息都存储到 Session 中，一般是cookie和session配合使用的</strong>。</li></ul><h4 id="17-说说HTTP、TCP、Socket-的关系是什么？">17.<strong>说说HTTP、TCP、Socket 的关系是什么</strong>？</h4><ul><li>TCP/IP 代表<u>传输控制协议/网际协议</u>，指的是一系列协议族；</li><li>HTTP 本身就是一个协议，是<u>从 Web 服务器传输超文本到本地浏览器</u>的传送协议；</li><li><strong>Socket 是 TCP/IP 网络的 API</strong> ，其实就是一个门面模式，它把复杂的 TCP/IP 协议族隐藏在Socket 接口后面。对用户来说，一组简单的接口就是全部，让 Socket 去组织数据，以符合指定的协议。</li></ul><h2 id="3-5-其它">3.5 其它</h2><h4 id="1-介绍一下CDN-？-CDN分发节点各个数据都一样吗？">1. 介绍一下CDN ？ <strong>CDN</strong>分发节点各个数据都一样吗？</h4><ul><li><p><strong>CDN，即内容分发网络</strong></p><ul><li><p><strong>解决静态网页加载</strong></p><p>不同地区用户访问服务器速度不同，<strong>可以把静态网页放在不同地区的服务器，这样用户可以就近去连接</strong>，大大提升体验；</p></li><li><p>发展转换成，<strong>就近接入解决访问网络资源</strong></p><ol><li>如一个电信用户送请求，进入解析系统，会<strong>让用户连接到最近的边缘节点</strong>，然后请求数据；</li><li>如果边缘节点没有数据，则去访问<strong>源节点</strong>；</li><li>源节点也没有，就会去访问<strong>主干节点，去联通服务器中查找；</strong></li><li>最后返回数据。</li></ol></li></ul></li><li><p><strong>CDN分发节点各个数据不一样</strong></p><p>不一样，就相当于DNS服务器<strong>缓存</strong>了些域名→ip数据，如果没有的话还要向上级查询，最终把源站数据拉下来。</p></li></ul><h4 id="2-什么是CDN三级溯源？">2.  什么是CDN三级溯源？</h4><ul><li><strong>CDN目的</strong>。CDN 系统设计的首要目标是<strong>尽量减少用户的访问响应时间</strong></li><li><strong>CDN实现思路</strong>。为达到这一目标，CDN 系统应该<strong>尽量将用户所需要的内容存放在距离用户最近的位置</strong>。也就是说，负责为用户提供内容服务的 <strong>Cache设备应部署在物理上的网络边缘位置</strong>，我们称这一层为 CDN边缘层 。</li><li><strong>CDN系统架构</strong>。CDN 系统中负责全局性管理和控制的设备组成 中心层 ，<strong>中心层同时保存着最多的内容副本</strong>，当边缘层设备未命中时，会向中心层请求，如果在中心层仍未命中，则需要中心层向源站回源。</li></ul><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20210813124031742.png" alt="image-20210813124031742"></p><p>各位同学们好：<br>我们今年大数据课程已经接近尾声，这门课已经开设了三年，每年都会邀请同学们来共同建设。每年我们也都会根据同学们的反馈进行完善，今年我们预计会进行一次更大的系统性更新。<br>按照当初承诺，现在我们统计下大家开源贡献，请按照示例，在进行下方评论完成填写。</p><ul><li>[注1] ：为保证大家隐私情况，该Issue<strong>会在三天内统计完毕后关闭</strong>，请及时填写~</li></ul><table><thead><tr><th style="text-align:center">组号</th><th style="text-align:center">贡献类型（文档建设、Issue、PR等）</th><th style="text-align:center">链接（或其它证明截图）</th><th style="text-align:center">贡献人</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">01组</td><td style="text-align:center">issue</td><td style="text-align:center"><a href="">test-issue</a></td><td style="text-align:center">张三（20196666）、李四（20197777）</td><td style="text-align:center"></td></tr></tbody></table><p>感谢大家的积极参与！</p>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校招 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（二）_计算机基础_Linux&amp;Git</title>
      <link href="/p/44980/"/>
      <url>/p/44980/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我的校招记录：<a href="https://www.hwh.zone/p/29708/">校招笔记（零）_写在前面</a> ，以下是校招笔记总目录。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><h1>二、Linux &amp; Git</h1><h2 id="2-1-Linux">2.1 Linux</h2><h3 id="2-1-1-常用命令">2.1.1 常用命令</h3><ol><li><p><strong>查看80端口状态</strong>？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntulp | grep 80</span><br></pre></td></tr></table></figure><ul><li><code>-t</code> : 指明显示TCP端口</li><li><code>-u</code> : 指明显示UDP端口</li><li><code>-l</code> : 仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序)</li><li><code>-p</code> : 显示进程标识符和程序名称，每一个套接字/端口都属于一个程序</li><li><code>-n</code> : 不进行DNS轮询，显示IP(可以加速操作)</li></ul></li><li><p><strong>怎么查看指定端口是否开放</strong>？</p><p>通过 netstat 命令，注意加上-a参数，看是否有<code>0.0.0.0:22</code> 在被监听。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20210906215822732.png" alt="image-20210906215822732"></p><p>通过lsof命令，如果没有任何显示，则端口没有被打开。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20210906215941036.png" alt="image-20210906215941036"></p></li><li><p><strong>查看进程状态？怎么退出？怎么搜索进程？怎么查看某一个进程的内存和CPU使用情况</strong>？</p><ul><li><p>所有进程状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux  <span class="comment"># 内存中进程信息</span></span><br><span class="line">ps -l    <span class="comment"># 本次登陆所有的进程信息</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/19/ayQRIA8FcqBjtlV.png" alt="image-20210519183338193"></p></li><li><p>退出进程：</p><p><code>exit</code></p></li><li><p>搜索进程：</p><p><code>ps -ef </code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep &lt;进程名&gt;</span><br></pre></td></tr></table></figure><ul><li><code>-e</code>相当于<code>-a</code>是全部列出，<code>-f</code>是显示UID等；</li></ul></li><li><p>查看指定进程（如kalfa）CPU和内存占用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep java</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/23/r5vaDgo4sYGfA8c.png" alt="image-20210523171131744"></p><ul><li>1.3是<strong>CPU占用率</strong>，12.7是<strong>内存占用率</strong>，943100是<strong>物理内存使用量</strong></li></ul><p>还可以使用 top命令查看指定进程（PID）的内存和CPU使用率：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -p 2913</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>查看占用指定端口的进程</strong> ？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i :8040</span><br></pre></td></tr></table></figure><p>这一步只<u>能获取进程名</u>，还要<code>ps</code> 命令进一步获取进程<code>id</code></p><p>如果要杀死相应进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 &lt;进程id&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>任务管理器</strong>（cpu占用率、内存占用率、进程）？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><p>（<strong>总忘</strong>）还可以使用 top命令查看<strong>指定进程（PID）的内存和CPU使用率</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -p</span><br></pre></td></tr></table></figure></li><li><p><strong>内存使用情况 和 磁盘使用情况</strong>？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -m  <span class="comment"># 内存使用情况</span></span><br></pre></td></tr></table></figure><p>磁盘使用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -m</span><br></pre></td></tr></table></figure><p><code>-m</code> : 以Mb为单位显示磁盘使用量和占用率</p></li><li><p><strong>统计单词个数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -o &lt;单词&gt; &lt;文件地址&gt; ｜ wc -l   <span class="comment"># -l表示统计行数</span></span><br></pre></td></tr></table></figure></li><li><p><strong>修改用户权限及常用参数</strong>？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod &lt;参数(可选)&gt; &lt;模式&gt; &lt;文件/文件夹&gt;</span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><code>-R</code> ：递归的修改文件夹下所有子文件/文件夹的所属用户</li></ul><blockquote><p>【示例】如何修改 <code>/test5/5.txt</code> ，权限从<code>rw-r--r--</code> —&gt; <code>r--rwxrwx </code> ？</p><p><img src="https://camo.githubusercontent.com/fc3e66b1514a14614059e9423b7393b39d9a79db57cdcf11f0efd07fd95d32ca/68747470733a2f2f692e6c6f6c692e6e65742f323032302f30392f31372f527a664d625165377471756b786c452e706e67" alt="1580875509098"></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户（U）权限[减去写]权限</span></span><br><span class="line">chmod u-w /test5/5.txt</span><br><span class="line"><span class="comment"># 组（G）/其他用户（O）权限[加上写、执行]</span></span><br><span class="line">chmod go+wx /test5/5.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/20/3wrFPWplI47MTbO.png" alt="1580875689076"></p></li><li><p><strong>查看文件的命令有哪些</strong>？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi 文件名   <span class="comment">#编辑方式查看，可修改</span></span><br><span class="line">cat 文件名  <span class="comment">#显示全部文件内容</span></span><br><span class="line">more 文件名 <span class="comment">#分页显示文件内容</span></span><br><span class="line">less 文件名 <span class="comment">#与 more 相似，更好的是可以往前翻页</span></span><br><span class="line">tail 文件名 <span class="comment">#仅查看尾部，还可以指定行数</span></span><br><span class="line">head 文件名 <span class="comment">#仅查看头部,还可以指定行数</span></span><br></pre></td></tr></table></figure></li><li><p><strong>你平时怎么查看日志的</strong>？</p><p>Linux查看日志的命令有多种: tail、cat、tac、head、echo等，本文只介绍几种常用的方法。</p><ul><li><p><strong>tail（最常使用）</strong></p><p>命令格式: <code>tail[必要参数][选择参数][文件]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tail -n 10 test.log 查询日志尾部最后10行的日志;</span><br><span class="line">tail -n +10 test.log 查询10行之后的所有日志;</span><br><span class="line">tail -fn 10 test.log 循环实时查看最后10行记录(最常用的)</span><br></pre></td></tr></table></figure><p>一般还会配合着grep搜索用，例如 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -fn 1000 test.log | grep <span class="string">&#x27;关键字&#x27;</span></span><br></pre></td></tr></table></figure><p>如果一次性查询的数据量太大,可以进行翻页查看，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -n 4700 aa.log |more -1000 可以进行多屏显示(ctrl + f 或者 空格键可以快捷键)</span><br></pre></td></tr></table></figure></li><li><p><strong>其它配合的命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span>              <span class="comment"># 所有的历史记录</span></span><br><span class="line"><span class="built_in">history</span> | grep XXX   <span class="comment"># 历史记录中包含某些指令的记录</span></span><br><span class="line"><span class="built_in">history</span> | more       <span class="comment"># 分页查看记录</span></span><br><span class="line"><span class="built_in">history</span> -c           <span class="comment"># 清空所有的历史记录</span></span><br><span class="line">!! 重复执行上一个命令</span><br><span class="line">查询出来记录后选中 : !323</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>怎么让进程后台运行</strong>？</p><ol><li><p>命令后面加上**&amp;**即可，实际上，这样是将命令放入到一个作业队列中了；</p><p>通常配合<strong>nohup</strong> ，忽略发送给子命令的挂断SIGHUP信号（<strong>终端关闭</strong>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup subcommand &amp;</span><br></pre></td></tr></table></figure></li><li><p>ctrl + z 挂起进程，使用jobs查看序号，在使用bg %序号后台运行进程；</p><blockquote><p>ctrl + c 是进程终止。</p></blockquote></li><li><p>运行指令前面**+ setsid**，使其父进程编程init进程，<strong>不受SIGHUP信号的影响</strong>。</p></li></ol></li></ol><h3 id="2-1-2-其它问题">2.1.2 其它问题</h3><h4 id="1-请问-proc-目录有什么用？">1.<strong>请问<code>/proc</code> 目录有什么用</strong>？</h4><p>Linux系统上的/proc目录是一种文件系统，即proc文件系统。 /proc是一种伪文件系统（也即虚拟文件系统），存储的是<strong>当前内核运行状态</strong>的一系列特殊文件，用户可以通过这些文件：</p><ul><li><strong>查看系统有关（1）硬件及当前（2）正在运行进程</strong>的信息，甚至可以通过更改其中某些文件来改变内核的运行状态。</li></ul><h4 id="2-Linux的软-硬链接是什么？有什么区别？">2. <strong>Linux的软/硬链接是什么？有什么区别</strong>？</h4><blockquote><p>参考：<a href="https://www.linuxprobe.com/soft-and-hard-links.html">“软链接”和“硬链接”的区别</a></p></blockquote><ul><li><p><strong>什么是链接</strong> ？</p><p>文件在Linux上被分成两部分：<strong>用户数据 (user data) 与元数据 (metadata)</strong> 。</p><ul><li><strong>用户数据</strong>：即文件数据块，保留记录文件真实内容的地方</li><li><strong>元数据</strong>：  是文件的附加属性，如创建大小、时间，所有信息等。其中<strong>inode号</strong> ，是文件的唯一标识。</li></ul><p>系统通过inode号快速找到文件，有一种方式可以<strong>快速寻找到数据元信息</strong>，那就是软/硬链接。</p><p>现在我们创建一个新文件<code>myfile</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ touch myfile &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;This is a plain text file.&quot;</span> &gt; myfile</span><br><span class="line">$ cat myfile</span><br><span class="line"></span><br><span class="line">This is a plain text file.</span><br></pre></td></tr></table></figure><p>来展示二者区别。</p></li><li><p><strong>硬链接</strong></p><p>建立 <code>myfile</code> 的一个硬链接 <code>hard</code> ，可以看到二者的<code>inode</code>  是一致的，也就是说<strong>指向了同一个物理区块</strong>。</p><blockquote><p>硬链接inode ：指向文件的地址 &amp; 维护了一个引用计数，只要有文件还指向这个区块，它就不会从硬盘消失。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ln myfile hard  <span class="comment"># 建立硬链接hard</span></span><br><span class="line">$ ls -li</span><br><span class="line"></span><br><span class="line">25869085 -rw-r--r-- 2 unixzii staff 27 7 8 17:39 hard</span><br><span class="line">25869085 -rw-r--r-- 2 unixzii staff 27 7 8 17:39 myfile</span><br></pre></td></tr></table></figure><ul><li><p><strong>操作硬链接更新文件，等价更新原文件</strong></p><p>使用hard硬链接修改文件，发现原文件也被修改了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;New line&quot;</span> &gt;&gt; hard</span><br><span class="line">$ cat myfile</span><br><span class="line"></span><br><span class="line">This is a plain text file.</span><br><span class="line">New line</span><br></pre></td></tr></table></figure></li><li><p><strong>删除原文件，使用硬链接依旧可以显示</strong></p><p>因为<strong>磁盘块还有硬链接在引用，所以不会消失</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rm myfile  <span class="comment"># 删除原文件</span></span><br><span class="line">$ cat hard   <span class="comment"># 硬链接依旧可以显示</span></span><br><span class="line"></span><br><span class="line">This is a plain text file.</span><br><span class="line">New line</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>软链接</strong></p><p>建立一个<code>soft</code>软链接如下，可以看到二者的inode号是不一样的。</p><blockquote><p>软连接的inode ：保存真实的文件的<strong>绝对路径地址</strong>，找到软链接，还<strong>要根据inode号找到真实文件路径</strong>。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s myfile soft <span class="comment"># 建立软连接soft</span></span><br><span class="line">$ ls -li</span><br><span class="line"></span><br><span class="line">25869085 -rw-r--r-- 2 unixzii staff 27 7 8 17:39 myfile</span><br><span class="line">25869216 lrwxr-xr-x 1 unixzii staff 6 7 8 17:47 soft -&gt; myfile</span><br></pre></td></tr></table></figure><ul><li><p><strong>操作软链接更新文件，等价更新原文件</strong></p><p>因为软链接就是相当个快捷方式，当然更新原文件。</p></li><li><p><strong>删除原文件，使用软链接不会显示</strong></p><p>因为软件inode指向的绝对地址，已经不存在文件了，所以当然不存在文件了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ rm myfile</span><br><span class="line">$ cat soft</span><br><span class="line"></span><br><span class="line">cat: soft: No such file or directory</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>软硬连接区别总结</strong></p><ol><li><p><strong>inode号不同</strong>。硬链接原文件/链接文件公用一个inode号，说明他们是同一个文件，而软链接原文件/链接文件拥有不同的inode号，表明他们是两个不同的文件；</p></li><li><p><strong>链接数目不同</strong>。 软链接的链接数目不会增加；硬链接每多一个链接就会+1。</p></li><li><p><strong>文件大小不同</strong>。硬链接文件显示的大小是跟原文件是一样 ；软链接显示的大小与原文件就不同了，BBB大小是95B，而BBBsoft是3B，因为BBB共有3个字符。</p></li><li><p><strong>文件系统限制</strong>。 软链接没有任何文件系统的限制，任何用户可以创建指向目录的符号链接。</p><blockquote><p><strong>建立软链接就是建立了一个新文件</strong>：当访问链接文件时，系统就会发现他是个链接文件，它读取链接文件找到真正要访问的文件。</p></blockquote></li></ol></li></ul><h3 id="3-查询日志的top10-IP">3. 查询日志的top10 IP?</h3><p>命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="built_in">log</span> | cut -d <span class="string">&#x27; &#x27;</span> -f 1 | sort | uniq -c | sort -nr | awk <span class="string">&#x27;&#123;print $0&#125;&#x27;</span> | head -n 10</span><br></pre></td></tr></table></figure><ol><li><p><code>cat *.log</code>  ：将文本内容打印到屏幕</p></li><li><p><code>cut</code>：截取指定IP那一列</p></li><li><p><code>sort </code>，按IP ASCII码排序：进行排序，默认是按照ascii码进行排序的</p></li><li><p><code>uniq -c  </code> ，统计重复的IP ：统计<strong>相邻的行</strong>的重复数量，结果是类似 <code>3 127.13.13.13</code> ，前面的数字代码重复的行数</p><p><code>sort|uniq -c</code>  统计重复的行数</p></li><li><p><code>sort -n</code>，再次排序 ：是按照数值进行由小到大进行排序， -r是表示逆序，-t是指定分割符，-k是执行按照第几列进行排序</p></li><li><p><code>awk</code> ，只显示IP：按照分割符将一行分割为多个列，第一列用1表示，第二列用​2表示，依次类推</p><p><code>awk -F&quot; &quot; '&#123;print $2&#125;</code>   ，表示用空格作为分隔符进行分割，打印出第2列</p></li><li><p><code>head -n ：</code>表示取前n个</p></li></ol><h2 id="2-2-Git">2.2 Git</h2><blockquote><p><a href="https://zhuanlan.zhihu.com/p/96631135">讲git原理的的一篇不错文章</a></p></blockquote><h3 id="2-2-1-常问命令">2.2.1 常问命令</h3><h4 id="1-什么是Git？是用什么语言编写的？">1.什么是Git？是用什么语言编写的？</h4><ul><li>Git是一个 <u>分布式</u> <u>代码控制系统</u> ；</li><li>Git使用 C 语言编写：<u>使得 GIT 很快，C 语言减少运行时开销</u>来做到这一点。</li></ul><h4 id="2-如何在Git中创建存储库？">2.如何在Git中创建存储库？</h4><ol><li>如果项目不存在，创建</li><li>然后运行 <code>git init</code> ，会在目录下创建一个 <code>.git</code> 目录</li></ol><h4 id="3-列举工作中常用的几个git命令？">3.<strong>列举工作中常用的几个git命令</strong>？</h4><ul><li><code>git add</code> : 增加文件</li><li><code>git commit -m</code> ：提交文件</li><li><code>git status</code> ：拉取远程分支</li><li><code>git push</code> ：合并当前分支和主分支</li><li><code>git pull</code> OR <code>git fetch/git merge</code> ：拉取远程分支</li></ul><h4 id="4-讲讲Git-commit-基本参数？">4.<strong>讲讲Git commit 基本参数</strong>？</h4><blockquote><p>参考：<a href="https://www.cnblogs.com/qianqiannian/p/6005628.html">https://www.cnblogs.com/qianqiannian/p/6005628.html</a></p></blockquote><ul><li><code>git commit -m “message”</code> ：简要说明这次提交的语句</li><li><code>git commit -a</code> ：即使没有经过 <code>git add</code> ，也可以将所有 <u>修改</u> 或 <u>删除</u> 的文件提交到本地仓库，<strong>但新建的文件不会提交</strong></li><li><code>git commit --amend</code> ：追加提交，它可以在<u>不增加一个新的commit-id</u> 的情况下将新修改的代码追加到前一次的commit-id中，</li></ul><h4 id="5-在Git中，你如何还原已经-push-并公开的提交？">5.<strong>在Git中，你如何还原已经 push 并公开的提交</strong>？</h4><ul><li><p>删除或修复新提交中的错误文件，并将其<strong>覆盖</strong>推送到远程存储库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;commit message&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个新的提交，<strong>撤消</strong>在错误提交中所做的所有更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;name of bad commit&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-git-pull-和-git-fetch-有什么区别？">6. <strong>git pull 和 git fetch 有什么区别</strong>？</h4><ul><li><p><code>git pull</code></p><p>取回远程主机某个分支的更新，<strong>再与本地的指定分支合并</strong> （可能要解决冲突）。</p></li><li><p><code>git fetch</code></p><p>从远程获取最新版本到本地，<strong>不会自动合并</strong> ，需要手动执行 <code>git merge</code></p></li></ul><h4 id="7-什么是-git-stash-你一般什么情况下会使用它？">7.<strong>什么是 git stash?你一般什么情况下会使用它</strong>？</h4><blockquote><p>经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是<code>git stash</code>命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用</p></blockquote><ul><li><strong>使用情况</strong>： 当前分支还没处理完，不能去commit提交，但是要去处理一个紧急开发项目，使用 <code>git stash</code></li><li>处理完后<code>git stash pop</code> 继续处理工作</li></ul><h4 id="8-如果本次提交误操作，如何撤销？">8.<strong>如果本次提交误操作，如何撤销</strong>？</h4><ul><li><p><strong>场景1</strong>:改乱了（包括删除等）工作区某个文件的内容（<code>git add 之前</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure><p>丢弃之前所有的修改。</p></li><li><p><strong>场景2</strong>:撤销提交到索引区的文件 （<code>git add 之后</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure><p>此时回到了场景1，然后再使用 <code>git checkout</code></p></li><li><p><strong>场景3</strong>： 撤销已经提交之后的文件（<code>git commit之后</code>）：</p><p>回退版本号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog  <span class="comment"># 查看版本</span></span><br><span class="line">$ git reset --hard  3928   <span class="comment"># 回退版本</span></span><br></pre></td></tr></table></figure></li><li><p><strong>场景4：</strong> 撤销已经push到远程分支之后的文件（<code>git push之后</code>）</p><ul><li><p>创建一个新的提交，<strong>撤消</strong>在错误提交中所做的所有更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;name of bad commit&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除或修复新提交中的错误文件，并将其<strong>覆盖</strong>推送到远程存储库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;commit message&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="9-使用过git-merge和git-rebase吗？它们之间有什么区别？">9.<strong>使用过git merge和git rebase吗？它们之间有什么区别</strong>？</h4><p>都是用来合并分支的，但是：</p><ul><li><p><code>git merge &lt;当前分支要合并的分支&gt;</code> ： 在当前分支合并&lt;指定要合并的分支&gt;，会自动在当前分支（下图为master）创建一个commit节点，保留了要合并的分支（下图为branch1）的提交记录</p><p><img src="https://i.loli.net/2021/05/02/oLOVlIs7yNazKnJ.png" alt="preview"></p></li><li><p><code>git rebase &lt;当前分支变基的基点分支&gt;</code> ：相当将当前分支（下图为branch1）的分支节点（5,6） 依次提交到基点分支（master）的4节点之后，保留了更干净的历史记录，没有生成行的commit 节点</p><p><img src="https://i.loli.net/2021/05/02/ebDoLAUMSd13QRI.png" alt="image-20210502231023075"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 校招 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（一）_Java_JVM</title>
      <link href="/p/42516/"/>
      <url>/p/42516/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我的校招记录：<a href="https://www.hwh.zone/p/29708/">校招笔记（零）_写在前面</a> ，以下是校招笔记总目录。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><h2 id="1-6-JVM相关">1.6 JVM相关</h2><h3 id="1-6-1-常问问题">1.6.1 常问问题</h3><h4 id="1-（被问过）JVM启动的基本配置参数有哪些？（或者说调优参数）">1. （被问过）<strong>JVM启动的基本配置参数有哪些</strong>？（或者说调优参数）</h4><p><strong>「堆栈内存相关」</strong></p><ul><li><p>-Xms： 设置初始堆的大小</p></li><li><p>-Xmx： 设置最大堆的大小</p></li><li><p>-Xmn ：设置年轻代大小，相当于同时配置-XX:NewSize和-XX:MaxNewSize为一样的值</p></li><li><p>-Xss： 每个线程的堆栈大小</p></li><li><p>-XX:NewSize 设置年轻代大小(for 1.3/1.4)</p></li><li><p>-XX:MaxNewSize 年轻代最大值(for 1.3/1.4)</p></li><li><p>-XX:NewRatio 年轻代与年老代的比值(除去持久代)</p></li><li><p>-XX:SurvivorRatio Eden区与Survivor区的的比值</p></li><li><p>-XX:PretenureSizeThreshold 当创建的对象超过指定大小时，直接把对象分配在老年代。</p></li><li><p>-XX:MaxTenuringThreshold设定对象在Survivor复制的最大年龄阈值，超过阈值转移到老年代</p></li></ul><p><strong>「垃圾收集器相关」</strong></p><p>-XX:+UseParallelGC：选择垃圾收集器为并行收集器。</p><ul><li><p>-XX:ParallelGCThreads=20：配置并行收集器的线程数</p></li><li><p>-XX:+UseConcMarkSweepGC：设置年老代为并发收集。</p></li><li><p>-XX:CMSFullGCsBeforeCompaction=5 由于并发收集器不对内存空间进行压缩、整理，所以运行一段时间以后会产生“碎片”，使得运行效率降低。此值设置运行5次GC以后对内存空间进行压缩、整理。</p></li><li><p>-XX:+UseCMSCompactAtFullCollection：打开对年老代的压缩。可能会影响性能，但是可以消除碎片</p></li></ul><p><strong>「辅助信息相关」</strong></p><ul><li><p>-XX:+PrintGCDetails 打印GC详细信息</p></li><li><p>-XX:+HeapDumpOnOutOfMemoryError让JVM在发生内存溢出的时候自动生成内存快照,排查问题用</p></li><li><p>-XX:+DisableExplicitGC禁止系统System.gc()，防止手动误触发FGC造成问题.</p></li><li><p>-XX:+PrintTLAB 查看TLAB空间的使用情况</p></li></ul><h4 id="2-说说堆和栈的区别？">2.<strong>说说堆和栈的区别</strong>？</h4><ol><li><p><strong>功能不同</strong>：栈内存用来存储<u>局部变量和方法调用</u>，而堆内存用<u>来存储Java中的对象</u>；</p><blockquote><p>注：无论是成员变量，局部变量，还是类变量，它们指向的对象都存储在堆内存中。</p></blockquote></li><li><p><strong>共享性不同</strong>：栈内存是线程私有的； 堆内存是所有线程共有的；</p></li><li><p><strong>异常错误不同</strong>：如果栈内存或者堆内存不足，都会抛出异常但不同；</p><blockquote><p>栈空间不足：<code>java.lang.StackOverFlowError</code>。 堆空间不足：<code>java.lang.OutOfMemoryError</code>；</p></blockquote></li><li><p><strong>空间大小</strong>：栈的空间大小远远小于堆的。</p></li></ol><h4 id="3-【重点】请问JVM运行时内存布局分布？-哪些是线程共享的？">3.<strong>【重点】请问JVM运行时内存布局分布？ 哪些是线程共享的</strong>？</h4><p>从概念上大致分为 6 个（逻辑）区域，参考下图。注：Method Area 中还有一个常量池区，图中未明确标出。</p><ul><li>总的来看，JVM 把内存划分为<u>“栈(stack)”与“堆(heap)”</u>两大类</li></ul><p><img src="https://static001.infoq.cn/resource/image/dd/a9/dd614bf56417939aa0e0694fedf2caa9.png" alt="img"></p><p><u>线程私有的：</u></p><ul><li><p><strong>程序计数器</strong>：当同时进行的线程数超过CPU数或其内核数时，就要通过时间片轮询分派CPU的时间资源，不免发生线程切换。这时，<u>每个线程就需要一个属于自己的计数器来记录下一条要运行的指令</u>；</p></li><li><p><strong>虚拟机栈</strong>： <u>每个java方法执行时都会创建一个<strong>桢栈</strong></u>来存储方法的：</p><ul><li><p>变量表、操作数栈、动态链接方法、返回值、返回地址等信息；</p></li><li><p>栈的大小决定了方法调用的可达深度（递归多少层次，或嵌套调用多少层其他方法），“<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.6">栈帧参考</a>” ；</p></li></ul></li><li><p><strong>本地方法栈</strong>： 与虚拟机栈作用相似。但它不是为Java方法服务的，而是调用操作系统原生本地方法时，所需要的内存区域。</p><ul><li>本地方法被执行的时候，在本地方法栈也会创建⼀个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</li></ul></li></ul><p><u>线程共享的：</u></p><ul><li><p><strong>堆</strong>：GC 垃圾回收的主站场，用于<u>存放类的实例对象及 数组实例</u>等；</p><p><img src="https://i.loli.net/2021/05/05/6Ri9BzxGtLpFemP.png" alt="img"></p></li><li><p><strong>方法区</strong>： 线程共享的，用于存放被虚拟机加载的<strong>类的元数据信息</strong>：</p><ul><li>如 <u><strong>常量</strong>、<strong>静态变量</strong></u>和 <u> 即时<strong>编译器编译后的代码</strong></u><strong>；</strong></li><li><strong>运行时常量池：字符串</strong>，int -128~127 范围的值等，它是 <u>方法区</u> 中的一部分。</li></ul></li></ul><h5 id="3-1-JVM-堆中又怎么分的？为什么要这么划分？为什么要取消永久代用元空间代替？">3.1 JVM 堆中又怎么分的？为什么要这么划分？为什么要取消永久代用元空间代替？</h5><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/111809384">https://zhuanlan.zhihu.com/p/111809384</a></p></blockquote><ul><li><p><strong>堆划分</strong>：堆又被划分为，新生代，老年代。新生代又被划分为eden和survivor区。</p></li><li><p><strong>为什么划分新生代、老年代</strong>？</p><p>因为有的对象寿命长，有的对象寿命短。<strong>应该将寿命长的对象放在一个区，寿命短的对象放在一个区。不同的区采用不同的垃圾收集算法。寿命短的区清理频次高一点，寿命长的区清理频次低一点。提高效率</strong>。</p></li><li><p><strong>代替</strong>： 在java7版本前，堆和方法区连在了一起，但这并不能说堆和方法区是一起的，它们在逻辑上依旧是分开的。<strong>但在物理上来说，它们又是连续的一块内存</strong>。</p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20210906224656302.png" alt="image-20210906224656302" style="zoom:50%;" /><p><strong>也就是说，方法区和前面讲到的Eden和老年代是连续的</strong>。</p><p><strong>永久代的垃圾收集是和老年代捆绑在一起的，因此无论谁满了，都会触发永久代和老年代的垃圾收集</strong>。</p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20210906224744446.png" alt="image-20210906224744446" style="zoom:50%;" /><p>在Java8中，元空间(Metaspace)登上舞台，<strong>方法区存在于元空间(Metaspace)</strong>。同时，元空间不再与堆连续，<strong>而且是存在于本地内存（Native memory）。本地内存（Native memory），也称为C-Heap</strong>，是供JVM自身进程使用的。当Java Heap空间不足时会触发GC，但Native memory空间不够却不会触发GC。</p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/image-20210906224848120.png" alt="image-20210906224848120" style="zoom:50%;" /><p><strong>元空间存在于本地内存，意味着只要本地内存足够，它不会出现像永久代中“java.lang.OutOfMemoryError: PermGen space”这种错误。看上图中的方法区，是不是“膨胀”了</strong>。</p></li></ul><h5 id="3-2-程序计数器存哪些东西？能为空吗？">3.2 <strong>程序计数器存哪些东西？能为空吗</strong>？</h5><p>程序计数器是用于存放下一条指令所在单元的地址的地方。</p><p>如果正在执行的是Native方法，这个计数器值为空（Ubdifined）。</p><h4 id="4-（新）说一下Java创建对象的过程？">4. （新）说一下Java创建对象的过程？</h4><p><img src="https://i.loli.net/2021/05/16/EBIujUDhkF9VRtg.png" alt="image-20210516205754856"></p><ol><li><p><strong>类加载检查</strong>： 虚拟机遇到⼀条 new 指令时，⾸先将去检查这个指令的参数是否能在<strong>常量池中定位到这个类的符号引用</strong>，并且检查这个符号引用代表的<strong>类是否已被加载过、解析和初始化过</strong>。如果没有，那必须先执行相应的类加载过程。</p></li><li><p><strong>分配内存</strong>： 在类加载检查通过后，接下来虚拟机将为新⽣对象分配内存。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把⼀块确定大小的内存从 <u>Java 堆中划分出来</u>。</p><blockquote><p><strong>（重要）分配方式有 “指针碰撞” 和 “空闲列表” 两种</strong>，选择那种分配方式由 Java 堆是否规整决定，而Java堆是否规整⼜由所采用的垃圾收集器是否带有压缩整理功能决定。</p><p><img src="https://i.loli.net/2021/05/16/S27KdREVrpGqt5I.png" alt="image-20210516210222497"></p></blockquote></li><li><p><strong>初始化对象字段零值</strong>。 内存分配完成后，进行对象初始化操作。</p><blockquote><p>例如给<strong>对象中（区分类加载过程，初始化类变量</strong>）所有的基本数据变量赋上初始化值， 当我们没有对它们进行赋值操作时就可以使用对象了。</p></blockquote></li><li><p><strong>设置对象头</strong>： 初始化零值完成之后，虚拟机要对对象进行必要的设置，例如这个对象是<u>哪个类的实例、如何才能找到类的元数据信息、对象的哈希吗、对象的 GC 分代年龄等信息</u>。 这些信息存放在对象头中。 另外，根据虚拟机当前运行状态的不同，如是否启用<u>偏向锁</u>等，对象头会有不同的设置方式。</p></li><li><p><strong>执行init() &amp; 构造函数</strong>。然后执行对象内部生成的init方法，然后执行构造器方法（程序员设置的）。</p></li><li><p><strong>内存地址赋给引用</strong>： 在虚拟机会将刚创建好对象的内存地址赋给引用对象。完成此操作后，便可以在程序中通过引用访问对象的实例数据。</p></li></ol><h5 id="4-1-什么是指针碰撞？空闲列表？TLAB">4.1 什么是指针碰撞？空闲列表？TLAB?</h5><p>三种虚拟机<strong>划分堆内存</strong>区域的方法，TLAB也可用来给堆内存分配空间。</p><ul><li><p><strong>指针碰撞</strong></p><p>一般情况下，JVM的对象都放在堆内存中（发生逃逸分析除外）。当类加载检查通过后，Java虚拟机开始为新生对象分配内存。</p><ul><li>如果Java堆中内存是绝对规整的，所有被<strong>使用过的的内存都被放到一边，空闲的内存放到另外一边</strong>，中间放着一个<strong>指针作为分界点</strong>的指示器，<u>所分配内存仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的实例</u>，这种分配方式就是指针碰撞。</li></ul></li><li><p><strong>空闲列表</strong></p><p><u>如果Java堆内存中的内存并不是规整的</u>，已被使用的内存和空闲的内存相互交错在一起，<u>不可以进行指针碰撞</u>。</p><ul><li>虚拟机必须维护一个列表，<strong>记录哪些内存是可用的</strong>，在分配的时候从列表找到一块大的空间分配给对象实例，并更新列表上的记录，这种分配方式就是空闲列表。</li></ul></li><li><p><strong>TLAB</strong></p><p>TLAB 是虚拟机在内存的<u><strong>eden 区</strong>划分出来的一块专用空间，是线程专属的</u>。 在启用TLAB 的情况下，当线程被创建时，虚拟机会为每个线程分配一块TLAB 空间，只给当前线程使用，这样每个线程都单独拥有一个空间，如果需要分配内存，就在自己的空间上分配，这样就不存在竞争的情况，可以大大提高分配效率。</p><blockquote><p>虚拟机通过 -XX:UseTLAB 设定它的。</p></blockquote></li></ul><h5 id="4-2-JVM如何保证对象分配的线程安全问题？">4.2 JVM如何保证对象分配的线程安全问题？</h5><p>因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：</p><ul><li><strong>TLAB</strong>： 为<strong>每⼀个线程预先在Eden区分配⼀块⼉内存TLAB</strong>，JVM在<strong>给线程中的对象分配内存时，⾸先在TLAB分配</strong>，当<u>对象大于TLAB中的剩余内存或TLAB的内存已用尽时</u>，再采用的CAS进行内存分配。</li><li><strong>CAS+失败重试</strong>： CAS 是乐观锁的⼀种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为⽌。虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</li></ul><h4 id="5-描述一下对象分配【原则】？（区分前面new对象【过程】）">5.<strong>描述一下对象分配【原则】？（区分前面new对象【过程】</strong>）</h4><p>JVM 中的堆可划分为两大部分，<u>新生代和老年代</u>，大小比例为1:2：</p><ul><li>新生代分为 Eden 区和 Survivor 区， Survivor 幸存者区又分为大小相等的两块 from 和 to 区</li></ul><p><img src="https://i.loli.net/2021/05/05/6Ri9BzxGtLpFemP.png" alt="img"></p><p>具体回收过程：</p><p><img src="https://i.loli.net/2021/04/19/p2LqRv6krQnbga4.png" alt="image-20210419224230046"></p><p>对象的正常流程：<em>Eden 区 -&gt; Survivor 区 -&gt; 老年代</em>。</p><ol><li>新的对象<strong>优先在 Eden 区分配</strong>（<em>大对象直接进入老年区，避免在Eden区及两个Survivor区之间发生大量的内存复制</em>） ,<strong>当 Eden 区没有足够空间时</strong>，会发起一次<em><strong>Minor GC</strong></em>；</li><li><em><strong>Minor GC</strong></em>采用<strong>复制回收算法</strong>的改进版本回收Eden中对象：<ul><li>先将Eden存活对象迁移到 to 区，然后清空Eden</li><li>最后交换to和from区域<strong>标签</strong></li></ul></li><li>每经过一次<em><strong>Minor GC</strong></em>  （在交换区）后对象年龄加1，对象年龄达到<em><strong>15次</strong></em>后将会晋升到老年代；</li><li>对象提前晋升到老年代，动态年龄判定：如果在 Survivor 区中相<u>同年龄所有对象大小总和大于 Survivor 区大小的一半</u>， 年龄大于或等于该年龄的对象就可以直接进入老年代；</li><li>老年代空间不够时进行<em><strong>Full GC</strong></em>。</li></ol><h5 id="5-1-对象一定分配到堆上吗？">5.1 对象一定分配到堆上吗？</h5><blockquote><p>参考：<a href="https://mp.weixin.qq.com/s?__biz=MzAxOTQxOTc5NQ==&amp;mid=2650500024&amp;idx=1&amp;sn=0997c486387bf56bbe8ca909d55a7edf&amp;chksm=83c88c44b4bf05521d66f6a396550cd9c8379c3fdddee1ee198968f6a9ddd172550d3329a94d&amp;scene=21#wechat_redirect">面试官：是不是所有的对象和数组都会在堆内存分配空间</a></p></blockquote><blockquote><p>小伙，来给我讲一下是不是<strong>所有的对象和数组</strong>都会在堆内存分配空间？</p></blockquote><p>并不是，这涉及到<strong>对象逃逸</strong>。请看下面的代码：</p><p>StringBuffer对象，最终会被return，也就是<strong>会被该方法之外的给利用</strong>。 发生了对象逃逸。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/640" alt="图片"></p><p><strong>在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识</strong>。 但是，有一种特殊情况，那就是如果经过逃逸分析后发现，一<strong>个对象并没有逃逸出方法的话</strong>，那么就可能被<strong>优化成栈上分配</strong>。</p><h4 id="6-对象的访问定位有哪两种方式">6.<strong>对象的访问定位有哪两种方式</strong>?</h4><p>建⽴对象就是为了使用对象，我们的Java程序通过栈上的 reference 数据来操作堆上的具体对象。对象的访问方式有虚拟机实现而定，⽬前主流的访问方式有：<strong>①使用句柄和 ②直接指针两种</strong>。</p><ol><li><p><strong>句柄</strong>： 如果使用句柄的话，那么Java堆中将会划分出⼀块内存来作为句柄池，reference 中存储的就是<strong>对象的句柄地址</strong>，而句柄中包含了<strong>对象实例数据</strong>与<strong>类型数据（存放在方法区</strong>）各⾃的具体地址信息；</p><blockquote><p>使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。</p></blockquote><p><img src="https://i.loli.net/2021/05/16/4XShu2w1nRbZl5x.png" alt="image-20210516211902118"></p></li><li><p><strong>直接指针</strong>： 如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，<strong>而reference 中存储的直接就是对象的地址</strong>。</p><blockquote><p>使用直接指针访问方式最大的好处就是速度快，它节省了⼀次指针定位的时间开销。</p></blockquote><p><img src="https://i.loli.net/2021/05/16/lTvrqnOFu5X9VJk.png" alt="image-20210516212141885"></p></li></ol><h4 id="7-如何判断对象是否需要回收（死亡）？">7.<strong>如何判断对象是否需要回收（死亡</strong>）？</h4><ul><li><strong>可达性分析</strong>：根据引用的关系构造引用链（有向图），在图中不可达的对象就是要被回收的；</li><li><strong>引用计数</strong>：有地方引用该对象，计数器++，引用失效，计数器–，有循环引用的问题。</li></ul><h4 id="8-如何判断一个常量是废弃变量？如何判断一个类是无用类？">8. 如何判断一个常量是废弃变量？如何判断一个类是无用类？</h4><ul><li><p><strong>判断常量是废弃变量</strong></p><p>运行时常量池主要回收的是废弃的常量。</p><p>假如在常量池中存在字符串 “abc”，如果当前没有任何String对象引用该字符串常量的话，就说明常量&quot;abc&quot; 就是废弃常量，如果这时发⽣内存回收的话而且有必要的话，“abc” 就会被系统清理出常量池。</p></li><li><p><strong>判断类是无用类</strong>？</p><p>虚拟机可以对满足下面3个条件的无用类进行回收，这⾥说的仅仅是“可以”，而并不是和对象⼀样不使用了就会必然被回收。</p><ul><li><p>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例；</p></li><li><p>加载该类的 ClassLoader 已经被回收；</p></li><li><p>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</p></li></ul></li></ul><h3 id="1-6-1-GC相关">1.6.1 GC相关</h3><blockquote><p>不错的GC介绍文章：<a href="https://www.infoq.cn/article/3wyretkqrhivtw4frmr3">一文看懂 JVM 内存布局及 GC 原理</a></p></blockquote><h4 id="1-请介绍GC基本原理？有什么优点？GC可以马上回收内存吗？如何主动让虚拟机回收？">1.<strong>请介绍GC基本原理？有什么优点？GC可以马上回收内存吗？如何主动让虚拟机回收</strong>？</h4><p>当程序员创建对象时，GC就开始监控这个对象的<u>地址、大小</u>及<u>使用情况</u> ，当GC确定一些对象为”不可达”时，GC就有责任回收这些内存空间 ：</p><ul><li><strong>基本原理</strong>： GC采用<u><strong>有向图</strong></u>的方式记录和管理<strong>堆(heap)<strong>中的所有对象 ，并确定对象</strong>是否“可达”</strong></li><li><strong>GC优点</strong>：（1）使得程序员不用考虑内存管理 （2）Java中的对象不再有&quot;作用域&quot;的概念，只有对象的引用才有&quot;作用域&quot; （3）有效防止内存泄漏</li><li><strong>马上回收</strong>： 程序员<strong>不能实时</strong>的调用垃圾回收器对某个对象或所有对象进行垃圾回收。</li><li><strong>主动回收</strong>： 手动执行<code>System.gc()</code> ，但是Java语言规范 <u>并不保证</u> GC一定会执行。</li></ul><h5 id="1-1-本地java程序默认启动的是什么垃圾回收器？">1.1 本地java程序默认启动的是什么垃圾回收器？</h5><p>cmd执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintCommandLineFlags -version</span><br></pre></td></tr></table></figure><p>输出：<a href="http://codewenda.com/xx%EF%BC%9Auseparallelgc%E5%92%8C-xx%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A-useparnewgc/">-XX：UseParallelGC</a>。</p><h4 id="2-什么是GC-Root？可以作为GC-Root的对象？">2.<strong>什么是GC Root？可以作为GC Root的对象</strong>？</h4><ul><li><p><strong>GC Root <strong>：  判断对象是通过可达性分析，所以所有的可达性算法</strong>都会有起点</strong> ，这就是 GC Root。</p><ul><li><strong>特点</strong>：当前时刻存活的对象！</li></ul><p>通过GC Root 找出所有活的对象，那么剩下所有的没有标记的对象就是需要回收的对象。</p><p><img src="https://pic1.zhimg.com/80/v2-38552a00d9bfb53f0c780e26a0d4b078_720w.jpg" alt="img"></p></li><li><p><strong>GC Root对象</strong>： （1）虚拟机栈中<strong>引用</strong>的<strong>对象</strong>；（2）方法区中的<strong>静态</strong>变量、<strong>常量</strong>对象；（3）本地方法<strong>引用</strong>的<strong>对象</strong>；（4）被<code>synchronized</code>修饰的对象等。</p></li></ul><h4 id="3-哪些内存区域需要GC">3.<strong>哪些内存区域需要GC?</strong></h4><ul><li><p><strong>（无需）线程独享区域</strong>：<code>PC Regiester、JVM Stack、Native Method Stack</code>，其生命周期都与线程相同（即：与线程共生死），所以无需 GC;</p></li><li><p><strong>（需）线程共享</strong>的 Heap 区、Method Area 则是 GC 关注的重点对象。</p></li></ul><p><img src="https://static001.infoq.cn/resource/image/e3/71/e36c624e8b4300775123f95a34b86571.png" alt="img"></p><h4 id="4-什么时候会触发Full-GC？">4.<strong>什么时候会触发Full GC？</strong></h4><ol><li><p><strong>调用 System.gc()</strong> ；</p></li><li><p><strong>老年代空间不足</strong>；</p></li><li><p><strong>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</strong>；</p><blockquote><p>如果发现<strong>统计之前Minor GC的平均晋升大小比目前old gen剩余的空间大</strong>，则不会触发Minor GC而是转为触发full GC。</p></blockquote></li><li><p><strong>方法区空间不足</strong>。</p><blockquote><p>JVM规范中运行时数据区域中的方法区，在HotSpot虚拟机中又被习惯称为永生代或者永生区，Permanet Generation中存放的为一些<u><strong>class的信息、常量、静态变量等数据</strong></u>，当系统中<strong>要加载的类、反射的类和调用的方法较多</strong>时，Permanet Generation可能会被占满，在未配置为采用CMS GC的情况下也会执行Full GC。如果经过Full GC仍然回收不了，那么JVM会抛出如下错误信息：<code>java.lang.OutOfMemoryError: PermGen space</code> 。<br>为避免Perm Gen占满造成Full GC现象，可采用的方法为增大Perm Gen空间或转为使用CMS GC。</p></blockquote></li></ol><h4 id="5-什么时候触发-Minor-GC-什么原因会导致minor-gc运行频繁？同样的，什么原因又会导致minor-gc运行很慢？">5.<strong>什么时候触发 Minor GC ? 什么原因会导致minor gc运行频繁？同样的，什么原因又会导致minor gc运行很慢</strong>？</h4><ul><li><p><strong>什么时候触发Minor GC ?</strong></p><p><strong>当Eden区不足时</strong>就会触发 Minor GC 。</p></li><li><p><strong>minor gc运行频繁</strong></p></li></ul><ol><li><p>产生了太多朝生夕灭的对象导致需要频繁minor gc</p></li><li><p>新生代空间设置太小</p></li></ol><ul><li><p><strong>minor gc运行很慢</strong></p><ol><li><u>新生代空间设置过大</u>；</li><li><u>对象引用链较长</u>，进行可达性分析时间较长；</li><li><u>新生代survivor区设置的比较小</u>，清理后剩余的对象不能装进去需要移动到老年代，造成移动开销；</li><li><u>内存分配担保失败</u>，由minor gc转化为full gc；</li><li><u>采用的垃圾收集器效率较低</u>，比如新生代使用serial收集器。</li></ol></li></ul><h4 id="6-描述一下GC算法？">6.<strong>描述一下GC算法</strong>？</h4><p>GC算法包含：引用计数法，标记清除，标记复制，标记压缩。</p><ul><li><strong>引用计数</strong>：对于一个对象A，只要有任何一个对象引用了A，则A的引用计数器就加1，当引用失效时，引用计数器就减1。只要对象A的引用计数器的值为0，则对象A就不可能再被使用；</li><li><strong>标记清除</strong>： 垃圾回收分为两个阶段：标记阶段和清除阶段。在标记阶段，首先通过根节点，标记所有从根节点开始的可达对象；然后，在清除阶段，<u>清除所有未被标记的对象，<strong>但会产生很多垃圾碎片</strong></u> ；</li><li><strong>标记复制</strong>： 将内存对半分，总是<strong>保留一块空着</strong>（上图中的右侧），将左侧存活的对象（浅灰色区域）复制到右侧。<strong>避免了内存碎片问题，但是内存浪费很严重</strong>，<u>相当于只能使用 50%的内存</u>；</li><li><strong>标记压缩（标记整理</strong>）：标记过程仍然与<u>“标记-清除”</u>算法一样，但后续步骤<strong>不是直接对可回收对象进行清理</strong>，而是让<strong>所有存活的对象都向一端移动</strong>，然后<strong>直接清理掉端边界以外的内存</strong>（类似于 windows 的磁盘碎片整理），避免垃圾碎片。</li></ul><h5 id="6-1-新生代和老年代用哪些算法？stw问题会发生在新生代吗">6.1 <strong>新生代和老年代用哪些算法？stw问题会发生在新生代吗?</strong></h5><ul><li><p><strong>针对新生代，采用标记复制算法</strong></p><blockquote><p>参考：<a href="https://tech.meituan.com/2017/12/29/jvm-optimize.html">https://tech.meituan.com/2017/12/29/jvm-optimize.html</a></p></blockquote><p>大多数对象在新生代中被创建，其中很多对象的生命周期很短。<strong>每次新生代的垃圾回收（又称Minor GC）后只有少量对象存活</strong>，所以选用复制算法，只需要<strong>少量的复制成本</strong>就可以完成回收。</p><p>HotSpot实现的<strong>复制算法流程</strong>如下:</p><ol><li>当Eden区满的时候,<strong>会触发第一次Minor gc，把还活着的对象拷贝到Survivor From区</strong>；当Eden区<strong>再次触发Minor gc</strong>的时候,会扫描Eden区和From区域，<strong>对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域</strong>,并将Eden和From区域清空。</li><li>当后续Eden又发生Minor gc的时候,会对<strong>Eden和To区域进行垃圾回收</strong>,存活的对象复制到From区域,并将Eden和To区域清空。</li><li>部分对象会在From和To区域中复制来复制去，<strong>如此交换15次</strong>(由JVM参数MaxTenuringThreshold决定,这个参数默认是15)，最终如果还是存活,就存入到老年代。</li></ol></li><li><p><strong>针对老年代对象存活率高的特点</strong></p><p>在新生代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代，<strong>该区域中对象存活率高</strong>。</p><p>老年代的垃圾回收（又称Major GC）通常使用<strong>标记-清理或标记-整理算法。整堆包括新生代和老年代的垃圾回收称为Full GC</strong>（HotSpot VM里，除了CMS之外，其它能收集老年代的GC都会同时收集整个GC堆，包括新生代）。</p></li></ul><h4 id="7-什么是Stop-The-World-什么是安全点？安全区域？">7.<strong>什么是Stop The World ?</strong> 什么是安全点？安全区域？</h4><ul><li><p><strong>Stop The World</strong></p><p>进行<strong>垃圾回收</strong>的过程中，<u>会<strong>涉及对象的移动。为了保证对象引用更新的正确性</strong>，必须暂停所有的用户线程</u>，像这样的停顿，虚拟机设计者形象描述为「Stop The World」。也简称为STW。JVM在暂停的时候，需要选准一个时机。</p><p>由于JVM系统运行期间的复杂性，不可能做到随时暂停，因此引入了<strong>安全点</strong>的概念。</p></li><li><p><strong>安全点</strong></p><blockquote><p>安全点，即程序（非GC先）执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。</p></blockquote><p>安全点的初始目的并不是让其他线程停下，而是找到一个稳定的执行状态。在这个执行状态下，<strong>Java虚拟机的堆栈不会发生变化</strong>。这么一来，<strong>垃圾回收器便能够“安全”地执行可达性分析</strong>。只要不离开这个安全点，Java虚拟机便能够在垃圾回收的同时，继续运行这段本地代码。</p></li><li><p><strong>如何保证中断时所有线程都在安全点</strong></p><ul><li><p><strong>抢先式中断（Preemptive Suspension）</strong><br>抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，<strong>如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上</strong>。现在几乎没有虚拟机采用这种方式来暂停线程从而响应GC事件。</p></li><li><p><strong>主动式中断（Voluntary Suspension）</strong><br>主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。<strong>轮询标志的地方和安全点是重合的</strong>，另外再加上创建对象需要分配内存的地方。</p></li></ul></li></ul><h4 id="8-常见的垃圾回收器有哪些（比如G1）？">8. 常见的垃圾回收器有哪些（比如G1）？</h4><p><img src="https://i.loli.net/2021/05/16/ypmn6LRB5trC3Dl.png" alt="image-20210516215006746"></p><ul><li><p><strong>Serial收集器</strong>。 Serial（串行）收集器收集器是最基本、历史最悠久的垃圾收集器了。大家看名字就知道这个收集器是⼀个单线程收集器了。它的<strong>单线程</strong> 的意义不仅仅意味着它只会使用⼀条垃圾收集线程去完成垃圾收集⼯作，更重要的是它在进行垃圾收集⼯作的时候必须<strong>暂停其他所有的⼯作线程（ “Stop The World”</strong>），直到它收集结束。</p></li><li><p><strong>ParNew收集器</strong>。 ParNew收集器其实就是<strong>Serial收集器的多线程版本</strong>，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和Serial收集器完全⼀样。</p><ul><li>新⽣代采用<u><strong>标记-复制</strong>算法，⽼年代采用<strong>标记-整理</strong>算法</u>。</li></ul></li><li><p><strong>Parallel Scavenge收集器</strong>。 Parallel Scavenge 收集器类似于ParNew 收集器。 那么它有什么特别之处呢？ Parallel Scavenge收集器提供了很多参数供用户找到最合适的停顿时间或最大吞吐量。</p><blockquote><p>如果对于收集器运作不太了解的话，⼿⼯优化存在的话可以选择把内存管理优化交给虚拟机去完成也是⼀个不错的选择。-</p></blockquote><ul><li><u>新⽣代采用<strong>标记-复制</strong>算法，⽼年代采用<strong>标记-整理</strong>算法</u>。</li></ul></li><li><p><strong>（重点）CMS收集器。<strong>CMS（Concurrent Mark Sweep）收集器是一种以</strong>获取最短回收停顿时间</strong>为目标的收集器。这是因为CMS收集器工作时，GC工作线程与用户线程可以<code>并发</code>执行，以此来达到降低收集停顿时间的目的。</p><ul><li>CMS收集器仅作用于<strong>老年代</strong>的收集，基于 <u>“<strong>标记-清除</strong>”</u> 。</li><li><strong>优点</strong>： 并发收集、低停顿。</li><li><strong>缺点（快手</strong>）： CMS收集器<strong>对CPU资源非常敏感</strong>；CMS收集器<strong>无法处理浮动垃圾</strong>（Floating Garbage）。</li></ul></li><li><p><strong>（重点）G1收集器</strong>。 G1重新定义了堆空间，<strong>打破了原有的分代模型，将堆划分为一个个区域</strong>。这么做的目的是在进行收集时不必在全堆范围内进行，这是它最显著的特点。区域划分的好处就是带来了<strong>停顿时间可预测的收集模型</strong>：用户可以指定收集操作在多长时间内完成。即G1提供了接近实时的收集特性。</p><ul><li><strong>并行与并发</strong>：G1能充分利⽤CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核⼼）来缩短Stop-The-World停顿时间。部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。</li><li><strong>分代收集</strong>：虽然G1可以不需要其他收集器配合就能独⽴管理整个GC堆，但是还是保留了分代的概念。</li><li><strong>空间整合</strong>：与CMS的<u>“标记–清除”</u>算法不同，G1从整体来看是基于<strong>标记-整理</strong>算法实现的收集器；从局部上来看是<strong>基于<u>标记-复制</u>算法</strong>实现的。</li><li><strong>可预测的停顿</strong>：这是G1相对于CMS的另⼀个大优势，降低停顿时间是G1 和 CMS 共同的关注点，但G1 除了追求低停顿外，还能建⽴可预测的停顿时间模型，能让使用者明确指定在⼀个⻓度为M毫秒的时间片段内。</li></ul></li></ul><h5 id="8-1-介绍一下CMS-和-G1-垃圾回收器原理？">8.1 介绍一下CMS 和 G1 垃圾回收器原理？</h5><blockquote><p>参考：<a href="https://www.cnblogs.com/heyonggang/p/11718170.html">弄明白CMS和G1，就靠这一篇了</a></p></blockquote><ul><li><p><strong>CMS收集器</strong></p><p>CMS（Concurrent Mark Sweep）收集器是一种以<strong>获取最短回收停顿时间</strong>为目标的收集器。这是因为CMS收集器工作时，GC工作线程与用户线程可以并发执行，以此来达到降低收集停顿时间的目的。</p><p>CMS收集器仅作用于老年代的收集，是基于<u>标记-清除</u>算法的，它的运作过程分为4个步骤：</p><ol><li><strong>初始标记（CMS initial mark） :</strong> 需要<strong>STW</strong>，标记一下GC Roots能<strong>直接</strong>关联到的对象 ；</li><li><strong>并发标记（CMS concurrent mark）</strong>：从GC Roots开始堆中对象进<strong>行可达性分析</strong>，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行；</li><li><strong>重新标记（CMS remark）</strong>：需要<strong>STW</strong> ，<strong>修正并发标记期间</strong>因用户程序继续运作而导致<strong>标记产生变动</strong>的那一部分对象的标记记录 ；</li><li><strong>并发清除（CMS concurrent sweep）</strong>： 清除对象。</li></ol></li><li><p><strong>G1收集器</strong></p><p>在堆的结构设计时，G1打破了以往将收集范围固定在新生代或老年代的模式，G1将堆分成许多<strong>相同大小</strong>的区域单元，每个单元称为<strong>Region</strong>。Region是一块地址连续的内存空间，G1模块的组成如下图所示：</p><blockquote><p>区域划分的好处就是带来了<strong>停顿时间可预测的收集模型</strong>：用户可以指定收集操作在多长时间内完成。即G1提供了接近实时的收集特性。</p></blockquote><p>和CMS挺像的。</p><ol><li>初始标记（Initial Marking）：仅仅只是标记一下GC Roots能<strong>直接关联</strong>到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。</li><li>并发标记（Concurrent Marking）：是从GC Roots开始堆中对象进行<strong>可达性分</strong>析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。</li><li>最终标记（Final Marking）：是为了修正并发标记期间因用户程序继续运作而导致<strong>标记产生变动</strong>的那一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，这阶段需要停顿线程，但是可并行执行。</li><li><strong>筛选回收</strong>（Live Data Counting and Evacuation）：首先<strong>对各个Region的回收价值和成本进行排序</strong>，根据用户<strong>所期望的GC停顿时间来制定回收计划</strong>。这个阶段也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。</li></ol></li></ul><h5 id="8-2-为什么CMS不用标记-压缩算法？">8.2 为什么CMS不用标记-压缩算法？</h5><p>CMS主要关注<strong>低延迟</strong>，因而采用并发方式。</p><p>在<strong>并发清理垃圾</strong>时，如果采用压缩算法，这<strong>涉及到移动存活的对象。如果不进行停顿会很难处理</strong>，违背了CMS初衷，所以采用<strong>标记-清除</strong>算法。</p><h4 id="9-什么是内存泄漏？">9.<strong>什么是内存泄漏</strong>？</h4><p>广义并通俗的说，就是：<u>不再会被使用的<strong>对象</strong>的内存不能被回收</u>，就是内存泄漏。</p><p><strong>内存泄漏场景</strong>：</p><ul><li><p>静态集合类、数组<strong>添加对象以后遗漏了对于他们的处理</strong>，例如HashMap和Vector；</p></li><li><p>各种连接，如数据库连接、网络连接、IO连接；</p></li><li><p>单例模式；</p></li><li><p>变量不合理的作用域。</p></li></ul><h3 id="1-6-2-类加载">1.6.2 类加载</h3><h4 id="1-介绍一下类文件结构？">1. 介绍一下类文件结构？</h4><p>Class⽂件字节码结构组织示意图 。</p><p><img src="https://i.loli.net/2021/05/16/VkMjgwfFb9NGr2L.png" alt="image-20210516220600929"></p><ol><li><strong>魔数:</strong> 确定这个⽂件是否为⼀个能被虚拟机接收的 Class ⽂件。</li><li><strong>Class ⽂件版本</strong>：Class ⽂件的版本号，保证编译正常执行。</li><li><strong>常量池</strong> ：常量池主要存放两大常量：字面量和符号引用。</li><li><strong>访问标志</strong>：标志用于识别⼀些类或者接口层次的访问信息，包括：这个 Class 是类还是接口，是否为 public 或者 abstract 类型，如果是类的话是否声明为 final 等等。</li><li><strong>当前类索引,⽗类索引</strong> ：类索引用于确定这个类的全限定名，⽗类索引用于确定这个类的⽗类的全限定名，由于 Java 语⾔的单继承，所以⽗类索引只有⼀个，除了 java.lang.Object 之外，所有的 java 类都有⽗类，因此除了 java.lang.Object 外，所有 Java 类的⽗类索引<br>都不为 0。</li><li><strong>接口索引集合</strong>：接口索引集合用来描述这个类实现了那些接口，这些被实现的接口将按 implents (如果这个类本身是接口的话则是 extends ) 后的接口顺序从左到右排列在接口索引集合中。</li><li><strong>字段表集合</strong>：描述接口或类中声明的变量。字段包括类级变量以及实例变量，但不包括在方法内部声明的局部变量。</li><li><strong>方法表集合</strong> ：类中的方法。</li><li><strong>属性表集合</strong>： 在 Class ⽂件，字段表，方法表中都可以携带⾃⼰的属性表集合。</li></ol><h4 id="2-什么是类加载器？请你解释一下java程序运行的过程？">2. 什么是类加载器？请你解释一下java程序运行的过程？</h4><blockquote><p>参考 ： <a href="https://cloud.tencent.com/developer/article/1350078">一个简单java程序的运行全过程</a></p></blockquote><p><u>类加载器是一个用来加载类文件的<strong>类</strong></u> 。</p><p>我们所说的类加载过程即是指<strong>JVM虚拟机把.class文件中类信息加载</strong>进内存。主要分为以下3大步、5小步：</p><p><img src="https://i.loli.net/2021/04/21/m1Ot3nQcMGq2YfW.jpg" alt="img"></p><ol><li><p><strong>编译</strong>。 将编译的<code>.java</code> 文件编译为<code>.class</code>字节码文件，然后交给JVM运行；</p></li><li><p><strong>加载</strong> ：class字节码文件从各个来源通过<strong>类加载器</strong>装载入<u>内存</u>中 。</p><blockquote><ul><li><strong>来源</strong>：包本地路径下编译生成的.class文件，从jar包中的.class文件，从远程网络，以及动态代理实时编译</li><li><strong>类加载器</strong> ：一般包括<strong>启动类加载器</strong>，<strong>扩展类加载器</strong>，<strong>系统类加载器</strong>，以及用户的<u><strong>自定义类加载器</strong> （代码加密防止反编译）</u>。</li></ul></blockquote></li><li><p><strong>链接</strong>： 分为，验证、准备、解析（”正-中-准-心“）三阶段</p><ul><li><p><strong>验证</strong>： 保证加载进来的<u>字节流符合虚拟机规范</u>；</p><blockquote><p><strong>文件格式的验证</strong>，比如常量中是否有不被支持的常量？文件中是否有不规范的或者附加的其他信息？</p><p><strong>元数据的验证</strong>，比如该类是否继承了被final修饰的类？类中的字段，方法是否与父类冲突？是否出现了不合理的重载？</p><p><strong>字节码的验证</strong>，保证程序语义的合理性，比如要保证<u>类型转换的合理性</u>。</p><p><strong>符号引用的验证</strong>，比如校验符号引用中通过全限定名是否能够找到对应的类？校验符号引用中的访问性（private，public等）是否可被当前类访问？</p></blockquote></li><li><p><strong>准备</strong>：类变量（<strong>注意，不是实例变量</strong> ）分配内存，并且赋予<strong>初值</strong>（虚拟机根据不同类型设定的初始值）；</p><blockquote><p>这些变量所使用的内存都将在<strong>方法区</strong>中进行分配 ，进行<strong>零初始化</strong>：</p><ul><li>即数字类型初始化为 0 ，boolean 初始化为 false，引用类型初始化为 null 等</li></ul></blockquote></li><li><p><strong>解析</strong>：将常量池内的 <u>符号引用</u> 替换为 <u>直接引用</u> 的过程。</p><blockquote><p><u>符号引用：</u>即一个字符串，但是这个字符串给出了一些能够唯一性识别一个方法，一个变量，一个类的相关信息。<br><u>直接引用：</u>可以理解为一个内存地址，或者一个偏移量。比如类方法，类变量的直接引用是指向方法区的指针；而实例方法，实例变量的直接引用则是从实例的头指针开始算起到这个实例变量位置的偏移量。</p><p>🌾 实例： 调用方法hello()，方法的地址是1234567，那么hello就是符号引用，1234567就是直接引用。</p></blockquote></li></ul></li><li><p><strong>初始化</strong>。 初始化就是执行类的<code> cinit</code>()的过程。</p><blockquote><p>❔ 和准备阶段那个初始化看得我有点迷糊？</p><ul><li><strong>在编译阶段</strong>，编译器收集所有的<strong>静态字段的赋值语句及静态代码块</strong>，并按 <u>语句出现的顺序</u> 拼接出一个类初始化方法 <code>&lt;clinit&gt;()</code>。此时，执行引擎会调用这个方法对静态字段进行代码中编写的初始化操作。</li></ul></blockquote></li></ol><h4 id="3-知道类的生命周期吗？">3.<strong>知道类的生命周期吗</strong>？</h4><p><strong>在类加载的过程</strong>再加上：</p><ol start="4"><li><strong>使用</strong>。new出对象程序中使用</li><li><strong>卸载</strong>。执行垃圾回收</li></ol><h4 id="4-请你介绍一下类加载器？">4.<strong>请你介绍一下类加载器</strong>？</h4><img src="https://upload-images.jianshu.io/upload_images/7634245-7b7882e1f4ea5d7d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" style="zoom:50%;" /><p>JVM预定义的三种类型类加载器：</p><ul><li><strong>启动类加载器（BootstrapClassLoader）</strong>：是一般用本地代码实现，负责将 <code>&lt;Java_Runtime_Home&gt;/lib</code>下面的类库加载到内存中；</li><li><strong>标准扩展类加载器（ExtensionClassLoader）</strong>：<code>&lt; Java_Runtime_Home &gt;/lib/ext</code>或者由系统变量 <code>java.ext.dir</code>指定位置中的类库加载到内存中；</li><li><strong>系统类加载器（AppClassLoader）</strong>：又叫应用类加载器，其父类是Extension。它是应用最广泛的类加载器。它从<u>环境变量或者系统属性<code>java.class.path</code></u>所指定的目录中加载类，是<strong>用户自定义加载器的默认父加载器</strong>。</li></ul><h4 id="5-请你介绍一下双亲委派机制？为什么要这么做？">5.<strong>请你介绍一下双亲委派机制？为什么要这么做</strong>？</h4><ul><li><p><strong>双亲委派机制</strong>。某个特定的类加载器在接到加载类的请求时，首先将加载任务<strong>委托给父类加载器</strong>，<strong>依次递归</strong>，如果父类加载器可以完成类加载任务，就成功返回；<strong>只有父类加载器无法完成此加载任务时，才自己去加载</strong>；</p></li><li><p><strong>为什么要这么做？防止内存中出现多份同样的字节码</strong> 。</p><blockquote><p>比如两个类A和类B都要加载System类：</p><ul><li>如果不用委托：而是自己加载自己的，那么类A就会加载一份System字节码，然后类B又会加载一份System字节码，<strong>这样内存中就出现了两份System字节码</strong>。</li><li>如果使用委托机制：会递归的向父类查找，也就是<strong>首选用Bootstrap尝试加载</strong>，如果找不到再向下。这里的System就能在Bootstrap中找到然后加载，如果此时类B也要加载System，也从Bootstrap开始，此时<strong>Bootstrap发现已经加载过了System那么直接返回内存中的System即可而不需要重新加载</strong>，这样内存中就只有一份System的字节码了。</li></ul></blockquote></li></ul><h5 id="5-1-如何自定义类加载器-，如何打破双亲委派机制-？">5.1 如何自定义类加载器 ，如何打破双亲委派机制 ？</h5><ul><li><p><strong>自定义类加载器 &amp; 打破双亲委派机制</strong></p><p>在实现自己的ClassLoader之前，我们先看一下JDK中的ClassLoader是怎么实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">protected</span> <span class="keyword">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line"> <span class="number">2</span>     <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line"> <span class="number">3</span>     &#123;</span><br><span class="line"> <span class="number">4</span>     <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line"> <span class="number">5</span>     Class c = findLoadedClass(name);</span><br><span class="line"> <span class="number">6</span>     <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line"> <span class="number">7</span>         <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="number">8</span>         <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line"> <span class="number">9</span>             c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">10</span>         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">11</span>             c = findBootstrapClass0(name);</span><br><span class="line"><span class="number">12</span>         &#125;</span><br><span class="line"><span class="number">13</span>         &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"><span class="number">14</span>             <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line"><span class="number">15</span>             <span class="comment">// to find the class.</span></span><br><span class="line"><span class="number">16</span>             c = findClass(name);</span><br><span class="line"><span class="number">17</span>         &#125;</span><br><span class="line"><span class="number">18</span>     &#125;</span><br><span class="line"><span class="number">19</span>     <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line"><span class="number">20</span>         resolveClass(c);</span><br><span class="line"><span class="number">21</span>     &#125;</span><br><span class="line"><span class="number">22</span>     <span class="keyword">return</span> c;</span><br><span class="line"><span class="number">23</span>     &#125;</span><br></pre></td></tr></table></figure><p>1、<strong>如果不想打破双亲委派模型，那么只需要重写findClass方法即可</strong></p><p><strong>（1）继承ClassLoader</strong></p><p><strong>（2）重写findClass()方法</strong></p><p>2、<strong>如果想打破双亲委派模型，那么就重写整个loadClass方法</strong></p><p><strong>（1）继承ClassLoader</strong></p><p><strong>（2）重写findClass()方法</strong>6</p><p><strong>（3）调用defineClass()方法</strong></p></li><li><p><strong>tomcat 为什么要违背双亲委托机制</strong>？</p><ol><li>双亲委托机制不能满足tomcat的业务需求；</li><li>Webapp类加载器需要独立加载自身的class以及依赖的jar；</li><li>例如，<strong>webapp1</strong>依赖的spring版本为4.x，另一个<strong>webapp2</strong>依赖的spring版本为5.x. 如果使用双亲委托，那么spring的版本只能存在一个，没法满足这个需求。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（一）_Java_锁</title>
      <link href="/p/45493/"/>
      <url>/p/45493/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我的校招记录：<a href="https://www.hwh.zone/p/29708/">校招笔记（零）_写在前面</a> ，以下是校招笔记总目录。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><h2 id="1-5-锁">1.5 锁</h2><h4 id="【新增】-java常用的并发工具类？">【新增】 java常用的并发工具类？</h4><blockquote><p>这篇不错：<a href="https://zhuanlan.zhihu.com/p/163654320">《今天面试了吗》- 并发编程之AQS同步工具类</a></p></blockquote><p>JUC就是java.util.concurrent包，这个包俗称JUC，里面都是<strong>解决并发问题</strong>。</p><p>常用四大并发工具包（以下都是基于<strong>AQS</strong>实现的）：</p><ol><li><p><strong>CountDownLatch</strong>： CyclicBarrier描述的是“允许一组线程相互等待，直到<strong>到达某个公共屏障点</strong>，才会进行后续任务”。</p><p>而<strong>CountDownLatch</strong>所描述的是“在<strong>完成一组正在其他线程中</strong>执行的操作之前，它允 一个或多个线程一直等待”。</p><p>在API中是这样描述的：用给定的计数初始CountDownLatch。由于调用了countDown方法，所以在当前计数到达零之前，await方法会一直受阻塞。之后，会释放所有等待的线程，await的所有后续调用都将立即返回。这种现象只出现一次（计数无法被重置。如果需要重置计数，请考虑使CyclicBarrier）。</p></li><li><p><strong>CyclicBarrier</strong>：CyclicBarrier是一个同步辅助类。它允许<strong>一组线程互相等待</strong>，<strong>直到到达某个公共屏障点</strong>。在涉及一组固定大小的线程的程序里，这些线程必须不时的互相等待，此时CyclicBarrier 很有用。因为CyclicBarrier在释放等待线程后可以重用，因此成为循环的屏障。</p><blockquote><p>使用**await()**方法，每个线程调用await()方法告诉CyclicBarrier 我已经到达了屏障，然后当前线程被阻塞。当所有线程都到达了屏障，结束阻塞，所有线程可继续执行后续逻辑。</p></blockquote></li><li><p><strong>Semaphore</strong>：信号量Semaphore是一个控制访问<strong>多个共享资源的计数器</strong>，和CountDownLatch一样，其本质上是一个“共享锁”。在API是这么介绍信号量的：一个计数信号量，从概念上讲，信号量维护了一个许可集。</p></li><li><p><strong>ExChanger</strong> ：Exchanger是一个同步器，字面上就可以看出这个类的主要作用是交换数据。Exchanger有点<strong>类似CyclicBarrier</strong>，前面说到CyclicBarrier是一个栅栏，到达栅栏的 线程需要等待一定数量的线程到达后，才能通过栅栏。Exchanger可以看成是一个双向的栅栏。线程1到达栅栏后，会首先观察有没有其他线程已经到达栅栏，如果没有就会等待。如果已经有其他线程（比如线程2）到达了，就会<strong>以成对的方式交换各自携带的信息</strong>，因此Exchanger非常适合<strong>两个线程</strong>之间的<strong>数据交换</strong>。</p></li></ol><h4 id="1-5-1-synchronized-相关">1.5.1 synchronized 相关</h4><h5 id="1-1-重点-说一说自己对于-synchronized-关键字的了解-synchronized-底层原理">1.1 [重点]<strong>说一说自己对于 synchronized 关键字的了解? synchronized 底层原理</strong> ?</h5><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/356010805">Java面试常见问题：Monitor对象是什么？</a></p><p><a href="https://www.cnblogs.com/aspirant/p/11470858.html">深入分析Synchronized原理(阿里面试题)</a></p></blockquote><ul><li><p><strong>基本了解</strong></p><p>synchronized关键字解决的是多个线程之间访问资源的同步性，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</p><ul><li>synchronized属于重量级锁，效率低下，因为监视器锁（monitor）是<strong>依赖于底层的操作系统的<u>Mutex Lock</u></strong> 来实现的；</li><li>Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，<strong>而操作系统实现线程之间的切换</strong>时需要从用户态转换到内核态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的synchronized效率低的原因。</li></ul></li><li><p><strong>moniter介绍</strong></p><blockquote><p><strong>Monitor对象存在于每个Java对象的对象头Mark Word中（存储的指针的指向），Synchronized锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因，同时notify/notifyAll/wait等方法会使用到Monitor锁对象，所以必须在同步代码块中使用</strong>。</p></blockquote><p>在HotSpot虚拟机中，Monitor是基于C++的<strong>ObjectMonitor类</strong>实现的，其主要成员包括：</p><ul><li>_owner：指向持有ObjectMonitor对象的线程</li><li>_WaitSet：存放处于wait状态的线程队列，即调用wait()方法的线程</li><li>EntryList：存放处于等待锁block状态的线程队列</li><li>_count：约为_WaitSet 和 _EntryList 的节点数之和</li><li>_cxq: 多个线程争抢锁，会先存入这个单向链表</li><li>_recursions: 记录重入次数</li></ul></li><li><p><strong>底层原理</strong></p><p>synchronized 关键字底层原理属于 JVM 层面。</p><p><strong>① synchronized同步语句块的情况</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;synchronized 代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 JDK ⾃带的 javap 命令查看 SynchronizedDemo 类的相关字节码信息：</p><ul><li><p>⾸先切换到类的对应⽬录执行 javac SynchronizedDemo.java 命令⽣成编译后的 .class ⽂件，然后执行 <code>javap -c -s-v -l SynchronizedDemo.class</code></p></li><li><p><img src="https://i.loli.net/2021/05/16/DTSB86Z2GcRy9XC.png" alt="image-20210516130259067"></p></li></ul><p><strong>synchronized</strong>同步语句块的实现使用的是monitorenter和 monitorexit指令，其中<strong>monitorenter指令指向同步代码块的开始位置，monitorexit指令则指明同步代码块的结束位置</strong>。</p><ol><li><p>当执行monitorenter 指令时，线程试图获取锁也就是获取 monitor的持有权。当计数器为0则可以成功获取，获取后将锁计数器设为1也就是加1 ;</p><blockquote><p>monitor对象存在于每个Java对象的对象头中 synchronized 锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因。</p></blockquote></li><li><p>相应的在执行monitorexit 指令后，<strong>将锁计数器设为0</strong>，表明锁被释放；</p></li><li><p>如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外⼀个线程释放为⽌。</p></li></ol></li></ul><p><strong>② synchronized修饰方法的的情况</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;synchronized 方法&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/16/oElScfCHI978Qtw.png" alt="image-20210516131938787"></p><ul><li><p>synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是<code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是⼀个同步方法，JVM 通过该 ACC_SYNCHRONIZED 访问。</p><blockquote><p>当方法调用时，调用指令将会检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置，如果设置了，执行线程将先获取monitor，获取成功之后才能执行方法体，方法执行完后再释放monitor。<strong>在方法执行期间，其他任何线程都无法再获得同一个monitor对象</strong>。</p></blockquote><p>两种同步方式<strong>本质上没有区别</strong>，只是方法的同步是一种隐式的方式来实现，无需通过字节码来完成。两个指令的执行是JVM通过调用操作系统的<strong>互斥原语mutex</strong>来实现，被阻塞的线程会被挂起、等待重新调度，会导致“用户态和内核态”两个态之间来回切换，对性能有较大影响。</p></li></ul><h5 id="1-2-请你谈谈关于Synchronized和ReentrantLock？">1.2 <strong>请你谈谈关于Synchronized和ReentrantLock？</strong></h5><ul><li><p><strong>相似点</strong></p><ul><li><p><strong>都是阻塞式同步</strong>：一个线程获得了对象锁，进入了同步块，其他访问该同步块的线程都必须阻塞在同步块外面等待；</p><blockquote><p>线程阻塞和唤醒的代价是比较高的（操作系统需要在用户态与内核态之间来回切换，代价很高，不过可以通过对锁优化进行改善）。</p></blockquote></li><li><p><strong>都是可重入锁</strong>：是同一个线程可重复获得锁，每获得一次，锁的计数器都自增1，所以要等到锁的计数器下降为0时才能释放锁。</p></li></ul></li><li><p><strong>不同点</strong></p><ul><li><p><strong>实现原理</strong>： Synchronized是java语言的关键字，是原生语法层面的互斥， JVM 层面；ReentrantLock是JDK 1.5后的API层面的互斥锁，需要<u>lock()和unlock()方法配合try/finally语句块来完成</u>；</p><blockquote><p><img src="https://i.loli.net/2021/04/28/tSoiYbRl5kdA9my.png" alt="image-20210428222639476"></p></blockquote></li><li><p><strong>是否避免死锁</strong>： synchronized<strong>在发生异常时</strong>，会自动释放线程占有的锁，<strong>因此不会导致死锁现象</strong>发生；Lock不会主动适应 <code>unLock()</code> 释放，必须手动在f<code>inally</code>释放；相⽐synchronized，ReentrantLock增加了⼀些高级功能。主要来说主要有三点：①等待可中断；②可实现公平锁；③可实现选择性通知（锁可以绑定多个条件）</p></li><li><p><u><strong>线程等待可中断</strong>：</u> Lock可以让等待锁的线程响应中断，线程可以中断去干别的事务；而synchronized却不行，使用synchronized时，等待的线程会一直等待下去；</p></li><li><p><strong>公平锁</strong>： synchronized的锁是非公平锁，ReentrantLock默认情况下也是非公平锁，但可以通过带布尔值的构造函数要求使用公平锁；</p><ul><li><strong>选择性通知</strong>： synchronized关键字与wait()和notify()/notifyAll()方法相结合可以实现等待/通知机制，ReentrantLock类当然也可以实现，但是需要借助于Condition接口与newCondition() 方法。<br>Condition是JDK1.5之后才有的，它具有很好的灵活性，⽐如可以实现多路通知功能也就是在⼀个Lock对象中可以创建多个Condition实例（即对象监视器），线程对象可以注册在指定的Condition中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使⽤notify()/notifyAll()方法进行通知时，被通知的线程是由 JVM 选择的，⽤ReentrantLock类结合Condition实例可以实现“选择性通知” ，这个功能非常重要，而且是Condition接口默认提供的。而synchronized关键字就相当于整个Lock对象中只有⼀个Condition实例，所有的线程都注册在它⼀个身上。如果执行notifyAll()方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，<u>而Condition实例的signalAll()方法 只会唤醒注册在该Condition实例中的所有等待线程</u>。</li></ul></li></ul></li></ul><h5 id="1-3-synchronized锁住的是什么，在项目中遇到了吗？">1.3 <strong>synchronized锁住的是什么，在项目中遇到了吗</strong>？</h5><p>synchronized本身并不是锁，锁本身是一个对象，synchronized最多相当于“加锁”操作，所以synchronized并不是锁住代码块。</p><p>（<strong>重点</strong>）Java中的每一个对象都可以作为锁，具体表示有三种形式：</p><p><img src="https://i.loli.net/2021/05/04/LzjeqdIi5rbM819.png" alt="image-20210504232344320"></p><blockquote><p>面试中面试官经常会说：“单例模式了解吗？来给我⼿写⼀下！给我解释⼀下双重检验锁方式实现单例模式的原理呗！”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton       <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//先判断对象是否已经实例过，没有实例化过才进⼊加锁代码</span></span><br><span class="line">       <span class="keyword">if</span> (uniqueInstance WX <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//类对象加锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance WX <span class="keyword">null</span>) &#123;</span><br><span class="line">        uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>uniqueInstance 采用 volatile 关键字修饰也是很有必要的，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uniqueInstance = <span class="keyword">new</span> Singleton();</span><br></pre></td></tr></table></figure><p>这段代码其实是分为三步执行：</p><ol><li><p>为 uniqueInstance 分配内存空间</p></li><li><p>初始化 uniqueInstance</p></li><li><p>将 uniqueInstance 指向分配的内存地址</p></li></ol><p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1&gt;3&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致⼀个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 getUniqueInstance() 后发现 uniqueInstance 不为空，因此返回uniqueInstance，<u>但此时 uniqueInstance 还未被初始化</u>。</p><h5 id="1-4-synchronized锁的优化机制了解吗？">1.4 <strong>synchronized锁的优化机制了解吗</strong>？</h5><blockquote><p>参考：<a href="https://juejin.cn/post/6844903726545633287">死磕Synchronized底层实现</a></p><p><a href="https://tech.meituan.com/2018/11/15/java-lock.html">美团技术团队</a></p></blockquote><p>synchronized本身也在不断优化锁的机制，有些情况下他并不会是一个很重量级的锁了。优化机制包括：</p><ul><li>自适应锁、自旋锁、锁消除、锁粗化、轻量级锁和偏向锁；</li><li>锁的状态从低到高依次为：<strong>无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁</strong>。</li></ul><p><img src="https://i.loli.net/2021/05/16/PjXkchreF9sSEKG.png" alt="image-20210516131559341"></p><p>常见的锁：</p><ul><li><p><strong>无锁</strong>：无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，<strong>但同时只有一个线程能修改成功</strong>。</p><blockquote><p>锁到底存在哪里呢？答案就是对象头中。</p><p>对象头主要又包括了两部分数据：Mark Word（标记字段）、Class Point（类型指针）。</p></blockquote><ol start="0"><li><p>初始mark word 将是可偏向状态，此时的 <u>是否偏向锁</u> 为 0，表示当前没有任何一个线程持有该锁。</p><p><img src="https://i.loli.net/2021/05/21/bNepQwU6scYXCv5.png" alt="image-20210521210754337"></p></li></ol></li><li><p><strong>偏向锁</strong>：在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。</p><blockquote><p>JDK1.6 中为了提高一个对象在一段很长的时间内都只被一个线程用做锁对象场景下的性能，引入了偏向锁。在<strong>第一次</strong>获得锁时，会有一个 CAS 操作（见下）；<strong>之后</strong>该线程再获取锁，只会执行几个简单的命令，而不是开销相对较大的 CAS 命令。</p></blockquote><ol><li><p><strong>CASE 1 :</strong> 线程<strong>第一次</strong>获得锁，如果<strong>未偏向</strong>，通过 <strong>CAS</strong> 指令：</p><p><img src="https://i.loli.net/2021/05/21/fwEX4OAMFnyWrbJ.png" alt="image-20210521210949942"></p><ul><li><strong>插入线程ID :</strong> 向mark word插入线程ID</li><li><strong>偏向锁标识</strong>：将 mark word 中的偏向锁标识从<code>0→1</code></li><li><s><strong>锁标志位</strong>：不修改！因为不变！</s></li></ul><p>如果操作成功：，则说明获得了偏向锁，以后当前<u>线程等于owner</u>就可以<strong>零成本</strong>的直接获得锁；</p><p>如果操作失败，说明有其它线程获取了锁：</p><ul><li><strong>如果偏向线程还存在</strong>：直接进行升级为轻量级锁；</li><li><strong>如果偏向线程不存在：先修改锁标识为01→00</strong> ，再升级为轻量级锁。</li></ul></li><li><p><strong>CASE 2 :</strong>  这是<strong>一次可重入</strong>，偏向线程是自己。</p><p>在<u>当前线程栈</u>中找到一个可用的 <strong>Lock Record</strong> <strong>：并将其 obj 指向锁对象 &amp; Displaced Mark Word 置为null</strong></p><img src="https://i.loli.net/2021/05/18/LXj2NZi7fVOzpox.png" alt="img" style="zoom:50%;" /></li></ol></li><li><p><strong>轻量级锁</strong>：当发现多线程竞争时，偏向锁会升级为轻量级锁，一般来说，会在 safepoint（此时用户代码不会执行）中去查看<u>偏向的线程是否还存活</u>。</p><p><img src="https://i.loli.net/2021/05/18/anN1S6AD7MI9gK8.jpg" alt="img"></p><ol><li>如果偏向的线程已经不存活或者不在同步块中，则将对象头的 mark word 改为无锁状态（unlocked），<strong>重新偏向新的线程</strong>；</li><li>如果存活且还在<strong>同步块</strong>中，原偏向的线程继续拥有锁，当前线程则走入到轻量级锁的加锁逻辑中；</li></ol><p>轻量级锁的处理流程 ：</p><ol start="3"><li>发现已经有偏向的线程了，则会<strong>先 撤 销偏向锁，然后升级为轻量锁</strong> 。通过<strong>CAS命令更新</strong>：</li></ol><p><img src="https://i.loli.net/2021/06/02/BMyh36f2OPCGkKe.png" alt="image-20210602161303534"></p><ul><li><p><strong>修改此前 <u>当前线程栈帧Lock Record</u>：</strong> （1）Displaced Mark Word 复制 mark word （此时<strong>无锁</strong>状态）中的现有内容</p></li><li><p><strong>修改mark word <strong>：<u>mark word 指向</strong>当前线程栈帧Lock Record的</strong> <strong>Displaced Mark Word</strong>的地址</u>，见上图；</p></li><li><p><strong>修改锁标志位</strong>： <code>01 → 00</code></p><p><img src="https://i.loli.net/2021/05/21/QNDEreAK6Ulohvg.png" alt="image-20210521214141329"></p></li></ul><ol start="4"><li><p>上述CAS更新成功，则<strong>当前线程获得了对象的锁</strong>  ；</p><p>如果不成功：</p><ul><li><p>检查Mark Word是否指向当前线程的栈帧的Lock Record ，是则是一次<strong>可重入</strong></p><blockquote><p>设置<code>Lock Record</code>第一部分（<code>Displaced Mark Word</code>）为null，起到了一个重入计数器的作用。然后结束。</p></blockquote></li><li><p>如果不是则是进行<strong>自旋等待</strong></p></li></ul></li><li><p>当<strong>1.自旋超过一定的次数</strong>（默认10），或者<strong>2.一个线程在持有锁，一个在自旋，又有第三个来访时</strong>，轻量级锁升级为重量级锁。</p></li></ol></li><li><p><strong>重量级锁</strong>：内置锁在Java中被抽象为<strong>监视器锁（monitor）</strong>。在JDK 1.6之前，监视器锁可以认为直接对应底层操作系统中的互斥量（mutex）。这种<strong>同步方式的成本非常高</strong>，<u>包括系统调用引起的内核态与用户态切换、线程阻塞造成的线程切换等</u>。</p><blockquote><p>Monitor可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。<strong>每一个Java对象就有一把看不见的锁Monitor</strong>，称为内部锁或者Monitor锁。</p><p>Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个<strong>Owner</strong>字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。</p></blockquote><p>如果锁竞争情况严重，某个达到最大自旋次数的线程，会将轻量级锁升级为重量级锁。<u>线程去获取重量级锁，其实就是就尝试获取对象的monitor锁。</u></p><blockquote><p>即将 monitor锁的 <strong>Owner字段修改为当前线程ID</strong> 。</p></blockquote><p>如果获取成功，此时线程获得了锁，<strong>CAS修改</strong> ：</p><ol start="2"><li><p><strong>修改mark word</strong> ：然后将对象头mark word 改为<strong>指向该 monitor 的指针</strong>。</p></li><li><p><strong>锁标志位</strong>：<code>00 → 10</code></p><p><img src="https://i.loli.net/2021/05/21/NLFv3fKIh14RlzY.png" alt="image-20210521214213205"></p></li></ol></li></ul><h5 id="1-5-为什么说Synchronized是非公平锁，这样的优缺点是什么？">1.5 <strong>为什么说Synchronized是非公平锁，这样的优缺点是什么</strong>？</h5><p>并非是按照申请锁的时间前后给等待线程分配锁的，<strong>每当锁被释放后，任何一个线程都有机会竞争到锁</strong>。</p><ul><li><strong>优点</strong>：这样做的目的是为了提高执行性能；</li><li><strong>缺点</strong>：是可能产生线程饥饿现象。</li></ul><h5 id="1-6-为什么说synchronized是一个悲观锁？乐观锁的实现原理又是什么？">1.6 <strong>为什么说synchronized是一个悲观锁？乐观锁的实现原理又是什么</strong>？</h5><blockquote><p>没看完，了解了下核心问题：<a href="https://www.cnblogs.com/jojop/p/14022029.html">https://www.cnblogs.com/jojop/p/14022029.html</a></p></blockquote><ul><li><p><strong>synchronized悲观锁</strong></p><p>Synchronized显然是一个悲观锁，因为它的并发策略是悲观的：</p><ul><li><strong>不管是否会产生竞争，任何的数据都必须加锁</strong>。</li></ul></li><li><p><strong>synchronized原理</strong></p><p>Synchronized是通过<strong>获取对象内部的一个叫做监视器锁（monitor</strong>）来实现的，每个对象有一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权。</p><blockquote><p>监视器锁本质又是依赖于底层的操作系统的Mutex Lock来实现的。而操作系统实现线程之间的切换这就需要从用户态转换到核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么Synchronized效率低的原因。</p></blockquote><ol><li><p>如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者；</p></li><li><p>如果线程已经占有该monitor，<u>只是重新进入</u>，则进入monitor的进入数加1；</p></li><li><p>如果<u>其他线程已经占用了monitor，则该线程进入阻塞状态</u>，直到monitor的进入数为0，再重新尝试获取monitor的所有权。</p></li></ol></li><li><p><strong>乐观锁实现原理：CAS</strong></p><blockquote><p>参考好文：<a href="https://zhuanlan.zhihu.com/p/94762520">一文彻底搞懂CAS实现原理</a></p></blockquote></li></ul><h5 id="1-7-（CAS原理重点）什么是CAS？CAS的缺点？说说CAS源码实现？">1.7 （CAS原理重点）什么是CAS？CAS的缺点？说说CAS源码实现？</h5><p>乐观锁的核心算法是CAS（Compared And Swap，比较并交换）：</p><ul><li><p><strong>关键逻辑</strong>： CAS，有几个重要的参数：</p><p>（1）<strong>this</strong>，Unsafe 对象本身，需要通过这个类来获取 value 的内存偏移地址。</p><p>（2）<strong>valueOffset</strong>，value 变量的内存偏移地址。</p><p>（3）<strong>expect</strong>，期望更新的值。</p><p>（4）<strong>update</strong>，要更新的最新值。</p><p>如果原子变量中的 <strong>value 值等于 expect</strong>，则使用 update 值更新该值并返回 true，否则返回 false。</p></li><li><p><strong>CAS特性</strong>： CAS具有原子性，它的原子性由CPU硬件指令实现保证。</p><ul><li>【<strong>缺点1</strong>】<strong>ABA问题</strong>：如果另一个线程修改V值假设原来是A，先修改成B，再修改回成A。当前线程的CAS操作无法分辨当前V值是否发生过变化。<ul><li><strong>解决ABA：</strong> 在变量前面加上版本号，每次变量更新的时候变量的<strong>版本号都<code>+1</code></strong>，即<code>A-&gt;B-&gt;A</code>就变成了<code>1A-&gt;2B-&gt;3A</code></li></ul></li><li>【<strong>缺点2】只能保证一个共享变量的原子操作</strong>：当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。</li><li>【<strong>缺点3</strong>】<strong>循环时间长开销大</strong>：对于资源竞争严重（线程冲突严重）的情况，CAS自旋的概率会比较大，从而浪费更多的CPU资源，效率低于synchronized。</li></ul></li><li><p><strong>CAS源码分析</strong></p><blockquote><p>参考：<a href="https://segmentfault.com/a/1190000014858404?utm_source=sf-similar-article">Java CAS 原理分析</a></p></blockquote><blockquote><p>CAS 全称是 compare and swap，是一种用于在<strong>多线程环境下实现同步</strong>功能的机制。</p></blockquote><p>CAS 操作包含三个操作数 – 内存位置、预期数值和新值。CAS 的实现逻辑是将内存位置处的数值与预期数值想比较，若相等，则将内存位置处的值替换为新值。若不相等，则不做任何操作。</p><p>Java 并没有直接实现 CAS，CAS 相关的实现是通过 C++ 内联汇编的形式实现的，下面是具体分析。</p><ul><li><p><strong>背景介绍</strong></p><p>在多核心时代下，<strong>多个核心通过同一条总线和内存以及其他硬件进行通信</strong>。</p><p><img src="https://segmentfault.com/img/remote/1460000014858409?w=1598&amp;h=710" alt="img"></p><p><strong>CPU 的多个核心同时对同一片内存进行操作</strong>，会导致错误。例如，递增指令<code>inc dword ptr [...]</code>，等价于<code>DEST = DEST + 1</code>。该指令包含三个操作<code>读-&gt;改-&gt;写</code>，涉及两次访存。</p><ol><li>核心1,2从内存读取数据<code>1</code>，并写到各自寄存器中</li><li>核心1将寄存器中数据<code>1→2</code></li><li>核心2将寄存器中数据<code>1→2</code></li><li>然后都写回主存，此时为<code>2</code></li></ol><p>可以看到，由于核心2在核心1<strong>写入主存操作完成前进行读取</strong>，导致并不是我们期望的<code>3</code> 。</p><p>通过在递增<code>inc</code> 指令前添加 lock 前缀，可以让核心独占某个内存区域，由此可以避免上面问题。lock 前缀保证核心独占某片内存区域，有两种方式：</p><ol><li><strong>总线锁</strong>。总线被锁定后，其他核心就不能访问内存了，可能会导致其他核心短时内停止工作；</li><li><strong>缓存锁</strong>。若<strong>某处</strong>内存数据被缓存在处理器缓存中，处理器发出的 LOCK# 信号不会锁定总线，而是<strong>锁定缓存对应的内存区域</strong>。其他处理器在这片内存区域锁定期间，无法对这片内存区域进行相关操作。（<strong>不是乐观机制都可以操作吗？不能写入内存</strong>？）</li></ol></li><li><p><strong>源码分析</strong></p><blockquote><p>我们分析，<code>java.util.concurrent.atomic</code> 包下的原子类 <code>AtomicInteger</code> 中的 <code>compareAndSet</code> 方法 。</p></blockquote><ol><li><p>AtomicInteger具体实现中，compareAndSet 实际上只是一个壳子，主要的逻辑封装在 Unsafe 的 compareAndSwapInt 方法中；</p></li><li><p>compareAndSwapInt是一个native方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object o, <span class="keyword">long</span> offset,<span class="keyword">int</span> expected,<span class="keyword">int</span> x)</span></span>;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 计算变量 value 在类对象中的偏移</span></span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * compareAndSet 实际上只是一个壳子，主要的逻辑封装在 Unsafe的compareAndSwapInt 方法中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Unsafe</span> </span>&#123;</span><br><span class="line">    <span class="comment">// compareAndSwapInt 是 native 类型的方法，继续往下看</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object o, <span class="keyword">long</span> offset,</span></span></span><br><span class="line"><span class="params"><span class="function">                                               <span class="keyword">int</span> expected,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                  <span class="keyword">int</span> x)</span></span>;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们进入unsafe.cpp（compareAndSwapInt是native方法）具体实现中，看看调用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unsafe.cpp</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这个看起来好像不像一个函数，不过不用担心，不是重点。UNSAFE_ENTRY 和 UNSAFE_END 都是宏，</span></span><br><span class="line"><span class="comment"> * 在预编译期间会被替换成真正的代码。下面的 jboolean、jlong 和 jint 等是一些类型定义（typedef）：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UNSAFE_ENTRY</span>(jboolean, <span class="built_in">Unsafe_CompareAndSwapInt</span>(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))</span><br><span class="line">  <span class="built_in">UnsafeWrapper</span>(<span class="string">&quot;Unsafe_CompareAndSwapInt&quot;</span>);</span><br><span class="line">  oop p = JNIHandles::<span class="built_in">resolve</span>(obj);</span><br><span class="line">  <span class="comment">// 根据偏移量，计算 value 的地址。这里的 offset 就是 AtomaicInteger 中的 valueOffset</span></span><br><span class="line">  jint* addr = (jint *) <span class="built_in">index_oop_from_field_offset_long</span>(p, offset);</span><br><span class="line">  <span class="comment">// 调用 Atomic 中的函数 cmpxchg，该函数声明于 Atomic.hpp 中</span></span><br><span class="line">  <span class="keyword">return</span> (jint)(Atomic::<span class="built_in">cmpxchg</span>(x, addr, e)) == e;</span><br><span class="line">UNSAFE_END</span><br><span class="line"></span><br><span class="line"><span class="comment">// atomic.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">Atomic::cmpxchg</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> exchange_value, <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>* dest, <span class="keyword">unsigned</span> <span class="keyword">int</span> compare_value)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">assert</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">unsigned</span> <span class="keyword">int</span>) == <span class="built_in"><span class="keyword">sizeof</span></span>(jint), <span class="string">&quot;more work to do&quot;</span>);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 根据操作系统类型调用不同平台下的重载函数，这个在预编译期间编译器会决定调用哪个平台下的重载</span></span><br><span class="line"><span class="comment">   * 接下来分析 atomic_windows_x86.inline.hpp 中的 cmpxchg 函数实现</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Atomic::<span class="built_in">cmpxchg</span>((jint)exchange_value, (<span class="keyword">volatile</span> jint*)dest,</span><br><span class="line">                                       (jint)compare_value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析 Windows 平台下的 Atomic::cmpxchg 函数为例，看看具体实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// atomic_windows_x86.inline.hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCK_IF_MP(mp) __asm cmp mp, 0  \</span></span><br><span class="line"><span class="meta">                       __asm je L0      \</span></span><br><span class="line"><span class="meta">                       __asm _emit 0xF0 \</span></span><br><span class="line"><span class="meta">                       __asm L0:</span></span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">inline</span> jint <span class="title">Atomic::cmpxchg</span> <span class="params">(jint exchange_value, <span class="keyword">volatile</span> jint* dest, jint compare_value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 判断是否是多核 CPU</span></span><br><span class="line">  <span class="keyword">int</span> mp = os::is_MP();</span><br><span class="line">  __asm &#123;</span><br><span class="line">    <span class="comment">// 将参数值放入寄存器中</span></span><br><span class="line">    mov edx, dest  <span class="comment">// 注意: dest 是指针类型，这里是把内存地址存入 edx 寄存器中</span></span><br><span class="line">    mov ecx, exchange_value</span><br><span class="line">    mov eax, <span class="function">compare_value</span></span><br><span class="line"><span class="function">    <span class="title">LOCK_IF_MP</span><span class="params">(mp)</span>  <span class="comment">// 核心比较写入操作</span></span></span><br><span class="line"><span class="function">    cmpxchg dword ptr [edx], ecx</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>其中LOCK_IF_MP实际内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// LOCK_IF_MP</span></span><br><span class="line">    cmp mp, <span class="number">0</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果 mp = 0，表明是线程运行在单核 CPU 环境下。此时 je 会跳转到 L0 标记处，</span></span><br><span class="line"><span class="comment">     * 也就是越过 _emit 0xF0 指令，直接执行 cmpxchg 指令。也就是不在下面的 cmpxchg 指令前加 lock 前缀。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    je L0</span><br><span class="line">     <span class="comment">/* 0xF0 是 lock 前缀的机器码，这里没有使用 lock，而是直接使用了机器码的形式。*/</span></span><br><span class="line">    _emit <span class="number">0xF0</span></span><br><span class="line">L0:</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 比较并交换。简单解释一下下面这条指令，熟悉汇编的朋友可以略过下面的解释:</span></span><br><span class="line"><span class="comment">     *   cmpxchg: 即“比较并交换”指令</span></span><br><span class="line"><span class="comment">     *   dword: 全称是 double word，在 x86/x64 体系中，一个</span></span><br><span class="line"><span class="comment">     *          word = 2 byte，dword = 4 byte = 32 bit</span></span><br><span class="line"><span class="comment">     *   ptr: 全称是 pointer，与前面的 dword 连起来使用，表明访问的内存单元是一个双字单元</span></span><br><span class="line"><span class="comment">     *   [edx]: [...] 表示一个内存单元，edx 是寄存器，dest 指针值存放在 edx 中。</span></span><br><span class="line"><span class="comment">     *          那么 [edx] 表示内存地址为 dest 的内存单元</span></span><br><span class="line"><span class="comment">     *        </span></span><br><span class="line"><span class="comment">     * 这一条指令的意思就是，将 eax 寄存器中的值（compare_value）与 [edx] 双字内存单元中的值</span></span><br><span class="line"><span class="comment">     * 进行对比，如果相同，则将 ecx 寄存器中的值（exchange_value）存入 [edx] 内存单元中。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    cmpxchg dword ptr [edx], ecx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实际举例说明</strong></p><p>AtomicInteger 类主要利用 <strong>CAS (compare and swap) + volatile</strong> 来保证原子操作。AtomicInteger 的主要方法都是通过调用Unsafe类方法去实现，如 compareAndSet 实际是调用AtomicInteger 的compareAndSwapInt方法。</p><blockquote><p>下面以 getAndIncrement实现来说明。</p></blockquote><ol><li><p>getAndIncrement调用了 Unsafe的getAndAddInt方法，传递了（1）当前this对象，（2）value偏移量，用来计算得到value值（3）要加上的值，由于是递增所以是1</p><blockquote><p>⚠️ <strong>为什么不传value的值，而是偏移量</strong>？ 传偏移量是为了计算value所在的内存地址，进而获取最新的value值。</p></blockquote></li><li><p>getAndAddInt采用CAS方式进行更新，还需要进行当前期望值的计算</p><ul><li>通过<code>getIntVolatile</code>获取到<strong>线程此时内存value值</strong>（期望值），也就是记录<strong>执行CAS前</strong>的内存最新value值；</li></ul></li><li><p>然后开始执行Unsafe的 <code>compareAndSwapInt</code> ，主要是通过<code>Atomic::cmpxchg</code> 逻辑来实现</p><p>（1）将要dest（value内存地址），compareValue（期望值），exchange_value（要更新的值）写入寄存器中</p><p>（2）线程如果是运行多核CPU，上<strong>LOCK#锁，将dest内存区域锁住</strong> ；否则不上LOCK#锁</p><p>（3）执行cmpxchg（比较并交换命令），如果dest的value值（<strong>执行CAS中</strong>的最新value值） == compareValue，则写入exchange_value ；</p><p>（4）否则写入失败，通过不断自旋（循环）期望得到执行</p></li></ol></li></ul></li></ul><h5 id="1-8-请说明一下synchronized的-u-可重入-u-怎么实现？">1.8 <strong>请说明一下synchronized的<u>可重入</u>怎么实现</strong>？</h5><p>每个锁关联一个线程持有者对象和一个计数器。</p><ol><li>当计数器为0时表示该锁没有被任何线程持有，那么任何线程都都可能获得该锁（即monitor对象）而调用相应方法。</li><li>当一个线程请求成功后，JVM对象头会记下持有锁的线程，并将计数器计为1。此时其他线程请求该锁，则必须等待。</li><li>而该持有锁的线程如果<strong>再次请求这个锁，就可以再次拿到这个锁，同时计数器会递增</strong>。</li><li>当线程退出一个synchronized方法/块时，计数器会递减，如果计数器为0则释放该锁。</li></ol><h5 id="1-9-在synchronized偏向锁过程中，调用hashcode方法，markword会发生什么？">1.9 在synchronized偏向锁过程中，调用hashcode方法，markword会发生什么？</h5><p>第一次调用Hashcode：当<u>对象的hashCode()方法</u>（非用户自定义）第一次被调用时，JVM会生成对应的<strong>identity hash code</strong>值，并将该值<u>存储到Mark Word</u>中 。</p><blockquote><p>后续如果该对象的hashCode()方法再次被调用则不会再通过JVM进行计算得到，<strong>而是直接从Mark Word中获取，保证唯一相同</strong>。</p></blockquote><ul><li><strong>无锁状态</strong>：在无锁状态下，Mark Word中可以存储对象的identity hash code值 ；</li><li><strong>偏向锁状态</strong>：需要计算其identity hash code的话，则它的偏向锁会被撤销（因为没有保存的位置），并且锁会膨胀为轻量级锁或者重量锁 ；</li><li><strong>轻量锁状态</strong>：<u>线程栈帧</u>的Lock Recode可以记录存储Displaced Mark Word ，所以轻量级锁可以和identity hash code <strong>共存</strong> ；</li><li><strong>重量级锁状态</strong>：<u>ObjectMonitor</u>类里有字段HashCode<strong>可以记录</strong>非加锁状态<strong>下的mark word，所以重量级锁也可以和identity hash code共存</strong>；</li></ul><h5 id="1-10-Synchronized-确定不可中断吗？如果一个线程访问Synchronized-代码，其它线程可以能否中断？比如使用Stop？是在中断前还是中断后获取锁？">1.10 Synchronized 确定不可中断吗？如果一个线程访问Synchronized 代码，其它线程可以能否中断？比如使用Stop？是在中断前还是中断后获取锁？</h5><blockquote><p>参考：<a href="https://blog.csdn.net/deel_feel/article/details/105771902">https://blog.csdn.net/deel_feel/article/details/105771902</a></p></blockquote><p>正确说法时：<strong>只有获取到锁之后才能中断，等待锁时不可中断</strong>。</p><h4 id="1-5-2-Reetrantlock-相关">1.5.2 Reetrantlock 相关</h4><p>ReentrantLock意思为可重入锁 。</p><h5 id="2-1-非公平锁和公平锁在reetrantlock里的实现过程是怎样的？">2.1 <strong>非公平锁和公平锁在reetrantlock里的实现过程是怎样的</strong>？</h5><blockquote><p><a href="https://tech.meituan.com/2018/11/15/java-lock.html">美团技术文章-java-lock</a></p></blockquote><ul><li><p>公平锁：那么锁的 <u>获取顺序</u> 就应该符合请求的 <u>绝对时间顺序</u>，FIFO</p></li><li><p>非公平锁：只要<strong>CAS</strong>设置同步状态成功state，则表示当前线程获取了锁</p><blockquote><p>但公平锁还需要判断当前节点是否有前驱节点，如果有，则表示有线程比当前线程更早请求获取锁，因此需要等待。</p></blockquote></li></ul><p>【<strong>源码分析</strong>】</p><ul><li><p><strong>基本结构</strong></p><p>根据代码可知，ReentrantLock里面有一个内部类<strong>Sync</strong>，Sync继承AQS，添加锁和释放锁的大部分操作实际上都是在Sync中实现的。</p><ul><li>Sync有公平锁FairSync和非公平锁NonfairSync两个子类；</li><li>ReentrantLock默认使用非公平锁，也可以通过构造器来显示的指定使用公平锁。</li></ul><p><img src="https://i.loli.net/2021/05/21/YDAreyBEImxQfj2.png" alt="img"></p></li><li><p><strong>公平和非公平锁区分</strong></p><p><img src="https://i.loli.net/2021/05/21/zsPnT7qrXN5ovKZ.png" alt="img"></p><p>公平锁与非公平锁的lock()方法唯一的区别就在于公平锁在<strong>CAS获取同步状态时</strong>，多了一个限制条件：<strong>hasQueuedPredecessors()</strong>。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/bd0036bb.png" alt="img"></p><ul><li><strong>该方法主要做一件事情</strong>：主要是判断当前线程是否位于同步队列中的第一个。如果是则返回true，否则返回false。</li></ul></li></ul><h5 id="2-2-ReentrantLock的实现原理？">2.2 ReentrantLock的实现原理？</h5><p>ReentrantLock的实现基于队列同步（AbstractQueuedSynchronizer，后面简称AQS）。关于AQS的实现原理见下。</p><p>ReentrantLock的核心，是通过修改AQS中state的值来同步锁的状态。</p><h5 id="2-3-希望等待一段时间锁没有获取，可以自动放弃用哪种锁？">2.3 希望等待一段时间锁没有获取，可以自动放弃用哪种锁？</h5><p>Lock（ReentranLock）</p><p>但是基于AQS的源码哪里体现了？ 应该Lock锁的代码里自己的实现吧。</p><h4 id="1-5-3-AQS-相关">1.5.3 AQS 相关</h4><h5 id="3-1-什么是AQS请你简单介绍一下？">3.1 什么是AQS请你简单介绍一下？</h5><p>AQS的全称为（AbstractQueuedSynchronizer），这个类在java.util.concurrent.locks包下面。</p><p><img src="https://i.loli.net/2021/05/16/QhJg8pnTv3zWj4w.png" alt="image-20210516144436982"></p><p><strong>AQS是⼀个用来构建锁和同步器的框架</strong>，使⽤AQS能简单且高效地构造出应用⼴泛的大量的同步器。</p><ul><li>例如：ReentrantLock，Semaphore，ReentrantReadWriteLock，SynchronousQueue等等皆是基于AQS的。当然，我们⾃⼰也能利⽤AQS非常轻松容易地构造出符合我们⾃⼰需求的同步器。</li></ul><h5 id="3-2-请介绍一下AQS原理？">3.2 请介绍一下AQS原理？</h5><blockquote><p>后续建议研读：<a href="https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html">从ReentrantLock的实现看AQS的原理及应用</a></p></blockquote><p>先带着问题来进行看下面内容：</p><blockquote><p>Q：某个线程获取锁失败的后续流程是什么呢？</p><p>A：存在某种排队等候机制，线程继续等待，仍然保留获取锁的可能，获取锁流程仍在继续。</p><p>Q：既然说到了排队等候机制，那么就一定会有某种队列形成，这样的队列是什么数据结构呢？</p><p>A：是CLH变体的FIFO双端队列。</p><p>Q：处于排队等候机制中的线程，什么时候可以有机会获取锁呢？</p><p>A：可以详细看下2.3.1.3小节。</p><p>Q：如果处于排队等候机制中的线程一直无法获取锁，需要一直等待么？还是有别的策略来解决这一问题？</p><p>A：线程所在节点的状态会变成取消状态，取消状态的节点会从队列中释放，具体可见2.3.2小节。</p><p>Q：Lock函数通过Acquire方法进行加锁，但是具体是如何加锁的呢？</p><p>A：AQS的Acquire会调用tryAcquire方法，tryAcquire由各个自定义同步器实现，通过tryAcquire完成加锁过程。</p></blockquote><ul><li><p><strong>核心原理概览</strong></p><p>如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的⼯作线程，并且将共享资源设置为锁定状态。</p><p>如果被请求的共享资源被占用，那么就需要⼀套线程阻塞等待以及被唤醒时锁分配的机制，<u>这个机制AQS是⽤CLH队列锁实现的</u>，即将暂时获取不到锁的线程加⼊到队列中。</p><blockquote><p>CLH(Craig,Landin,and Hagersten)队列是⼀个<strong>虚拟的双向队列</strong>（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS是将每条请求共享资源的线程封装成⼀个CLH锁队列的⼀个结点（Node）来实现锁的分配。</p></blockquote><p><img src="https://i.loli.net/2021/05/16/XqshLCnMYKbB7Ip.png" alt="image-20210516145134124"></p><p>AQS使用⼀个int成员变量<code>state</code>来表示同步状态，通过内置的FIFO队列来完成获取资源线程的排队⼯作。<strong>AQS使⽤CAS对该同步状态进行原子操作实现对其值的修改</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state; <span class="comment">//共享变量，使⽤volatile修饰保证线程可见性</span></span><br></pre></td></tr></table></figure><p>状态信息通过protected类型的getState，setState，compareAndSetState进行操作 。</p><img src="https://i.loli.net/2021/05/28/g7GORpXKhuo8aS4.png" alt="image-20210526122910138" style="zoom:67%;" /></li><li><p><strong>AQS 对资源的共享方式</strong><br>AQS定义两种资源共享方式，可以通过修改state字段来实现多线程的独占（经典如ReentranLock）和共享模式。</p><p><img src="https://i.loli.net/2021/05/26/YdcSGMs5jgiFnmk.png" alt="img"></p><ul><li><strong>Exclusive（独占）</strong>：只有⼀个线程能执行，如ReentrantLock。⼜可分为公平锁和非公平锁：<ul><li>公平锁：按照线程在队列中的排队顺序，先到者先拿到锁</li><li>非公平锁：当线程要获取锁时，无视队列顺序直接去抢锁，谁抢到就是谁的</li></ul></li><li><strong>Share（共享）</strong>：多个线程可同时执行，如Semaphore/CountDownLatch。Semaphore、CountDownLatch、 CyclicBarrier、ReadWriteLock 我们都会在后面讲到。</li></ul></li><li><p><strong>AQS详细原理</strong></p><blockquote><p>最终参考：<a href="https://zhuanlan.zhihu.com/p/90851418">从源码角度彻底理解ReentrantLock(重入锁)</a></p></blockquote><blockquote><p>以下是基于ReentractLock语境下进行分析。</p></blockquote><ul><li><p><strong>加锁过程：非公平锁</strong></p><blockquote><p>简单来说：<strong>新建线程→CAS尝试快速获取锁→tryAcquire()CAS修改state→addWaiter() 获取失败CAS尝试插入队尾入队→acquireQueued等待前驱线程唤醒继续CAS获取锁</strong></p></blockquote><p><img src="https://pic3.zhimg.com/80/v2-28c16752466cd95dfe0504f0306d6352_720w.jpg" alt="img"></p><p>加锁流程从<code>lock.lock()</code>开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.lock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入该源码,正确找到sycn的实现类后可以看到真正有内容的入口方法：</p></li></ul><ol><li><strong>CAS尝试快速加锁</strong>，在ReentranLock只有state=0，才能更新成功（因为是非多线程共享资源）</li><li>获取锁失败执行acquire方法</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 加锁流程真正意义上的入口</span></span><br><span class="line">  <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//以cas方式尝试将AQS中的state从0更新为1</span></span><br><span class="line">      <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">          setExclusiveOwnerThread(Thread.currentThread());<span class="comment">//获取锁成功则将当前线程标记为持有锁的线程,然后直接返回</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          acquire(<span class="number">1</span>);<span class="comment">//获取锁失败则执行该方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>acquire</code> 在主要的逻辑都在if判断条件中,这里面有3个重要的方法tryAcquire()，addWaiter() 和 acquireQueued() 。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">          acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">          selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><strong>acquire流程1：tryAcquire()</strong></p><p>tryAcquire()在公平和非公平下获取的方式不一样，这里<strong>只说非公平</strong>实现。</p><ol><li><p>如果<strong>state==0（未被其它线程持有）</strong>，<strong>CAS</strong>尝试获取锁,</p></li><li><p>如果当前线程==持有锁的线程，<strong>可重入</strong> ，<strong>state+1</strong></p><ol start="3"><li><p>否则 reture false获取锁失败，加入等待队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">final</span> Thread current = Thread.currentThread();<span class="comment">//获取当前线程实例</span></span><br><span class="line">     <span class="keyword">int</span> c = getState();<span class="comment">//获取state变量的值,即当前锁被重入的次数</span></span><br><span class="line">     <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;   <span class="comment">//state为0,说明当前锁未被任何线程持有</span></span><br><span class="line">         <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123; <span class="comment">//以cas方式获取锁</span></span><br><span class="line">             setExclusiveOwnerThread(current);  <span class="comment">//将当前线程标记为持有锁的线程</span></span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//获取锁成功,非重入</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123; <span class="comment">//当前线程就是持有锁的线程,说明该锁被重入了</span></span><br><span class="line">         <span class="keyword">int</span> nextc = c + acquires;<span class="comment">//计算state变量要更新的值</span></span><br><span class="line">         <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">         setState(nextc);<span class="comment">//非同步方式更新state值</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;  <span class="comment">//获取锁成功,重入</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;     <span class="comment">//走到这里说明尝试获取锁失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p><strong>acquire流程2：addWaiter()</strong></p><p>主要逻辑如下：</p><ol><li>首先通过new Node()创建一个空结点；</li><li>如果队列不空**，以<strong>CAS</strong>方式让新节点插入到队尾;</li><li>如果队列为空，执行<code>enq(node)</code> 逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">       Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);<span class="comment">//首先创建一个新节点,并将当前线程实例封装在内部,mode这里为null</span></span><br><span class="line">       <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">       Node pred = tail;</span><br><span class="line">       <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">           node.prev = pred;</span><br><span class="line">           <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">               pred.next = node;</span><br><span class="line">               <span class="keyword">return</span> node;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       enq(node);<span class="comment">//入队的逻辑这里都有</span></span><br><span class="line">       <span class="keyword">return</span> node;</span><br><span class="line">   &#125;</span><br><span class="line">      <span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">               Node t = tail;<span class="comment">//t指向当前队列的最后一个节点,队列为空则为null</span></span><br><span class="line">               <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize  //队列为空</span></span><br><span class="line">                   <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node())) <span class="comment">//构造新结点,CAS方式设置为队列首元素,当head==null时更新成功</span></span><br><span class="line">                       tail = head;<span class="comment">//尾指针指向首结点</span></span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;  <span class="comment">//队列不为空</span></span><br><span class="line">                   node.prev = t;</span><br><span class="line">                   <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123; <span class="comment">//CAS将尾指针指向当前结点,当t(原来的尾指针)==tail(当前真实的尾指针)时执行成功</span></span><br><span class="line">                       t.next = node;    <span class="comment">//原尾结点的next指针指向当前结点</span></span><br><span class="line">                       <span class="keyword">return</span> t;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>acquire流程3：acquireQueued()</strong></p><blockquote><p><strong>线程加入同步队列后，获取锁的流程是什么呢</strong>？</p><p>简单来说，就是不断判断当前是否是老二，并尝试去获取锁。</p></blockquote><img src="https://pic4.zhimg.com/v2-f83b087a039a8de3f9815d9018e2273f_b.jpg" alt="img" style="zoom:80%;" /><ul><li><code>SIGNAL ：</code>意味着线程释放锁后会唤醒后面阻塞的线程。毕竟，只有确保能够被唤醒，当前线程才能放心的阻塞</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">          <span class="comment">//死循环,正常情况下线程只有获得锁才能跳出循环</span></span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">              <span class="keyword">final</span> Node p = node.predecessor();<span class="comment">//获得当前线程所在结点的前驱结点</span></span><br><span class="line">              <span class="comment">//第一个if分句</span></span><br><span class="line">              <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123; </span><br><span class="line">                  setHead(node); <span class="comment">//将当前结点设置为队列头结点</span></span><br><span class="line">                  p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                  failed = <span class="keyword">false</span>;</span><br><span class="line">                  <span class="keyword">return</span> interrupted;<span class="comment">//正常情况下死循环唯一的出口</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//第二个if分句</span></span><br><span class="line">              <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;  <span class="comment">//判断是否要阻塞当前线程</span></span><br><span class="line">                  parkAndCheckInterrupt())      <span class="comment">//阻塞当前线程</span></span><br><span class="line">                  interrupted = <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (failed)</span><br><span class="line">              cancelAcquire(node);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p><strong>解锁：非公平锁</strong></p><img src="https://i.loli.net/2021/05/26/sSQZlA2paTcNKXi.png" alt="image-20210526170709280" style="zoom:67%;" /></li><li><p><strong>加锁：公平锁</strong></p><blockquote><p>简单来说：<strong>新来线程→【必须】先CAS加入等待队列→等待前驱节点释放锁（state=0），如果是老二则获取锁</strong>。</p></blockquote><p>公平锁加锁入口加锁从：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">finally void lock() &#123;</span><br><span class="line">    acqiuire();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在之前非公平锁的逻辑中，线程有三次机会获取锁：</p><ol><li><strong>新创建时</strong>，CAS尝试修改state=1，去获取</li><li><strong>可重入</strong>，当前获取锁线程为自己</li><li><strong>前驱节点释放锁</strong>，自己作为老二被唤醒</li></ol><p>而<strong>公平锁</strong>，只能按加入队列的<u>先后次序 &amp; 可重入</u>获得锁 ：</p><ol><li><p>所有线程在获取锁前<strong>必须先加入同步队列</strong></p></li><li><p>如果state=0，<code>hasQueuedPredecessors</code>判断当前是头节点，则获取锁</p></li></ol><p><img src="https://i.loli.net/2021/05/26/wZSLYOP4bTGEqRJ.jpg" alt="img"></p></li></ul></li></ul><h5 id="3-3-为什么基于FIFO的同步队列可以实现非公平锁？">3.3 为什么基于FIFO的同步队列可以实现非公平锁？</h5><p>因为非公平锁，除了等<strong>前驱节点唤醒去获取锁</strong> ，还有以下三种方式获取锁：</p><ol><li><p><strong>新创建时</strong>，CAS尝试修改state=1，去获取</p><blockquote><p>公平锁：进来先执行<code>hasQueuedPredecessors()</code> , 看等待队列是否有有效节点，有的话不能获取锁！</p></blockquote></li><li><p><strong>可重入</strong>，当前获取锁线程为自己</p><blockquote><p>公平锁：也可以</p></blockquote></li><li><p><strong>同步队列等待</strong>，等待唤醒获取锁</p><blockquote><p>公平锁：也可以</p></blockquote></li></ol><p>并且在锁释放时：是<strong>先释放锁（修改state=-1），再去唤醒后继节点</strong></p><ol><li>会导致新来的线程，可能在<strong>后继节点被唤醒前</strong>就获取了锁，这就不会公平</li></ol><h5 id="3-4-【易忘】为什么非公平锁性能好？">3.4 【易忘】为什么非公平锁性能好？</h5><ol><li>.线程不必加入等待队列就可以获得锁,不仅<strong>免去了构造结点并加入队列的繁琐操作</strong> ，<strong>节省了线程阻塞、唤醒</strong>的开销（这涉及到上下文的切换）；</li><li><strong>减少CAS竞争</strong>。如果<strong>线程必须要加入阻塞队列才能获取锁</strong>,那<strong>0</strong>将变得异常激烈,CAS操作虽然不会导致失败线程挂起,但不断失败重试导致的对CPU的浪费也不能忽视</li></ol><h5 id="3-4-AQS-有哪些组件，请简单介绍一下？介绍一下CountDownLatch的应用场景-？">3.4 AQS 有哪些组件，请简单介绍一下？介绍一下CountDownLatch的应用场景 ？</h5><p><img src="https://i.loli.net/2021/05/26/OWhD4Hu3GkBP2vc.png" alt="image-20210526215800096"></p><ul><li><p><strong>Semaphore(信号量)：<strong>Semaphore(信号量)可以指定</strong>多个</strong>线程<strong>同时</strong>访问某个资源； <strong>synchronized 和 ReentrantLock</strong> 都是⼀次只允许<strong>⼀个</strong>线程访问<strong>同时</strong>某个资源。</p><blockquote><p>计数信号量具备两种操作动作，称为V（signal()）与P（wait()）（即部分参考书常称的“PV操作”）。V操作会增加信号标S的数值，P操作会减少它。</p><p>运行P（wait()），信号标S的值将被减少。企图进入临界区段的进程，需要先运行P（wait()）。当信号标<strong>S减为负值</strong>时，进程会被挡住，不能继续；当<strong>信号标S不为负值</strong>时，进程可以获准进入临界区段。</p></blockquote></li><li><p><strong>CountDownLatch （倒计时器）</strong>： CountDownLatch是⼀个同步⼯具类，用来协调多个线程之间的同步。这个⼯具通常用来控制线程等待，<u>它可以让<strong>某⼀个线程等待直到倒计时结束</strong></u>，再开始执行。</p></li><li><p><strong>CyclicBarrier(循环栅栏)</strong>： CyclicBarrier 和 CountDownLatch 非常类似，它也可以实现线程间的技术等待，但是它的功能⽐ CountDownLatch 更加复杂和强大。主要应用场景和CountDownLatch 类似。CyclicBarrier 的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让⼀组线程到达⼀个屏障（也可以叫同步点）时被阻塞，直到最后⼀个线程到达屏障时，屏障才会开⻔，所有被屏障拦截的线程才会继续⼲活。</p><blockquote><p>CyclicBarrier默认的构造方法是 CyclicBarrier(int parties)，其参数表示屏障拦截的线程数量，每个线程调⽤**await()**方法告诉 CyclicBarrier 我已经到达了屏障，然后当前线程被阻塞。</p></blockquote></li></ul><p><strong>CountDownLatch的应用场景</strong></p><p>我们要读取处理<strong>6</strong>个⽂件，这6个任务都是没有执行顺序依赖的任务，但是我们需要返回给用户的时候将这6个⽂件的处理的结果进行统计整理。</p><p>为此我们定义了⼀个线程池和<strong>count为6的 CountDownLatch 对象</strong> 。使用线程池处理读取任务，每⼀个线程处理完之后就将count-1，调用 CountDownLatch 对象的 await() 方法，直到所有⽂件读取完之后，才会接着执行后面的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchExample1</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 处理⽂件的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> threadCount = <span class="number">6</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建⼀个具有固定线程数量的线程池对象（推荐使用构造方法创建）</span></span><br><span class="line">     ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">     <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span></span><br><span class="line">CountDownLatch(threadCount);</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">         <span class="keyword">final</span> <span class="keyword">int</span> threadnum = i;</span><br><span class="line">         threadPool.execute(() → &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//处理⽂件的业务操作</span></span><br><span class="line">                ......</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//表示⼀个⽂件已经被完成</span></span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">              &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">       countDownLatch.await();</span><br><span class="line">       threadPool.shutdown();</span><br><span class="line">       System.out.println(<span class="string">&quot;finish&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-4-Volatile-关键字">1.5.4 Volatile 关键字</h4><h5 id="4-0-JMM-是什么-？-缓存一致性协议MESI-CPU内存屏障？JAVA内存屏障？">4.0 JMM 是什么 ？ 缓存一致性协议MESI ? CPU内存屏障？JAVA内存屏障？</h5><blockquote><p>参考：<a href="https://www.jianshu.com/p/06717ac8312c">并发编程-（4）-JMM基础（总线锁、缓存锁、MESI缓存一致性协议、CPU 层面的内存屏障）</a></p></blockquote><ul><li><p><strong>JMM定义</strong></p><p>全称Java Memory Model（java内存模型）是一系列的Java虚拟机平台对开发者提供的多线程环境下的内存可见性、是否可以重排序等问题的无关具体平台的统一的保证。</p></li><li><p><strong>MESI 缓存一致性协议协议</strong></p><ul><li><p><strong>缓存不一致问题</strong></p><p>CPU处理速度，远大于I/O设备（磁盘），为了解决了处理器与内存的速度矛盾，引入了<strong>高速缓存</strong>。但是由此也带来了缓存不一致的问题。</p><ul><li><strong>每个线程都会缓存内存的数据在各自寄存器中</strong>，在<strong>不同 CPU 中运行的不同线程看到同一份内存的缓存值不一样</strong>就会存在缓存不一致的问题。</li></ul></li><li><p><strong>MESI协议内容</strong></p><p>为了达到数据访问的一致，需要各个处理器在访问缓存时遵循一些协议，在读写时根据协议来操作，<strong>最常见的就是 MESI 协议</strong>：<br>MESI 表示缓存行的四种状态，分别是：</p><blockquote><p>在 MESI 协议中，每个缓存的缓存控制器不仅知道自己的 读写操作，而且<strong>也监听(snoop)其它 Cache 的读写操作</strong>。</p></blockquote><ul><li><strong>M(Modify)</strong> 表示共享<strong>数据</strong>只缓存在<strong>当前 CPU 缓存</strong>中， 并且是被修改状态，也就是缓存的数据和主内存中的<strong>数据不一致</strong>。</li><li><strong>E(Exclusive)</strong> 表示缓存的独占状态，<strong>数据</strong>只缓存在<strong>当前 CPU 缓存</strong>中，并且<strong>没有被修改</strong>。</li><li><strong>S(Shared)</strong> 表示<strong>数据</strong>可能被<strong>多个 CPU 缓存</strong>，并且各个缓存中的<strong>数据和主内存数据一致</strong>。</li><li><strong>I(Invalid)</strong> 表示缓存已经<strong>失效</strong>。</li></ul><p>对于 MESI 协议，从 CPU 读写角度来说会遵循以下原则：</p><p><img src="https://i.loli.net/2021/06/11/YbfKoySNDMX5swn.png" alt="image-20210611200929872"></p><ul><li><strong>CPU 读请求</strong>：缓存处于 M、E、S 状态都可以被读取，I 状 态 CPU 只能从主存中读取数据；</li><li><strong>CPU 写请求</strong>：缓存处于 M、E 状态才可以被写。对于 S 状 态的写，需要将<strong>其他 CPU 中缓存行置为无效</strong>才可写。</li></ul></li><li><p><strong>Store Bufferes（存储缓存）</strong></p><blockquote><p>CPU 缓存行的状态是通过消息传递来进行的，如果 CPU0 要对一个在缓存中<strong>共享的变量</strong>进行<strong>写入</strong>，首先发送一个失效的消息给到其他缓存了该数据的 CPU。并且要<strong>等到他们的确认回执</strong>。CPU0 在这段时间内都会处于<strong>阻塞状态</strong>。</p></blockquote><p>为了避免阻塞带来的资源浪费。在 cpu 中引入 了 Store Bufferes（存储缓存） 和 Invalidate Queue（无效队列）。</p><ul><li>CPU0 写入共享数据时，<strong>直接把数据写入到 store bufferes 中，同时发送 invalidate 消息，然后继续去处理其他指令</strong>；</li><li>收到其他所有 CPU 发送了 invalidate ACK消息时，<strong>再将 store bufferes 中的数据数据存储至 cache 中</strong>；</li><li>最后再从<strong>本地Cache同步到主内存</strong>。</li></ul></li><li><p><strong>CPU层面内存屏障</strong></p><blockquote><p>内存屏障就是<strong>将 Store Bufferes 中的指令写入到内存</strong>，从而使得其他访问同一共享内存的线程的可见性。</p></blockquote><p>硬件层的内存屏障分为两种：<strong>Load Barrier （读屏障</strong>）和 <strong>Store Barrier（写屏障）及 Full Barrier（全屏障</strong>）是读屏障和写屏障的合集。</p><ul><li><strong>写屏障</strong>：强制<strong>把写缓冲区/高速缓存</strong>中的脏数据等<strong>写回主内存</strong></li><li><strong>读屏障</strong>：将缓冲区/高速缓存中相应的<strong>数据失效</strong>。</li></ul></li><li><p><strong>JAVA 内存屏障</strong></p><p>java的内存屏障通常所谓的四种，<strong>LoadLoad（LL）, StoreStore（SS）, LoadStore（LS）, StoreLoad（SL</strong>)实际上也是上述两种的组合，完成一系列的屏障和数据同步功能。</p><ul><li><strong>LoadLoad（LL）屏障</strong>：对于这样的语句Load1; LoadLoad; Load2，在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。</li><li><strong>StoreStore（SS）屏障</strong>：对于这样的语句Store1; StoreStore; Store2，在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。</li><li><strong>LoadStore（LS）屏障</strong>：对于这样的语句Load1; LoadStore; Store2，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。</li><li><strong>StoreLoad（SL）屏障</strong>：对于这样的语句Store1; StoreLoad; Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。它的开销是四种屏障中最大的。在大多数处理器的实现中，这个屏障是个万能屏障，兼具其它三种内存屏障的功能。</li></ul></li></ul></li></ul><h5 id="4-1-什么是HappenBefore原则？">4.1 什么是HappenBefore原则？</h5><p>在 JMM 中，<strong>如果一个操作执行的结果需要对另一个操作【可见】，那么这两个操作必须要存在 happens-before 关系</strong>。这两个操作可以是同一个线程，也可以是不同的线程。</p><p><strong>它是可见性与有序性的一套规则总结，抛开以下 happens-before 规则，JMM 并不能保证一个线程对共享变量的写，对于其它线程对该共享变量的读可见</strong> 。</p><ul><li><p><strong>HappenBefore原则</strong></p><ul><li><p><strong>as-if-serial 规则（程序顺序执行）</strong>：单个线程中的代码顺序不管怎么重排序，对于结果来说是不变的。</p></li><li><p><strong>volatile 变量规则</strong>，对于 volatile 修饰的变量的<strong>写操作</strong>， 一定 happen-before 后续对于 volatile 变量的<strong>读操作</strong>;</p></li><li><p><strong>监视器锁规则（monitor lock rule）</strong>：对一个监视器的解锁，happens-before于随后对这个监视器的加锁。</p></li><li><p><strong>传递性规则</strong>：如果A happens-before B，且B happens-before C，那么A happens-before C。</p></li><li><p><strong>start 规则</strong>：如果线程 A 执行操作 ThreadB.start(),那么线程 A 的 ThreadB.start()操作 happens-before 线程 B 中的任意操作。</p></li><li><p><strong>join 规则</strong>：如果线程 A 执行操作 ThreadB.join()并成功返回，那么线程 B 中的任意操作 happens-before 于线程 A 从 ThreadB.join()操作成功返回。</p></li></ul></li><li><p><strong>举例说明：什么是指令重排序</strong>？</p><p>请看下面代码：</p><blockquote><p><strong>假设</strong> 线程A执行writer()方法之<strong>后</strong>，线程B执行reader()方法，那么线程B执行4的时候一定能看到线程A写入的值吗？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolatileExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a = <span class="number">1</span>;           <span class="comment">//1</span></span><br><span class="line">        flag = <span class="keyword">true</span>;     <span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;       <span class="comment">//3</span></span><br><span class="line">            <span class="keyword">int</span> i = a;    <span class="comment">//4</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是<strong>肯定的</strong>。因为根据happens-before规则，我们可以得到如下关系：</p><ol><li>根据<strong>程序顺序规则</strong>，1 happens-before 2；3 happens-before 4</li><li>根据<strong>volatile规则</strong>，2 happens-before 3；</li><li>根据<strong>传递性规则</strong>，1 happens-before 4 。</li></ol><p>因此，综合运用<strong>程序顺序规则、volatile规则及传递性规则</strong>，我们可以得到1 happens-before 4，即线程B在执行4的时候一定能看到A写入的值。</p></li></ul><h5 id="4-2-Volatile-关键字原理">4.2 Volatile 关键字原理</h5><blockquote><p>参考：<a href="https://www.cnblogs.com/paddix/p/5428507.html">https://www.cnblogs.com/paddix/p/5428507.html</a> 。</p></blockquote><p>此题考察的是<code>volatile</code>这个关键字。可以从<code>volatile</code>的作用和<code>volatile</code>的原理这三个方面来进行回答。<strong>volatile只能保证变量的可见性、有序性，但是不能保证原子性</strong>。</p><ul><li><strong>可见性实现原理</strong></li></ul><blockquote><p>为了实现<strong>volatile可见性</strong>和<strong>happen-befor</strong>的语义。JVM底层是通过一个叫做“<strong>内存屏障（基于MESI）</strong>”的东西来完成（也实现了<strong>有序性</strong> ？）。</p></blockquote><p><strong>线程本身并不直接与主内存进行数据的交互</strong>，而是通过线程的工作内存来完成相应的操作。这也是导致线程间数据不可见的本质原因。</p><p>使用<strong>MESI</strong> 协议，使得<strong>任意一个线程修改了 volatile 修饰的变量，其他线程可以马上识别到最新值</strong>。</p><blockquote><p>最终目标：保证了<strong>缓存的一致性</strong>。</p><p>具体的话，下面是用<strong>内存屏障</strong>来实现的。</p></blockquote><ol><li>修改本地工作内存，强制刷回主内存；</li></ol><p><img src="https://i.loli.net/2021/06/11/JTFaYRu13pfQg9d.png" alt="image-20210611204633903"></p><ol start="2"><li><p>强制让其他线程的工作内存失效过期；</p><p><img src="https://i.loli.net/2021/06/11/2kphvOoJu4K65Hb.png" alt="image-20210611204715422"></p></li><li><p>其他线程重新从主内存加载最新值；</p><p><img src="https://i.loli.net/2021/06/11/rvo58ueDB6CPyMa.png" alt="image-20210611204743839"></p></li></ol><ul><li><p><strong>有序性实现原理</strong></p><blockquote><p>参考：<a href="https://blog.csdn.net/qq_42764468/article/details/106898608">https://blog.csdn.net/qq_42764468/article/details/106898608</a></p></blockquote><p>从源代码到最终执行的指令，可能会经过三种重排序：</p><p><img src="https:////upload-images.jianshu.io/upload_images/2845835-8fc217f556cd34f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/680/format/webp" alt="img"></p></li><li><p><strong>【指令】重排序</strong>，<strong>JMM</strong> 会要求编译器生成指令时，会<strong>插入内存屏障</strong>来禁止处理器重排序。</p></li></ul><blockquote><p>JMM属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止：①特定类型的编译器重排序和②处理器重排序，为程序员提供一致的内存可见性保证。</p></blockquote><ul><li><p><strong>编译器重排序</strong>，<strong>JMM</strong> <strong>禁止了特定类型的编译器</strong>重排序（不是所有的编译器重排序都要禁止）。</p></li><li><p><strong>内存重排序</strong>：由于处理器会使用读/写缓冲区，出于性能的原因，内存会对读/写进行重排序</p></li></ul><p>JVM 是<strong>使用内存屏障来禁止【指令】重排，从而达到：可见性 + 部分有序性</strong>效果。</p><blockquote><p><strong>lock前缀指令实际相当于一个内存屏障</strong>？ 下面不是可见性吗？？？</p></blockquote><p>对volatile变量的<strong>写</strong>操作与普通变量的主要区别有两点：</p><ol><li><p>修改volatile变量<strong>前</strong>，<strong>会强制将修改后的值刷新的主内存中</strong>。</p><blockquote><p>每个volatile写操作前插入<strong>StoreStore（SS）屏障</strong></p></blockquote></li><li><p>修改volatile变量<strong>后</strong>，<strong>会导致其他线程工作内存中对应的变量值失效</strong>，因此，再读取该变量值的时候就需要重新从读取主内存中的值。</p><blockquote><p>在写操作后插入StoreLoad屏障；</p></blockquote></li></ol><p>对volatile变量的<strong>读</strong>操作类似：</p><ol><li><p>在每个volatile读操作前插入<strong>LoadLoad（LL）屏障</strong>；</p><blockquote><p>确保Load2及后续Load指令加载数据之前能访问到Load1加载的数据。</p></blockquote></li><li><p>在读操作后插入<strong>LoadStore（LS屏障</strong>）。</p><blockquote><p>确保Store2和后续Store指令执行前，可以访问到Load1加载的数据。</p></blockquote></li></ol><h5 id="4-3-volatile为什么不能保证原子性？">4.3 volatile为什么不能保证原子性？</h5><blockquote><p>参考：<a href="https://www.cnblogs.com/simpleDi/p/11517150.html">为什么volatile能保证有序性不能保证原子性</a></p></blockquote><p>对于i++这种复合操作，即使使用volatile关键字修饰也不能保证操作的原子性，可能会引发数据不一致问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">i++;</span><br></pre></td></tr></table></figure><p>上述<code>i++</code>操作，其实分为三个操作：</p><ol><li><p>线程读取i</p></li><li><p>temp = i + 1</p></li><li><p>i = temp</p></li></ol><p>A,B两个线程多线程操作时：</p><ol><li><p>A线程读取i并执行了 temp = i + 1的操作， 此时的 i（0） 的值还没有变化</p></li><li><p>此时B也读入i并执行temp = i + 1操作，此时i（0）也没变化</p><blockquote><p>⚠️ 虽然有MESI协议，但是<code>temp</code>不保存变量<code>i</code>所在内存区域，<strong>是cpu内部的计算</strong>，不会被立马刷新内存！</p></blockquote></li><li><p>当A写入i = temp（1）时，由于可见性立马在主存被刷新了值 i=1</p></li><li><p>当B也写入i = temp时，<strong>此时A依旧是1，而不是2</strong></p></li></ol><h5 id="4-4-并发编程的三个重要特性-？">4.4 <strong>并发编程的三个重要特性</strong> ？</h5><ol><li><strong>原子性 :</strong> ⼀个的操作或者多次操作，要么所有的操作全部都得到执行并且不会收到任何因素的⼲扰而中断，<strong>要么所有的操作都执行，要么都不执行</strong>。 <code>synchronized</code> 可以保证代码片段的原子性。</li><li><strong>可见性 <strong>：当</strong>⼀个变量对共享变量进行了修改，那么另外的线程都是⽴即可以看到修改后的最新值</strong>。 volatile 关键字可以保证共享变量的可见性。</li><li><strong>有序性</strong>：代码在执行的过程中的先后顺序，Java 在编译器以及运行期间的优化，代码的执行顺序未必就是编写代码时候的顺序。 <code>volatile</code> 关键字可以禁⽌指令进行重排序优化。</li></ol><h5 id="4-5-说说-synchronized-关键字和-volatile-关键字的区别？">4.5 <strong>说说</strong> synchronized <strong>关键字和</strong> volatile <strong>关键字的区别</strong>？</h5><p>synchronized关键字和volatile关键字比较：</p><ul><li><p><strong>volatile关键字是线程同步的轻量级实现</strong>，所以volatile性能肯定⽐synchronized关键字要好。</p></li><li><p><strong>volatile关键字只能用于变量</strong>，而synchronized关键字可以修饰方法以及代码块。</p><blockquote><p>synchronized关键字在JavaSE1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引⼊的偏向锁和轻量级锁以及其它各种优化之后执行效率有了显著提升，实际开发中使用<br>synchronized 关键字的场景还是更多⼀些。</p></blockquote></li><li><p><strong>volatile关键字只能保证数据的可见性</strong>，但不能保证数据的原子性。synchronized关键字两者都能保证。</p></li><li><p><strong>多线程访问volatile关键字不会发生阻塞</strong>，而synchronized关键字可能会发⽣阻塞</p></li></ul><h4 id="1-5-5-Atomic-原子类">1.5.5 Atomic 原子类</h4><h5 id="5-1-什么是Atomic-原子类？">5.1 什么是Atomic 原子类？</h5><p>所以，所谓原子类说简单点就是<strong>具有原子/原子操作特征的类</strong>。</p><blockquote><p>在我们这⾥ Atomic 是指⼀个操作是不可中断的。即使是在多个线程⼀起执行的时候，⼀个操作⼀旦开始，就不会被其他线程⼲扰。</p></blockquote><h5 id="5-2-JUC-包中的原子类是哪4类">5.2 JUC <strong>包中的原子类是哪</strong>4<strong>类</strong>?</h5><p><img src="https://i.loli.net/2021/05/16/vS4DHpKCN9bjnTF.png" alt="image-20210516152124223"></p><h5 id="5-3-Volatile-和-atomic-变量区别？">5.3 Volatile 和  atomic  变量区别？</h5><ul><li>Volatile变量可以确保先行关系，即写操作会发生在后续的读操作之前, 但它并不能保证原子性。例如用volatile修饰count变量那么 count++ 操作就不是原子性的。</li><li>而AtomicInteger类提供的atomic方法可以让这种操作具有原子性如getAndIncrement()方法会原子性的进行增量操作把当前值加一，其它数据类型和引用变量也可以进行相似操作。</li></ul><h5 id="5-4-讲讲-AtomicInteger-的使用-？">5.4 讲讲 AtomicInteger 的使用 ？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> <span class="comment">//获取当前的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> newValue)</span><span class="comment">//获取当前的值，并设置新的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span><span class="comment">//获取当前的值，并⾃增</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndDecrement</span><span class="params">()</span> <span class="comment">//获取当前的值，并⾃减</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> delta)</span> <span class="comment">//获取当前的值，并加上预期的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> <span class="comment">//如果输⼊的数值等于预期值，则以原子方式将该值设置为输⼊值（update）</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lazySet</span><span class="params">(<span class="keyword">int</span> newValue)</span><span class="comment">//最终设置为newValue,使用 lazySet设置之后可能导致其他线程在之后的⼀小段时间内还是可以读到旧的值。</span></span></span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerTest</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 基本类型也要是原子类</span></span><br><span class="line">       <span class="keyword">private</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">       <span class="comment">//使⽤AtomicInteger之后，不需要对该方法加锁，也可以实现线程安全。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            count.incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count.get();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-5（重点提问）-AtomicInteger-原理？">5.5（重点提问） AtomicInteger 原理？</h5><p>AtomicInteger 类主要利用 <strong>CAS (compare and swap) + volatile</strong> 和 <strong>native</strong> 方法来保证原子操作，从而避免 synchronized 的高开销，执行效率大为提升。</p><p>我们以自增方法为例： <code>getAndIncrement</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，本质是在调用 unsafe中的 <code>getAndAddInt</code></p><blockquote><p>unsafe中的compareAndSwapInt方法参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compareAndSwapInt(Object o, <span class="keyword">long</span> offset,<span class="keyword">int</span> expected,<span class="keyword">int</span> x);  <span class="comment">// x是准备更新的值</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.<span class="built_in">getAndAddInt</span>(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Unsafe中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="comment">// getIntVolatile方法获取到期望值value后去调用compareAndSwapInt方法，失败则进行重试</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// var5是计算得到的期望值，获取此时内存的最新值（因为value是votilate修饰，修改总是被能及时看到）</span></span><br><span class="line">        var5 = <span class="keyword">this</span>.<span class="built_in">getIntVolatile</span>(var1, var2);</span><br><span class="line">    <span class="comment">// 计算传入compareAndSwapInt的四个参数</span></span><br><span class="line">    <span class="comment">// var1：传入的this对象；var2：value内存偏移值；var5：期望值，希望和【var2】一致； var5+var4：var5+var4（1），递增</span></span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.<span class="built_in">compareAndSwapInt</span>(var1, var2, var5, var5 + var4));</span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最终总结如下</strong></p><p>AtomicInteger 类主要利用 <strong>CAS (compare and swap) + volatile</strong> 来保证原子操作。AtomicInteger 的主要方法都是通过调用Unsafe类方法去实现，如 compareAndSet 实际是调用AtomicInteger 的compareAndSwapInt方法。</p><p>下面以 getAndIncrement实现来说明。</p><ol><li><p>getAndIncrement调用了 Unsafe的getAndAddInt方法，传递了（1）当前this对象，（2）value偏移量valueoffset，用来计算得到value值（3）要加上的值，由于是递增所以是1</p><blockquote><p>⚠️ <strong>为什么不传value的值，而是偏移量</strong>？ 传偏移量是为了计算value所在的内存地址，进而获取最新的value值。</p></blockquote></li><li><p>getAndAddInt采用CAS方式进行更新，还需要进行当前期望值的计算</p><ul><li>通过<code>getIntVolatile</code>获取到<strong>线程此时内存value值</strong>（期望值），也就是记录<strong>执行CAS前</strong>的内存最新value值；</li></ul></li><li><p>然后开始执行Unsafe的 <code>compareAndSwapInt</code> ，主要是通过<code>Atomic::cmpxchg</code> 逻辑来实现</p><p>（1）将要dest（value内存地址），compareValue（期望值），exchange_value（要更新的值）写入寄存器中</p><p>（2）线程如果是运行多核CPU，上<strong>LOCK#锁，将dest内存区域锁住</strong> ；否则不上LOCK#锁</p><p>（3）执行cmpxchg（比较并交换命令），如果dest的value值（<strong>执行CAS中</strong>的最新value值） == compareValue，则写入exchange_value ；</p><p>（4）否则写入失败，通过不断<strong>自旋（循环</strong>）期望得到执行</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（一）_Java_多线程</title>
      <link href="/p/8959/"/>
      <url>/p/8959/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我的校招记录：<a href="https://www.hwh.zone/p/29708/">校招笔记（零）_写在前面</a> ，以下是校招笔记总目录。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><h2 id="1-4-多线程">1.4 多线程</h2><h4 id="0-三个线程，如何让他们按顺序打印A、B、C？如果是循环打印10次呢？依次打印1-100呢？交替打印奇偶10次呢？">0.<strong>三个线程，如何让他们按顺序打印A、B、C？如果是循环打印10次呢？依次打印1~100呢？交替打印奇偶10次呢？</strong></h4><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/370130458">https://zhuanlan.zhihu.com/p/370130458</a></p></blockquote><h5 id="0-1-synchronized-条件变量">0.1 <strong>synchronized + 条件变量</strong></h5><ol><li><p><strong>synchronized + 条件变量</strong>（循环打印1次）</p><p>思路如下：</p><ul><li>新建三个线程1、2、3 ，分别负责打印A、B、C；同时，每个线程对应一个条件变量：<code>num%3==当前线程条件变量?</code> ；</li><li>把打印的代码用synchronized 加锁，每个线程拿到锁后，<strong>while循环判断</strong>是否满足当前线程的条件变量 ；</li><li><strong>如果满足</strong> ，便执行后续逻辑打印当前线程，之后<strong>notifyall()唤醒其它线程</strong>；</li><li><strong>如果不满足</strong>，执行wait等待释放锁；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wait_Notify_ACB</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object LOCK = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printABC</span><span class="params">(<span class="keyword">int</span> targetNum)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;  <span class="comment">// targetNum ： 每个线程应该满足的对应条件变量</span></span><br><span class="line">            <span class="keyword">synchronized</span> (LOCK) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (num % <span class="number">3</span> != targetNum) </span><br><span class="line">                &#123;   <span class="comment">// while ：线程阻塞在wait(),再次被唤醒应该先检查下是否满足条件，因为这个时候未必轮到当前线程执行；用if会导致直接往下执行。</span></span><br><span class="line">                    <span class="keyword">try</span> </span><br><span class="line">                    &#123;</span><br><span class="line">                        LOCK.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">                    &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                num++;</span><br><span class="line">                System.out.print(Thread.currentThread().getName());</span><br><span class="line">                LOCK.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Wait_Notify_ACB  wait_notify_acb = <span class="keyword">new</span> Wait_Notify_ACB ();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            wait_notify_acb.printABC(<span class="number">0</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; </span><br><span class="line">        &#123;</span><br><span class="line">            wait_notify_acb.printABC(<span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; </span><br><span class="line">        &#123;</span><br><span class="line">            wait_notify_acb.printABC(<span class="number">2</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>synchronized + 条件变量</strong>（循环打印10次）</p><p>打印10次，只需让三个线程，尝试去竞争10次锁即可。所以在<strong>synchronized前加上for循环</strong>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wait_Notify_ACB</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object LOCK = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printABC</span><span class="params">(<span class="keyword">int</span> targetNum)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;  <span class="comment">// targetNum ： 每个线程应该满足的对应条件变量</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;<span class="number">10</span> ;i++)</span><br><span class="line">      &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LOCK) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (num % <span class="number">3</span> != targetNum) </span><br><span class="line">                &#123;   <span class="comment">// while ：线程阻塞在wait(),再次被唤醒应该先检查下是否满足条件，因为这个时候未必轮到当前线程执行；用if会导致直接往下执行。</span></span><br><span class="line">                    <span class="keyword">try</span> </span><br><span class="line">                    &#123;</span><br><span class="line">                        LOCK.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">                    &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                num++;</span><br><span class="line">                System.out.print(Thread.currentThread().getName());</span><br><span class="line">                LOCK.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Wait_Notify_ACB  wait_notify_acb = <span class="keyword">new</span> Wait_Notify_ACB ();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            wait_notify_acb.printABC(<span class="number">0</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; </span><br><span class="line">        &#123;</span><br><span class="line">            wait_notify_acb.printABC(<span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; </span><br><span class="line">        &#123;</span><br><span class="line">            wait_notify_acb.printABC(<span class="number">2</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>synchronized + 条件变量</strong>（打印1~100)</p><p>设置一个全局变量，synchronized 中加锁函数对num+1，保证只要每次只有一个线程能执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wait_Notify_100</span> </span>&#123;</span><br><span class="line">​</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object LOCK = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxnum = <span class="number">10</span>;</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printABC</span><span class="params">(<span class="keyword">int</span> targetNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">                <span class="keyword">while</span> (num % <span class="number">3</span> != targetNum) &#123; <span class="comment">//想想这里为什么不能用if代替，想不起来可以看公众号上一篇文章</span></span><br><span class="line">                    <span class="keyword">if</span>(num &gt;= maxnum)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        LOCK.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(num &gt;= maxnum)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                num++;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + num);</span><br><span class="line">                LOCK.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Wait_Notify_100  wait_notify_100 = <span class="keyword">new</span> Wait_Notify_100 ();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            wait_notify_100.printABC(<span class="number">0</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;thread1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            wait_notify_100.printABC(<span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;thread2&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            wait_notify_100.printABC(<span class="number">2</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;thread3&quot;</span>).start();</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>synchronized + 条件变量</strong>（奇偶打印10次）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Wait_Notify_Odd_Even</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object monitor = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count;</span><br><span class="line">    Wait_Notify_Odd_Even(<span class="keyword">int</span> initCount) &#123;</span><br><span class="line">        <span class="keyword">this</span>.count = initCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printOddEven</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (monitor) &#123;</span><br><span class="line">            <span class="keyword">while</span> (count &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> <span class="comment">// 这里不用while循环判断，是因为下次notifyAll的一定是奇数或偶数</span></span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.print( Thread.currentThread().getName() + <span class="string">&quot;：&quot;</span>);</span><br><span class="line">                    System.out.println(++count);</span><br><span class="line">                    monitor.notifyAll();</span><br><span class="line">                    monitor.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//防止count=10后，while()循环不再执行，有子线程被阻塞未被唤醒，导致主线程不能退出</span></span><br><span class="line">            monitor.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Wait_Notify_Odd_Even waitNotifyOddEven = <span class="keyword">new</span> Wait_Notify_Odd_Even(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(waitNotifyOddEven::printOddEven, <span class="string">&quot;odd&quot;</span>).start();</span><br><span class="line">        Thread.sleep(<span class="number">10</span>); <span class="comment">//为了保证线程odd先拿到锁</span></span><br><span class="line">        <span class="keyword">new</span> Thread(waitNotifyOddEven::printOddEven, <span class="string">&quot;even&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="0-2-join">0.2 join</h5><p><code>join()</code>方法**：在A线程中调用了B线程的join()方法时，表示只有当B线程执行完毕时，A线程才能继续执行**。</p><p>基于这个原理，我们使得三个线程按顺序执行，然后循环多次即可。无论线程1、线程2、线程3哪个先执行，最后执行的顺序都是线程1——&gt;线程2——&gt;线程3。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Join_ABC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> printABC(<span class="keyword">null</span>),<span class="string">&quot;A&quot;</span>);</span><br><span class="line">            Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> printABC(t1),<span class="string">&quot;B&quot;</span>);</span><br><span class="line">            Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> printABC(t2),<span class="string">&quot;C&quot;</span>);</span><br><span class="line">            t1.start();</span><br><span class="line">            t2.start();</span><br><span class="line">            t3.start();</span><br><span class="line">            Thread.sleep(<span class="number">10</span>); <span class="comment">//这里是要保证只有t1、t2、t3为一组，进行执行才能保证t1-&gt;t2-&gt;t3的执行顺序。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">printABC</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Thread beforeThread;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">printABC</span><span class="params">(Thread beforeThread)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.beforeThread = beforeThread;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(beforeThread!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforeThread.join(); </span><br><span class="line">                    System.out.print(Thread.currentThread().getName());</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="0-3-Lock">0.3 Lock</h5><p>该方法很容易理解，不管哪个线程拿到锁，<strong>只有符合条件的才能打印</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Lock_ABC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;   <span class="comment">// 当前状态值：保证三个线程之间交替打印</span></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printABC</span><span class="params">(<span class="keyword">int</span> targetNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">3</span> == targetNum) &#123;</span><br><span class="line">                num++;</span><br><span class="line">                i++;</span><br><span class="line">                System.out.print(Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">            lock.unlock(); <span class="comment">// 不符合要求直接释放锁，不会像sync一样阻塞在sync或wait处</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Lock_ABC lockABC = <span class="keyword">new</span> Lock_ABC();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lockABC.printABC(<span class="number">0</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lockABC.printABC(<span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lockABC.printABC(<span class="number">2</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="0-4-Semaphore">0.4 <strong>Semaphore</strong></h5><p>Semaphore：用来控制同时访问某个特定资源的操作数量，或者同时执行某个制定操作的数量。Semaphore内部维护了一个计数器，其值为可以访问的共享资源的个数。</p><ul><li>一个线程要访问共享资源，先使用<code>acquire()</code>方法获得信号量，如果信号量的计数器值大于等于1，意味着有共享资源可以访问，则使其计数器值减去1，再访问共享资源。如果计数器值为0,线程进入休眠；</li><li>当某个线程使用完共享资源后，使用<code>release()</code>释放信号量，<strong>并将信号量内部的计数器加1</strong>，之前进入休眠的线程将被唤醒并再次试图获得信号量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SemaphoreABC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Semaphore s1 = <span class="keyword">new</span> Semaphore(<span class="number">1</span>); <span class="comment">//因为先执行线程A，所以这里设s1的计数器为1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Semaphore s2 = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Semaphore s3 = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printABC</span><span class="params">(Semaphore currentThread, Semaphore nextThread)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentThread.acquire();       <span class="comment">//阻塞当前线程，即信号量的计数器减1为0</span></span><br><span class="line">                System.out.print(Thread.currentThread().getName());</span><br><span class="line">                nextThread.release();          <span class="comment">//唤醒下一个线程，即信号量的计数器加1</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SemaphoreABC printer = <span class="keyword">new</span> SemaphoreABC();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            printer.printABC(s1, s2);</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            printer.printABC(s2, s3);</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            printer.printABC(s3, s1);</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-1-线程基本">1.4.1 线程基本</h3><h4 id="1-什么是线程和进程？如何保证线程安全？">1. 什么是线程和进程？<strong>如何保证线程安全？</strong></h4><h5 id="1-1-什么是线程和进程？">1.1 什么是线程和进程？</h5><ul><li><p><strong>什么是进程？</strong></p><p><strong>进程是程序的⼀次执行过程，是系统运行程序的基本单位</strong>，因此进程是<strong>动态</strong>的。系统运行⼀个程序即是⼀个进程从创建，运行到消亡的过程。</p><blockquote><p>如下图所示，在 windows 中通过查看任务管理器的方式，我们就可以清楚看到 window 当前运行的进程（.exe ⽂件的运行）。在Windows操作系统中，一个程序只对应一个进程，里面可以有一个或多个线程。</p><p><img src="https://i.loli.net/2021/05/16/cxYPKI1LnR4V3Mt.png" alt="image-20210516101110229"></p></blockquote></li><li><p><strong>什么是线程？</strong></p><p><strong>线程与进程相似，但线程是⼀个⽐进程更小的执行单位</strong>。⼀个进程在其执行的过程中可以产⽣多个线程。</p><ul><li>与进程不同的是同类的多个线程共享进程的<strong>堆</strong>和<strong>方法区</strong>资源，但每个线程有⾃⼰的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong></li></ul><p>所以系统在产⽣⼀个线程，或是在各个线程之间作<u>切换⼯作</u>时，<strong>负担要⽐进程小得多</strong>，也正因为如此，线程也被称为轻量级进程。</p><blockquote><p>⼀个 Java 程序的运行是 main 线程和多个其他线程同时运行。</p></blockquote></li></ul><h5 id="1-2-如何保证线程安全？">1.2 如何保证线程安全？</h5><ol><li><strong>原子性</strong>，简单说就是<u>相关操作不会中途被其他线程干扰，一般通过同步机制实现</u>；</li><li><strong>可见性</strong>，<u>是一个线程修改了某个共享变量，其状态能够立即被其他线程知晓</u>，通常被解释为将线程本地状态反映到主内存上，volatile 就是负责保证可见性的；</li><li><strong>有序性</strong>，<u>是保证线程内串行语义，避免指令重排</u>等。</li></ol><h5 id="1-3-为什么程序计数器、虚拟机栈和本地方法栈是-u-线程-u-私有的">1.3 为什么程序计数器、虚拟机栈和本地方法栈是<u>线程</u>私有的?</h5><ul><li><p><strong>程序计数器为什么是私有</strong></p><p>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪⼉了。</p><p>所以，程序计数器<u>私有</u>主要是为了<strong>线程切换后能恢复到正确的执行位置</strong>。</p></li><li><p><strong>虚拟机栈和本地方法栈为什么私有</strong></p><ul><li><p><strong>虚拟机栈</strong>： <u>每个 Java 方法在执行的同时会创建⼀个栈帧用于存储局部变量表、操作数栈、常量池引用等信息</u>。从方法调用直⾄执行完成的过程，就对应着⼀个栈帧在 Java 虚拟机栈中<strong>⼊栈和出栈</strong>的过程。</p></li><li><p><strong>本地方法法栈</strong>： 和虚拟机栈所发挥的作用非常相似，区别是：<strong>虚拟机栈为虚拟机执行</strong> <strong>Java</strong> 方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的 <strong>Native方法服务</strong>。 在 HotSpot 虚拟机中和 Java 虚拟机栈合⼆为⼀。</p></li></ul><p>所以，为了<strong>保证线程中的局部变量不被别的线程访问到</strong>，虚拟机栈和本地方法栈是线程私有的。</p></li></ul><h4 id="2-创建线程的方式（非线程池）？-哪种最好？">2.<strong>创建线程的方式（非线程池）？ 哪种最好？</strong></h4><p>一般有三种方式来进行创建：</p><ol><li><p><strong>继承Thread类</strong>：（1）定义Thread类的子类，并重写该类的run方法（2）创建Thread子类的实例对象 （3）调用对象start()方法</p><blockquote><ul><li>优点：编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用this即可获取当前线程；</li><li>缺点：因为线程类已经继承了Thread类，Java语言是单继承的，所以就不能再继承其他父类了。</li></ul></blockquote></li><li><p><strong>实现Runnable接口</strong>：（1）定义runnable接口的<strong>实现类</strong>，并重写该接口的run()方法 （2）创建实现类的实例对象（3）调用线程对象的start()方法来启动该线程</p></li><li><p><strong>通过Callable和Future创建线程</strong>：（1）创建Callable接口的实现类，<strong>并实现call()方法</strong>（2）创建Callable实现类的实例，并使用FutureTask类来包装Callable对象（3）使用FutureTask对象作为Thread对象的target创建并启动新线程（4）调用FutureTask对象的get()方法来获得子线程执行结束后的返回值</p></li></ol><p>其中 <u>实现Runnalbe接口更好</u>  ，使用实现Runnable接口的方式创建的线程<strong>可以处理同一资源</strong>，从而实现资源的共享。</p><h4 id="3-如何停止一个正在运行的线程？">3.<strong>如何停止一个正在运行的线程？</strong></h4><ol><li><p>使用退出标志，使线程正常退出，也就是当run方法完成后线程终止；</p></li><li><p>使用stop方法强行终止，但是不推荐这个方法，因为stop和suspend及resume一样都是过期作废的方法；</p></li><li><p>使用interrupt方法中断线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">     <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; is running&quot;</span>);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">           sleep(<span class="number">1000</span>);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;week up from blcok...&quot;</span>);</span><br><span class="line">            stop = <span class="keyword">true</span>; <span class="comment">// 在异常处理代码中修改共享变量的状态</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    System.out.println(getName() + <span class="string">&quot; is exiting...&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterruptThreadDemo3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>          InterruptedException </span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">          MyThread m1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">          System.out.println(<span class="string">&quot;Starting thread...&quot;</span>);</span><br><span class="line">          m1.start();</span><br><span class="line">          Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">          System.out.println(<span class="string">&quot;Interrupt thread...: &quot;</span> +           m1.getName());</span><br><span class="line">          m1.stop = <span class="keyword">true</span>; <span class="comment">// 设置共享变量为true</span></span><br><span class="line">          m1.interrupt(); <span class="comment">// 阻塞时退出阻塞状态</span></span><br><span class="line">          Thread.sleep(<span class="number">3000</span>); <span class="comment">// 主线程休眠3秒以便观察线程m1的中断情况</span></span><br><span class="line">          System.out.println(<span class="string">&quot;Stopping application...&quot;</span>);</span><br><span class="line">       &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-什么是Daemon线程？它有什么意义？">4.<strong>什么是Daemon线程？它有什么意义？</strong></h4><p>所谓后台(daemon)线程，也叫守护线程，是指在程序运行的时候在后台提供一种通用服务的线程，并且这个线程并不属于程序中不可或缺的部分。</p><ul><li><strong>意义</strong>：JVM的垃圾回收线程就是Daemon线程，Finalizer也是守护线程。</li></ul><h4 id="5-说说CyclicBarrier和CountDownLatch的区别？">5.<strong>说说CyclicBarrier和CountDownLatch的区别？</strong></h4><p>两个看上去有点像的类，都在<code>java.util.concurrent</code>下，都可以用来表示代码运行到某个点上，二者的区别在于：</p><ol><li>CyclicBarrier的某个线程运行到某个点上之后，<strong>该线程即停止运行</strong>，<strong>直到所有的线程都到达了这个点</strong>，所有线程才重新运行CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值**-1**而已，该线程继续运行；</li><li>CyclicBarrier<strong>只能唤起一个任务</strong>，CountDownLatch可以唤起多个任务</li><li>CyclicBarrier可重用，<strong>CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了</strong></li></ol><h4 id="6-请你简要说明一下线程的基本状态以及状态之间的关系？">6.<strong>请你简要说明一下线程的基本状态以及状态之间的关系？</strong></h4><p><img src="https://i.loli.net/2021/04/28/VCN8xckXHMdrl1R.png" alt="image-20210428164922743"></p><ol><li><strong>新建状态</strong>：new语句创建的线程对象处于新建状态，仅被分配了内存；</li><li><strong>等待状态</strong>： 当线程在new之后，并且<u>在调用start方法前</u>，线程处于等待状态 ;</li><li><strong>就绪状态</strong>： 其他线程调用它的**start()**方法，该线程就进入就绪状态，<u>只差等待cpu的使用权 </u> ;</li><li><strong>运行状态</strong>： <u>线程占用CPU，执行程序代码</u>  ;</li><li><strong>阻塞状态</strong>： 阻塞状态是指线程因为某些原因放弃CPU，暂时停止运行。<u>阻塞状态分为三种：</u><ul><li><u>等待阻塞:</u> 运行的线程执行**wait()**方法，JVM会把该线程放入等待池中；</li><li><u>同步阻塞:</u> 运行的线程在获取<strong>对象同步锁</strong>时，若该同步锁被别的线程占用，则JVM会把线程放入锁池中；</li><li><u>其他阻塞:</u> 运行的线程执行Sleep()方法，或者发出I/O请求时，JVM会把线程设为阻塞状态。</li></ul></li><li><strong>死亡状态</strong>： 线程执行完<strong>run()方法中的代码</strong>，或者遇到了未捕获的异常，就会退出run()方法，结束生命周期</li></ol><h4 id="7-notify-和notifyAll-有什么区别？">7. <strong>notify()和notifyAll()有什么区别？</strong></h4><ul><li><strong>notify可能会导致死锁（why？</strong>），而notifyAll则不会；</li><li>使用notifyall,可以唤醒 所有处于wait状态的线程，使其重新进入锁的争夺队列中，而notify只能唤醒一个。</li></ul><h4 id="8-sleep-和wait-有什么区别？">8. <strong>sleep()和wait() 有什么区别？</strong></h4><ul><li><p><strong>继承的类</strong>：sleep()方法，我们首先要知道该方法是属于Thread类中的；而wait()方法，则是属于Object类中的；</p><blockquote><p><em>sleep()</em> 是 <em>Thread</em> 类静态方法，可以使 <u>当前</u> 线程阻塞，并指定暂停时间，重点在于理解 <u>当前</u>。休眠时间期满后，该线程不一定会立即执行被CPU调度，只是到了就绪状态。</p></blockquote></li><li><p><strong>是否释放锁</strong>：sleep()方法导致了程序暂停执行指定的时间，让出cpu该其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态。<strong>在调用sleep()方法的过程中，线程不会释放对象锁；当调用wait()方法的时候，线程会放弃对象锁</strong>，进入等待此对象的等待锁定池；</p></li><li><p><strong>用处</strong>： <strong>Wait 通常被用于线程间交互/通信</strong>，sleep 通常被用于暂停执行；</p></li><li><p><strong>再次唤醒</strong>： wait() 方法被调用后，线程不会⾃动苏醒，需要别的线程调用同⼀个对象上的 notify() 或者notifyAll() 方法。sleep() 方法执行完成后，线程会⾃动苏醒。</p></li></ul><h5 id="8-1-Thread类中的yield方法有什么作用？">8.1 <strong>Thread类中的yield方法有什么作用？</strong></h5><p><em>yield()</em> 也是 <em>Thread</em> 类静态方法，<strong>使当前线程变为<u>就绪状态</u></strong> （<em>sleep()</em> 是阻塞），使得其他线程更多机会获取CPU。执行yield()的线程有可能在进入到暂停状态后马上又被执行。</p><h5 id="8-2-java-中Wait、Sleep和Yield方法的区别？">8.2 <strong>java 中Wait、Sleep和Yield方法的区别？</strong></h5><p><a href="https://www.jianshu.com/p/25e959037eed">https://www.jianshu.com/p/25e959037eed</a></p><h4 id="9-volatile-是什么-可以保证有序性吗">9. <strong>volatile 是什么?可以保证有序性吗?</strong></h4><ol><li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的,volatile关键字会强制将修改的值立即写入主存；</li><li>禁止进行指令重排序。</li></ol><p><strong>能保证有序性</strong>，因为禁止指令重排。</p><h4 id="10-为什么wait-notify-和-notifyAll这些方法不在thread类里面？">10. 为什么wait, notify 和 notifyAll这些方法不在thread类里面？</h4><p><a href="https://www.zhihu.com/question/321674476">https://www.zhihu.com/question/321674476</a></p><p>明显的原因是<strong>JAVA提供的锁是对象级的而不是线程级的</strong>，每个对象都有锁，通过线程获得。如果线程需要等待某些锁那么调用对象中的wait()方法就有意义了。<u>如果wait()方法定义在Thread类中，线程正在等待的是哪个锁就不明显了</u>。</p><ul><li>简单的说，由于wait，notify和notifyAll都是锁级别的操作，所以把他们定义在Object类中因为锁属于对象。</li></ul><h4 id="11-为什么wait和notify方法要在同步块中调用？">11.<strong>为什么wait和notify方法要在同步块中调用？</strong></h4><ul><li><u>wait()方法<strong>强制当前线程释放对象锁</strong></u>。这意味着在调用某对象的wait()方法之前，当前线程必须已经获得该对象的锁。因此，线程必须在某个对象的同步方法或同步代码块中才能调用该对象的wait()方法；</li><li>在调用对象的notify()和notifyAll()方法之前，<u>调用线程必须<strong>已经得到该对象的锁</strong></u>。因此，必须在某个对象的同步方法或同步代码块中才能调用该对象的notify()或notifyAll()方法。</li></ul><h4 id="12-（没细看）Java中interrupted-和-isInterruptedd方法的区别？">12. （没细看）<strong>Java中interrupted 和 isInterruptedd方法的区别？</strong></h4><p>interrupted() 和 isInterrupted()的主要区别是前者会将中断状态清除而后者不会。Java多线程的中断机制是用内部标识来实现的，调Thread.interrupt()来中断一个线程就会设置中断标识为true。当中断线程调用静态方法Thread.interrupted()来检查中断状态时，中断状态会被清零。而非静态方法isInterrupted()用来查询其它线程的中断状态且不会改变中断状态标识。简单的说就是任何抛出InterruptedException异常的方法。</p><h3 id="1-4-2-线程池">1.4.2 线程池</h3><h4 id="1-请你解释一下什么是线程池（thread-pool）？">1.<strong>请你解释一下什么是线程池（thread pool）？</strong></h4><p>线程池顾名思义就是事先创建若干个可执行的线程放入一个池（容器）中，需要的时候从池中获取线程不用自行创建，<u>使用完毕不需要销毁线程而是放回池中，从而减少创建和销毁线程对象的开销</u>。 除此之外：</p><ul><li>提高性能，利用多线程压榨CPU算力；</li><li>提高线程的可管理性，限制线程数量并可以进行统一的分配、调优和监控。</li></ul><h5 id="1-1-请介绍一下使用线程池任务执行过程？"><strong>1.1 请介绍一下使用线程池任务执行过程？</strong></h5><p><strong>核心参数</strong>：其中<code>corePool</code>是核心线程池（保活线程），<code>maximumPool</code>是总线程池（保活线程+工作线程），<code>blockQueue </code>是等待任务队列，<code>rejectedExecutionHandler</code>是拒绝策略：</p><p><img src="https://i.loli.net/2021/04/19/Pn4wc5621hqIXpl.png" alt="image-20210419235537833" style="zoom: 33%;" /><img src="https://segmentfault.com/img/remote/1460000038860133" alt="iShot2021-01-03 20.18.23.png" style="zoom: 67%;" /></p><p><strong>流程：corePoolSize→队列→maximumPool→拒绝策略</strong></p><ol><li>未达到corePoolSize时，核心线程池会开辟新线程运行任务（<u>可以使用已有线程吗？</u>），<strong>任务结束后线程不销毁</strong>；</li><li>达到corePoolSize，而任务队列未满时，新任务提交到等待队列，<strong>线程空闲时间超过keepAliveTime时被销毁；</strong></li><li>任务队列也满了，但未超过最大线程数，新建工作线程执行任务；</li><li>超过最大线程数时，<strong>按拒绝策略处理</strong>，包括：<u>抛出异常、使用调用者线程运行任务、丢弃新任务、丢弃队列头任务</u>等。</li></ol><h5 id="1-2-线程池会回收核心线程吗？">1.2 线程池会回收核心线程吗？</h5><blockquote><p>参考：<a href="https://segmentfault.com/a/1190000038836285">线程池是怎么回收空闲线程的</a></p></blockquote><p>会，可以通过allowCoreThreadTimeOut参数来进行设置。</p><ul><li><p>先回忆一下整体线程池流程</p><img src="https://segmentfault.com/img/remote/1460000038860133" alt="iShot2021-01-03 20.18.23.png" style="zoom:67%;" /></li><li><p><strong>excute方法</strong></p><p>我们的任务放到线程池后，是从调用execute执行开始的。<br><img src="https://i.loli.net/2021/05/26/hc4w6ZIbm57CpOQ.png" alt="image-20210526234652655" style="zoom: 67%;" /></p><ul><li><p>核心是addWorker办法， 里面最最重要的就是初始化Worker同时启动thread。</p></li><li><p>Worker实现了Runnable接口，我们直接看它的run方法，看截图的③处标记，抽离出来一个runWorker方法：</p><p><img src="https://i.loli.net/2021/05/26/39woAvIR4QjNfxd.png" alt="iShot2021-01-03 20.39.22.png"></p><p>也就是说：①处是一个while循环，<strong>getTask</strong>方法就是从线程池队列取任务，<strong>如果取不到任务</strong>就会执行</p><p>​                   ②<strong>一旦跳出while循环，即进入到processWorkExit方法，这就是回收Worker</strong></p></li></ul></li><li><p><strong>getTask方法</strong></p><p>可以看到，①判断是否回收线程的条件，<strong>timed</strong> ，有两种情况要回收线程：</p><ol><li><strong>wc&gt;corePoolSize</strong> ，当前线程数大于核心线程数</li><li><strong>allowCoreThreadTimeOut</strong>，核心线程超时，所以<strong>核心线程是会被回收</strong>的</li></ol><p>然后②处就是从任务队列取任务了，<strong>带了timeOut参数的poll方法超时</strong> ，未能从任务队列获取任务即返回null，从而实现最终的<strong>线程回收</strong>。</p><blockquote><p>不是processWorkExit处理吗，怎么在getTask处理，还是得好好看看。</p></blockquote><p><img src="https://i.loli.net/2021/05/26/hxJerXAo16msf38.png" alt="image-20210526235850331"></p></li></ul><h4 id="2-请介绍一下什么是生产者消费者模式？">2.<strong>请介绍一下什么是生产者消费者模式？</strong></h4><p><img src="https://uploadfiles.nowcoder.com/images/20180925/308572_1537880635592_7142B8354CA8A352B2B805F997C71549" alt="img"></p><p>生产者消费者问题是线程模型中的经典问题：</p><ul><li>生产者和消费者在<strong>同一时间段内共用同一存储空间</strong>，生产者向空间里生产数据，而消费者取走数据。</li></ul><h4 id="3-线程池的拒绝策略有哪些？">3.<strong>线程池的拒绝策略有哪些？</strong></h4><p>主要有4种拒绝策略：</p><ol><li>AbortPolicy：直接丢弃任务，抛出异常，这是默认策略</li><li><strong>CallerRunsPolicy</strong>：只用调用者所在的线程来处理任务</li><li>DiscardOldestPolicy：<strong>丢弃等待队列中最旧</strong>的任务，并执行当前任务</li><li>DiscardPolicy：直接丢弃任务，也不抛出异常</li></ol><h4 id="4-如何创建一个线程池（四大方法）？相关参数（七大参数）是什么">4.<strong>如何创建一个线程池（四大方法）？相关参数（七大参数）是什么?</strong></h4><p>java通过Executors提供<strong>四大方法</strong>：</p><ol><li><strong>newCachedThreadPool</strong>：创建一个可缓存线程池，如果线程池长度超过处理需要，<strong>可灵活回收空闲线程，若无可回收，则新建线程</strong>；</li><li><strong>newFixedThreadPool</strong>：创建一个定长线程池，<u>可控制线程最大并发数</u>，<strong>超出的线程会在<u>队列中等待</u></strong>；</li><li><strong>newScheduledThreadPool</strong>：创建一个定长线程池，<u>支持定时及周期性任务执行</u>；</li><li><strong>newSingleThreadExecutor</strong>： 创建一个<u>单线程化的线程池</u>，它只会用<strong>唯一的工作线程</strong>来执行任务，保证<u>所有任务按照指定顺序(FIFO, LIFO, 优先级)执行</u>。</li></ol><p><strong>七大参数设置</strong>：</p><ol><li><p><strong>corePoolSize</strong>：当使用了<code>LinkedBlockingQueue = new LinkedBlockQueue</code>的时候，<strong>队列长度默认无限长</strong>，会导致线程数量永远等于<code>corePoolSize</code>，任务激增时任务响应时间也激增；</p></li><li><p><strong>maximumPoolSize</strong>：线程池中线程个数，增加线程的公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mtext>任务数</mtext><mo>−</mo><mi>q</mi><mi>u</mi><mi>e</mi><mi>u</mi><mi>e</mi><mi>C</mi><mi>a</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mtext>原线程数</mtext><mo>÷</mo><mtext>原任务数</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(任务数-queueCapacity) \times (原线程数 \div 原任务数)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord cjk_fallback">任务数</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">a</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord cjk_fallback">原线程数</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">原任务数</span><span class="mclose">)</span></span></span></span>；</p></li><li><p><strong>keepAliveTime</strong>：线程最大（空闲）存活时间；</p></li><li><p><strong>rejectedExecutionHandler</strong>：线程被拒绝的解决方案，可以自己重写；</p></li><li><p><strong>workQueue</strong> ： 阻塞队列；</p></li><li><p><strong>unit</strong>：keepAliveTime的单位 ；</p></li><li><p><strong>threadFactory</strong>：表示生成线程池中工作线程的线程工厂，用于创建线程一般默认即可</p></li></ol><h4 id="5-线程池核心线程数corePoolSize怎么设置呢？">5.<strong>线程池核心线程数corePoolSize怎么设置呢？</strong></h4><p>分为CPU密集型和IO密集型来考虑：</p><ul><li><p><strong>CPU密集型</strong>。这种任务消耗的主要是 CPU 资源，可以将线程数设置为 <code>N（CPU 核心数）+1</code>。</p><blockquote><p><u>比 CPU 核心数多出来的一个线程</u> ：是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。</p></blockquote></li><li><p><strong>IO密集型</strong>。这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，<strong>而线程在处理 I/O 的时间段内不会占用 CPU 来处理</strong>，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 ： <code>核心线程数=CPU核心数量*2</code></p></li></ul><h4 id="6-（不熟悉）Java线程池中队列常用类型有哪些？">6.<strong>（不熟悉）Java线程池中队列常用类型有哪些？</strong></h4><ul><li><code>ArrayBlockingQueue</code> ：是一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）原则对元素进行排序；</li><li><code>LinkedBlockingQueue</code> :一个基于链表结构的阻塞队列，此队列按FIFO （先进先出） 排序元素，吞吐量通常要高于 ArrayBlockingQueue ；</li><li><code>SynchronousQueue</code> : 一个不存储元素的阻塞队列；</li><li><code>PriorityBlockingQueue</code>： 一个具有优先级的无限阻塞队列，PriorityBlockingQueue 也是基于最小二叉堆实现。</li></ul><h4 id="7-有三个线程T1-T2-T3-如何保证顺序执行？">7.<strong>有三个线程T1,T2,T3,如何保证顺序执行？</strong></h4><p>因为在每个线程的run方法中用join()方法限定了三个线程的执行顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinTest2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="comment">// 1.现在有T1、T2、T3三个线程，你怎样保证T2在T1执行完后执行，T3在T2执行完后执行</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">final</span> Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() </span><br><span class="line">         &#123;</span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">               </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">         <span class="keyword">final</span> Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">// t2线程内run方法最开始，引用t1.join，等待t1线程执行完</span></span><br><span class="line">                   t1.join();</span><br><span class="line">                 &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">                 &#125;</span><br><span class="line">                   System.out.println(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// t3线程内run方法最开始，引用t2.join，等待t2线程执行完</span></span><br><span class="line">                        t2.join();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">                          &#123;</span><br><span class="line">                           e.printStackTrace();</span><br><span class="line">                          &#125;</span><br><span class="line">                         System.out.println(<span class="string">&quot;t3&quot;</span>);</span><br><span class="line">                         &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//这里三个线程的启动顺序可以任意，大家可以试下！</span></span><br><span class="line">         t3.start();</span><br><span class="line">         t2.start();</span><br><span class="line">         t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-3-多线程">1.4.3 多线程</h3><h4 id="1-请简述一下实现多线程同步的方法？-为什么需要使用多线程？使用多线程会带来什么问题？">1.<strong>请简述一下实现多线程同步的方法？</strong> 为什么需要使用多线程？使用多线程会带来什么问题？</h4><ul><li><p><strong>同步方法</strong>：可以使用synchronized、lock、volatile和ThreadLocal来实现同步。</p></li><li><p><strong>为什么需要使用多线程？</strong></p><ul><li>减少<strong>上下文切换开销</strong>（共享进程的堆和方法区 ，注意，减少≠没有）</li><li>利用好多线程机制可以大大提<strong>高系统整体的并发能⼒</strong>以及性能</li><li><strong>多核时代</strong> ：多核时代多线程主要是为了提高 CPU 利用率。举个例子：假如我们要计算⼀个复杂的任务，我们只用⼀个线程的话，CPU <strong>只会⼀个 CPU 核⼼</strong>被利用到，而创建多个线程就可以让多个 CPU 核⼼被利用到，这样就提高了 CPU 的利用率。</li></ul></li><li><p><strong>带来的问题？</strong></p><ul><li><u>内存泄漏、上下⽂切换、死锁</u>还有受限于硬件和软件的资源闲置问题。</li></ul></li></ul><h4 id="2-什么是线程安全？如何保证线程安全？">2. 什么是线程安全？如何保证线程安全？</h4><blockquote><p>好文：<a href="https://zhuanlan.zhihu.com/p/94762520">一文搞懂CAS</a></p></blockquote><ul><li><p><strong>什么是线程安全？</strong></p><p>如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。<u>如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的</u>，就是线程安全的。</p></li><li><p><strong>如何保证线程安全？</strong></p><ol><li><strong>使用 synchronized 关键字</strong> 。开销比较大</li><li><strong>使用Lock 锁</strong> 。高并发场景下，使用 Lock 锁要比使用synchronized 关键字，在性能上得到极大的提高。因为 Lock 底层是通过 AQS + CAS 机制来实现的。</li><li><strong>使用 Atomic 原子类</strong> 。使用 Lock 方式，一旦 unlock() 方法使用不规范，可能导致死锁。 Atomic 原子类，因为其底层基于 CAS 乐观锁来实现的，性能较高。</li><li><strong>使用Volatile？不可行！</strong> 因为无法保证原子性。</li></ol></li></ul><h4 id="3-线程安全需要保证几个基本特征？">3.<strong>线程安全需要保证几个基本特征？</strong></h4><ul><li><strong>原子性</strong>，简单说就是相关操作不会中途被其他线程干扰，一般通过同步机制实现。</li><li><strong>可见性</strong>，是一个线程修改了某个共享变量，其状态能够立即被其他线程知晓，通常被解释为将<br>线程本地状态反映到主内存上，volatile 就是负责保证可见性的。</li><li><strong>有序性</strong>，是保证线程内串行语义，避免指令重排等。</li></ul><h4 id="4-【待补充】如何在线程安全的情况下实现一个计数器？">4. 【待补充】<strong>如何在线程安全的情况下实现一个计数器？</strong></h4><p>可以使用加锁，比如synchronized或者lock。也可以使用Concurrent包下的原子类。</p><h4 id="5-多线程中的i-线程安全吗？请简述一下原因？">5.<strong>多线程中的i++线程安全吗？请简述一下原因？</strong></h4><p>不安全，因为<strong>i++不是原子性操作</strong>。i++分为读取i值，对i值加一，再赋值给i++，执行期中任何一步都是有可能被其他线程抢占的。</p><h4 id="6-介绍一下ThreadLocal原理？">6.<strong>介绍一下ThreadLocal原理？</strong></h4><blockquote><p>一篇讲的不错的文章：<a href="https://www.cnblogs.com/wupeixuan/p/12638203.html">https://www.cnblogs.com/wupeixuan/p/12638203.html</a></p></blockquote><p>当多线程访问共享可变数据时，涉及到线程间同步的问题，<u><strong>并不是</strong>所有时候，都要用到共享数据</u>，所以就需要线程封闭出场了。<strong>数据都被封闭在各自的线程之中</strong>，就不需要同步，这种通过将数据封闭在线程中而避免使用同步的技术称为<strong>线程封闭</strong>。</p><p>ThreadLocal 是 Java 里一种特殊变量，它是一个线程级别变量，<u>每个线程都有一个 ThreadLocal 就是每个线程都拥有了自己独立的一个变量</u>，竞态条件被彻底消除了，在并发模式下是绝对安全的变量。</p><ul><li><p><strong>使用示例</strong></p><p>在下面例子中，TreadLocal 做到多个线程对同一对象 set 操作，但是 get 获取的值还都是每个线程 set 的值，体现了线程的封闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ThreadLocal变量，每个线程都有一个副本，互不干扰</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; THREAD_LOCAL = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ThreadLocalDemo().threadLocalTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadLocalTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 主线程设置值</span></span><br><span class="line">        THREAD_LOCAL.set(<span class="string">&quot;wupx&quot;</span>);</span><br><span class="line">        String v = THREAD_LOCAL.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread-0线程执行之前，&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;线程取到的值：&quot;</span> + v);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                String v = THREAD_LOCAL.get();</span><br><span class="line">                <span class="comment">// 此时新建线程Thread-0取到的是null，意味着不同线程取到的值不同的</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程取到的值：&quot;</span> + v);</span><br><span class="line">                <span class="comment">// 设置 threadLocal</span></span><br><span class="line">                THREAD_LOCAL.set(<span class="string">&quot;huxy&quot;</span>);</span><br><span class="line">                v = THREAD_LOCAL.get();</span><br><span class="line">                System.out.println(<span class="string">&quot;重新设置之后，&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;线程取到的值为：&quot;</span> + v);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程执行结束&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">// 等待所有线程执行结束</span></span><br><span class="line">        Thread.sleep(<span class="number">3000L</span>);</span><br><span class="line">        v = THREAD_LOCAL.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread-0线程执行之后，&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;线程取到的值：&quot;</span> + v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  输出结果 */</span></span><br><span class="line"><span class="comment">// 虽然Thread-0已经改变了值，但是main取到的值依旧是一样的。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Thread-0线程执行之前，main线程取到的值：wupx</span></span><br><span class="line"><span class="comment">Thread-0线程取到的值：null</span></span><br><span class="line"><span class="comment">重新设置之后Thread-0线程取到的值为：huxy</span></span><br><span class="line"><span class="comment">Thread-0线程执行结束</span></span><br><span class="line"><span class="comment">Thread-0线程执行之后，main线程取到的值：wupx</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ThreadLocal原理</strong></p><p>ThreadLocal有一个<strong>静态内部类ThreadLocalMap，ThreadLocalMap又包含了一个Entry数组</strong>，Entry本身是一个弱引用，他的key是指向ThreadLocal的弱引用，Entry具备了保存key value键值对的能力。</p><p><img src="https://i.loli.net/2021/05/16/MXKyQxYDjWdOku2.png" alt="image-20210516142348550"></p><ul><li><p><strong>ThreadLocalMap</strong></p><blockquote><p>ThreadLocalMap 是 ThreadLocal 的静态内部类，当一个<strong>线程有多个 ThreadLocal 对象时</strong>时，需要一个容器来管理多 ThreadLocal，ThreadLocalMap 的作用就是管理线程中多个 ThreadLocal。</p></blockquote><p>从源码中看到 ThreadLocalMap 其实就是一个简单的 Map 结构，底层是数组，有初始化大小，也有扩容阈值大小，数组的元素是 Entry，<strong>Entry 的 key 就是 ThreadLocal 的引用，value 是 ThreadLocal 的值</strong>。ThreadLocalMap 解决 hash 冲突的方式采用的是<strong>线性探测法</strong>，如果发生冲突会继续寻找下一个空的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 键值对实体的存储结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line"><span class="comment">// 当前线程关联的 value，这个 value 并没有用弱引用追踪</span></span><br><span class="line">Object value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造键值对</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k k 作 key,作为 key 的 ThreadLocal 会被包装为一个弱引用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> v v 作 value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line"><span class="keyword">super</span>(k);</span><br><span class="line">value = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始容量，必须为 2 的幂</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储 ThreadLocal 的键值对实体数组，长度必须为 2 的幂</span></span><br><span class="line"><span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ThreadLocalMap 元素数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容的阈值，默认是数组大小的三分之二</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> threshold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Set方法</strong></p><blockquote><p>调用 ThreadLocal对象.set(value)，实际在调用当前线程的ThreadLocalMap对象.set(this,value) ，会把当前 <code>threadLocal</code> 对象作为 key，想要保存的对象作为 value，存入 map。</p></blockquote><p>set 方法的流程主要是：</p><ul><li>先获取到当前线程的引用</li><li>利用这个引用来获返回当前线程到 ThreadLocalMap</li><li>如果 map 为空，则去创建一个 ThreadLocalMap</li><li>如果 map 不为空，就利用 ThreadLocalMap 的 <code>set (this当前对象，value)</code> 添加键值对</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为当前 ThreadLocal 对象关联 value 值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 要存储在此线程的线程副本的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 返回当前ThreadLocal所在的线程</span></span><br><span class="line">Thread t = Thread.currentThread();</span><br><span class="line"><span class="comment">// 返回当前线程持有的map</span></span><br><span class="line">ThreadLocalMap map = getMap(t);</span><br><span class="line"><span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 如果 ThreadLocalMap 不为空，则直接存储&lt;ThreadLocal, T&gt;键值对</span></span><br><span class="line">        <span class="comment">// 此时this是ThreadLocal对象，这是在ThreadLocal类中</span></span><br><span class="line">map.set(<span class="keyword">this</span>, value);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 否则，需要为当前线程初始化 ThreadLocalMap，并存储键值对 &lt;this, firstValue&gt;</span></span><br><span class="line">createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回当前线程 thread 持有的 ThreadLocalMap对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Get方法</strong></p><blockquote><p>调用ThreadLocal对象.get() 方式时，实际在调用ThreadLocalMap对象.getEntry(this) 方法。this是当前ThreadLocal对象。</p></blockquote><p>get 方法的主要流程为：</p><ul><li>先获取到当前线程的引用</li><li>获取当前线程内部的 ThreadLocalMap对象</li><li>如果 map 存在，则获取当前 ThreadLocal 对应的 value 值</li><li>如果 map 不存在或者找不到 value 值，则调用 setInitialValue() 进行初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回当前 ThreadLocal 对象关联的值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 返回当前 ThreadLocal 所在的线程</span></span><br><span class="line">Thread t = Thread.currentThread();</span><br><span class="line"><span class="comment">// 从线程中拿到 ThreadLocalMap</span></span><br><span class="line">ThreadLocalMap map = getMap(t);</span><br><span class="line"><span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 从 map 中拿到 entry</span></span><br><span class="line">ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// 如果不为空，读取当前 ThreadLocal 中保存的值</span></span><br><span class="line"><span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">T result = (T) e.value;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若 map 为空，则对当前线程的 ThreadLocal 进行初始化，最后返回当前的 ThreadLocal 对象关联的初值，即 value</span></span><br><span class="line"><span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>resize 方法</strong></p><p>当前线程的 ThreadLocalMap 中的 ThreadLocal 的个数超过容量阈值时，ThreadLocalMap 就要开始扩容了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 略</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="7-为什么ThreadLocal造成内存泄漏？">7.<strong>为什么<code>ThreadLocal</code>造成内存泄漏？</strong></h4><p>ThreadLocalMap 是 ThreadLocal 的静态内部类，当一个线程有多 个ThreadLocal 时，需要一个容器来管理多个 ThreadLocal，ThreadLocalMap 的作用就是管理线程中多个 ThreadLocal。</p><blockquote><p>源码中看到 ThreadLocalMap 其实就是一个简单的 Map 结构：</p><p>底层是数组<code>Entry[] table</code>，数组的元素是 Entry类：<strong>Entry 的两个属性， key 是 ThreadLocal类型的引用，value 是 ThreadLocal 的值</strong>。</p></blockquote><ul><li><strong>原因</strong>：<code>ThreadLocalMap</code>的key为<strong>弱引用</strong>（有用但非必需，下一次GC会被回收），value为<strong>强引用</strong>（GC过程不会被回收），<u>有可能造成key被GC，value没被G</u>C，<code>ThreadLocalMap</code>中出现<code>null</code>为key的<code>Entry</code>，产生<u>内存泄漏</u>（<strong>软引用</strong>：有用但非必需，内存溢出之前被回收）；</li><li><strong>解决</strong>： 调用<code>set()</code>、<code>get()</code>和<code>remove()</code>方法时，会自动清理掉key为<code>null</code>的记录，但使用<code>ThreadLocal</code>方法后<strong>手动<code>remove()</code></strong>。</li></ul><h4 id="8-什么是多线程中的上下文切换？">8.<strong>什么是多线程中的上下文切换？</strong></h4><p><u>一个线程<strong>让出处理器使用权</strong>，就是“切出”；另外一个线程获取处理器使用权，就是“切入”。</u>在这个切入切出的过程中，操作系统会保存和恢复相关的进度信息，这个进度信息就是我们常说的“上下文”，上下文中一般包含了寄存器的存储内容以及程序计数器存储的指令内容。</p><h4 id="9-请问什么是死锁-deadlock">9.<strong>请问什么是死锁(deadlock)?</strong></h4><p>死锁是指<u>两个或两个以上的进程（线程）在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象</u>，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程（线程）称为死锁进程（线程）。</p><h4 id="10-JAVA中如何确保N个线程可以访问N个资源，但同时又不导致死锁？">10. <strong>JAVA中如何确保N个线程可以访问N个资源，但同时又不导致死锁？</strong></h4><p><u>最简单方法：<strong>指定获取锁的顺序，并强制线程按照指定的顺序获取锁</strong>。</u></p><p>因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。或者通过破坏死锁的四个条件：</p><ul><li><strong>互斥</strong> ： 不可能破坏。</li><li><strong>破坏请求和保持条件</strong>：进程必须 <u>等所有要请求的资源都空闲时才能申请资源</u>， 这种方法会使<strong>资源浪费严重</strong> 。允许进程获取初期所需资源后，便开始运行，运行过程中再逐步释放自己占有的资源。</li><li><strong>破坏不可抢占条件</strong>： 方法代价大，实现复杂。</li><li><strong>破坏循坏等待条件</strong> ：对各进程请求资源的顺序做一个规定，避免相互等待。这种方法对<u>资源的利用率比前两种都高</u>，但是前期要为设备指定序号，新设备加入会有一个问题，其次对用户编程也有限制。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（一）_Java_集合</title>
      <link href="/p/21069/"/>
      <url>/p/21069/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我的校招记录：<a href="https://www.hwh.zone/p/29708/">校招笔记（零）_写在前面</a> ，以下是校招笔记总目录。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><h2 id="1-3-集合">1.3 集合</h2><h3 id="1-3-1-集合类">1.3.1 集合类</h3><h4 id="1-请说明Java集合类框架的基本接口有哪些？">1.<strong>请说明Java集合类框架的基本接口有哪些</strong>？</h4><ul><li><code>Collection</code>：代表一组对象，每一个对象都是它的子元素。</li><li><code>Set</code>：不包含重复元素的Collection。</li><li><code>List</code>：有顺序的collection，并且可以包含重复元素。</li><li><code>Map</code>：可以把键(key)映射到值(value)的对象，键不能重复。</li></ul><h4 id="2-（补充：举例说明）说说什么是fail-fast？">2.<strong>（补充：举例说明）说说什么是fail-fast？</strong></h4><p>fail-fast 机制是 Java 集合（Collection）中的一种错误<strong>快速反馈</strong>机制。当<strong>多个线程对同一个集合的内容进行操作时</strong>，就可能会产生 fail-fast 事件。</p><blockquote><p>例如：当某一个线程 A 通过 iterator 去遍历某集合的过程中，<strong>若该集合的内容被其他线程所改变了，那么线程 A 访问集合时，就会抛出 ConcurrentModifificationException 异常</strong>，产生 fail-fast 事件。这里的操作主要是指 add、remove 和 clear，对集合元素个数进行修改。</p></blockquote><h4 id="3-请说明List、Map、Set三个接口区分？">3.<strong>请说明List、Map、Set三个接口区分</strong>？</h4><ul><li><strong>重复元素</strong>：List以特定索引来存取元素，可以有重复元素；Map以键值对映射，不能有重复key；Set元素不能重复</li><li><strong>继承collection</strong>： List、Set继承于collection；Map和前二者明显区分，不继承collection</li><li><strong>实现方式</strong>： List是线性结构的容器 ，典型实现有<u>ArrayList 、LinkedList、Vector</u>； Map、Set都有 <u>基于哈希存储和排序树</u> 的两种实现版本，前者实现有 <u>HashMap和Hashtable</u> ，后者有<u>HashSet</u></li></ul><h4 id="4-请讲讲你所知道的常用集合类以及主要方法？">4.<strong>请讲讲你所知道的常用集合类以及主要方法</strong>？</h4><p>最常用的集合类是List 和 Map。</p><ul><li><strong>List</strong>：典型实现有<u>ArrayList 、LinkedList、Vector</u> ，大小可变，适合用于按数值索引元素类型；</li><li><strong>Map</strong>： 其中每个键映射到一个值，实现有 <u>HashMap和Hashtable</u> 。</li></ul><h3 id="1-3-2-Map-Set">1.3.2 <strong>Map &amp; Set</strong></h3><h4 id="1-请你介绍一下map的分类和常见的情况？">1.<strong>请你介绍一下map的分类和常见的情况</strong>？</h4><p>java为数据结构中的映射定义了一个接口<code>java.util.Map</code>  ， 它有四个实现类,分别是<code>HashMap、 Hashtable、 LinkedHashMap、 和TreeMap</code>.</p><ul><li><p><strong>Hashmap</strong>  ：根据键的HashCode值存储数据,根据键可以直接获取它的值，具有很快的访问速度。</p><ul><li>遍历：访问快，遍历时取得的<u>数据随机</u></li><li>线程：不支持线程同步（但可以用Collections的synchronizedMap 实现同步）</li><li>key和记录：<strong>HashMap允许键和值是null</strong></li></ul></li><li><p><strong>Hashtable</strong> ：和Hashmap类似，是其子类。但其：</p></li><li><p>线程： 支持线程同步，也导致写入比较慢（一个时候只能一个线程写入）</p></li><li><p>key和记录：不允许记录的键或者值为空 ；</p></li><li><p><strong>LinkedHashMap</strong> ：HashMap的一个子类，<u>保存了记录插入顺序</u>：</p></li><li><p>遍历：<strong>遍历</strong>先得到的记录是先插入、一般情况比HashMap慢。</p></li><li><p><strong>TreeMap</strong> ： 实现SortMap接口，默认是按键值的升序排序，</p></li><li><p>遍历：当用<strong>遍历</strong>TreeMap时，得到的记录是<u>排过序</u>的</p><ul><li>线程：线程安全</li></ul></li></ul><p>一般情况下，我们用的最多的是HashMap, 在Map 中插入、删除和定位元素，HashMap 是最好的选择。但<u>如果您要按自然顺序或自定义顺序遍历键</u>，那么TreeMap会更好。如果需要<u>输出的顺序和输入的相同</u>,那么用LinkedHashMap 可以实现,它还<strong>可以按读取顺序来排列</strong>。</p><h5 id="1-1-TreeMap的底层实现？">1.1  TreeMap的底层实现？</h5><p>TreeMap实现了SotredMap接口，它是有序的集合。<strong>而且是一个红黑树结构，每个key-value都作为一个红黑树的节点</strong>。如果在调用<strong>TreeMap的构造函数时没有指定比较器，则根据key执行自然排序</strong>。这点会在接下来的代码中做说明，如<strong>果指定了比较器则按照比较器来进行排序</strong>。</p><ul><li>自然排序：TreeMap的所有key必须实现Comparable接口，所有的key都是同一个类的对象</li><li>定制排序：创建TreeMap对象传入了一个Comparator对象，该对象负责对TreeMap中所有的key进行排序，采用定制排序不要求Map的key实现Comparable接口。等下面分析到比较方法的时候在分析这两种比较有何不同。</li></ul><h4 id="2-请问HashMap和Hashtable区别？">2.<strong>请问HashMap和Hashtable区别</strong>？</h4><ul><li><strong>共同点</strong>：都实现Map接口</li><li><strong>不同点</strong>：<ol><li><strong>对Null key 和Null value的支持</strong>：HashMap<u>允许键和值是null</u>，而Hashtable不允许键或者值是null；</li><li><strong>线程安全</strong>：Hashtable是同步的线程安全，而HashMap不是；</li><li><strong>初始容量大小和每次扩充容量大小不同</strong>：  （1）创建时如果不指定容量初始值，Hashtable 默认的初始大小为<strong>11</strong>，之后每次扩充，容量变为原来的<strong>2n+1</strong>。HashMap 默认的初始化大小为<strong>16</strong>，之后每次扩充，容量变为原来的<strong>2</strong>倍 ；（2）创建时如果给定了容量初始值，那么 Hashtable 会直接使用<strong>你给定的大小</strong>，而 HashMap 会将其<strong>扩充为2的幂次方大小</strong>，也就是说 <u>HashMap 总是使用2的幂作为哈希表的大小</u>；</li><li><strong>底层数据结构</strong>： JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表⻓度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有转换为红黑树这样的机制；</li><li><strong>继承父类</strong>：HashMap是继承自AbstractMap类，而Hashtable是继承自Dictionary类。</li></ol></li></ul><h4 id="3-请问Map接口实现：HashMap、Hashtable和ConcurrentHashMap区别？">3.<strong>请问Map接口实现：HashMap、Hashtable和ConcurrentHashMap区别</strong>？</h4><p>都是key-value存储形式。</p><ul><li><p><strong>底层数据结构</strong>：<code>HashMap</code>与<code>ConcurrentHashMap</code>底层数据结构相似（数组+链表+红黑树），<code>Hashtable</code>没有红黑树；</p></li><li><p><strong>线程安全</strong>：<code>Hashtable</code>的<code>synchronized</code>修饰在方法，是对象级的加锁，同一时间只有一个线程能对数据进行操作；<code>ConcurrentHashMap</code>使用了修饰具体对象的<code>synchronized</code>（锁一个桶）和CAS机制，实现了更细粒度的锁；</p></li><li><p><strong>地址计算</strong>：</p></li></ul><ul><li><code>HashMap</code>使用<code>key.hashCode() ^ (key.hashCode() &gt;&gt;&gt; 16)</code>；-<ul><li><code>Hashtable</code>使用<code>(key.hashCode() &amp; 0x7fffffff) % tab.length()</code></li></ul></li><li><code>ConcurrentHashMap</code>使用<code>(key.hashCode() ^ (key.hashCode() &gt;&gt;&gt; 16)) &amp; 0x7fffffff</code>。</li></ul><h4 id="4-说一说红黑树特征？">4.<strong>说一说红黑树特征</strong>？</h4><blockquote><p>紧接上个问题，面试官很有可能会问红黑树。</p></blockquote><ul><li>每个节点是黑色是红色</li><li><strong>根节点和叶子节点是黑色</strong></li><li>红色节点不能相邻</li><li>从一个节点到子孙节点路径上相同数目的黑节点</li></ul><p><img src="https://i.loli.net/2021/05/05/yismA9xYt5MEeFw.png" alt="image-20210505132113159"></p><h4 id="5-hashmap的基本原理，扩容方式（rehash）？">5. <strong>hashmap的基本原理，扩容方式（rehash）</strong>？</h4><blockquote><p>很棒的一篇文章：<a href="https://www.jianshu.com/p/dde9b12343c1">https://www.jianshu.com/p/dde9b12343c1</a></p><p>更棒的一篇文章：<a href="https://zhuanlan.zhihu.com/p/81587796">https://zhuanlan.zhihu.com/p/81587796</a></p></blockquote><ul><li><p><code>HashMap定义</code></p><p>HashMap继承了Map端口，实现了Serializable等接口。存储HashMap的是一个Entry[]数组，Entry是一个单向链表：</p><blockquote><p>所以我们说HashMap实现的是一个<code>数组+链表</code> 。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">transient</span> Entry&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure></li><li><p><code>Entry类</code></p><p>Entry在HashMap中实现为一个静态内部类，封装了key和value，还有<u>类型为Entry的next指向下一个Entry引用</u>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> K key;</span><br><span class="line">       V value;</span><br><span class="line">       Entry&lt;K,V&gt; next;</span><br><span class="line">       <span class="keyword">int</span> hash;</span><br></pre></td></tr></table></figure></li><li><p><code>图解HashMap</code></p><p>根据前面所知，我们可以得到HashMap的实现如下（默认初始化容量为16）：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/4843132-05b3a55bd2686dd3.png" alt="img"></p></li><li><p><code>put方法实现</code></p><ol><li><p>输入的<code>key</code>根据<code>hash(key)</code> 计算出hash值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 对key为null的处理</span></span><br><span class="line">       <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">       <span class="comment">// 根据key算出hash值</span></span><br><span class="line">       <span class="keyword">int</span> hash = hash(key);</span><br></pre></td></tr></table></figure><ul><li><p><strong>hash方法如下（JDK1.8版本</strong>）</p><p>下面这段代码也叫<strong>扰动函数</strong> ，参考：<a href="https://www.zhihu.com/question/20733617">JDK 源码中 HashMap 的 hash 方法原理是什么？</a></p><p><img src="https://i.loli.net/2021/05/15/OZT8G6PdxkAtQVi.png" alt="img"></p><p>混合原始哈希码的高位和低位，以此来加大低位的随机性 。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> h;</span><br><span class="line"><span class="comment">// key.hashCode()：返回散列值也就是hashcode</span></span><br><span class="line"><span class="comment">// ^ ：按位异或</span></span><br><span class="line"><span class="comment">// &gt;&gt;&gt;⽆符号右移，忽略符号位，空位都以0补⻬</span></span><br><span class="line"><span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相⽐于 JDK1.8 的 hash 方法 ，JDK 1.7 的 hash 方法的性能会稍差⼀点点，因为毕竟扰动了 4 次。</p></li><li><p><strong>Object类HashCode实现</strong></p><blockquote><p>详细源码分析参考 ：<a href="https://juejin.cn/post/6844903487432556551">Java Object.hashCode()返回的是对象内存地址？</a></p></blockquote><p>JDK8 的<strong>默认</strong>hashCode的计算方法是通过和当前线程有关的<strong>一个随机数+三个确定值</strong>，运用Marsaglia’s xorshift scheme随机数算法得到的一个随机数 。</p><p>可以通过在JVM启动参数中添加<code>-XX:hashCode=4</code>，<u>改变默认的hashCode计算方式</u>：</p><ul><li>hashCode == 0 ：返回一个Park-Miller伪随机数生成器生成的随机数 ，OpenJdk 6 &amp;7的默认实现；</li><li>hashCode == 1：此类方案将对象的内存地址，做移位运算后与一个随机数进行异或得到结果 ；</li><li>hashCode == 2：此类方案返回固定的1；</li><li>hashCode == 3：此类方案返回一个自增序列的当前值；</li><li>hashCode == 4：此类方案返回当前对象的内存地址。</li></ul></li></ul></li><li><p>根据<code>indexFor(hash, table.length)</code> ，计算在table中下标</p><p><code>key.hashcode得到hash → 经过高低16异或扰动得到行hash →  indexFor计算下标</code></p><blockquote><p><code>indexFor()</code>  实际就是hash值取余：<code>hash%(table.lenght-1)</code> 。但在具体实现中通过位运算实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li><p><strong>计算原理</strong>。 顺便说一下，这也正好解释了<strong>为什么HashMap的数组长度要取2的整次幂</strong>。因为这样（数组长度-1）正好相当于一个<strong>低位掩码</strong>。“与”操作的结果就是散列值的高位全部归零，只保留低位值，用来做数组下标访问。以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是<strong>截取了最低的四位值</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">          10100101 11000100 00100101</span><br><span class="line">&amp;         00000000 00000000 00001111 （16）</span><br><span class="line">------------------------------------------</span><br><span class="line">          00000000 00000000 000000101</span><br></pre></td></tr></table></figure></li><li><p><strong>位运算要求<code>length</code> 一定是偶数</strong>。<code>length-1</code>则一定是奇数。 这样<code>h &amp; (length-1)</code>进行位运算出现的结果可奇可偶，不会一直是偶数，浪费奇数空间。而length为2的幂次，可以保证length一定是偶数，<strong>这也是扩容为什么要求一定是2的幂次</strong>。</p></li></ul></li><li><p><u>遍历table中下标为i的Entry单向链表</u>，找是否有相同的key已经在HashMap中，如果有，就替换value为最新的值；没有就直接插入。所以HashMap中只能存储唯一的key。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">       <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">           Object k;</span><br><span class="line">           <span class="comment">// 先判断hash值是否一样，如果一样，再判断key是否一样</span></span><br><span class="line">           <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">               V oldValue = e.value;</span><br><span class="line">               e.value = value;</span><br><span class="line">               e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li><li><p>如果是第一次put上面<code>for</code>循环不会执行，而是<code>addEntry</code>方法直接把key和value封装成Entry，然后加入到table中的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">modCount++;</span><br><span class="line">addEntry(hash, key, value, i);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>这涉及到HashMap的<strong>扩容机制</strong>。</p></li></ol></li><li><p><code>扩容机制</code></p><blockquote><p>当HashMap中存储的元素个数达到扩容的阀值 ，那如何进行扩容？</p></blockquote><blockquote><p>⚠️ 在jdk1.8版本以后，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。</p><img src="https://i.loli.net/2021/05/04/PoScN7yntJRhFvd.png" alt="在这里插入图片描述" style="zoom: 50%;" /></blockquote><p>我们再来看看addEntry方法中的扩容相关代码：</p><ul><li>扩容就是通过<code>resize()</code>方法创建一个长度为原来<strong>2</strong>倍的新table ；</li><li><code>resize()</code>方法内部通过遍历的方式，将老table的数据，重新计算hash并存储到新table的适当位置，最后使用新的table，并重新计HashMap的扩容阀值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;   <span class="comment">//传入新的容量</span></span><br><span class="line">     Entry[] oldTable = table;    <span class="comment">//引用扩容前的Entry数组</span></span><br><span class="line">      <span class="keyword">int</span> oldCapacity = oldTable.length;         </span><br><span class="line">      <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;  <span class="comment">//扩容前的数组大小如果已经达到最大(2^30)了</span></span><br><span class="line">          threshold = Integer.MAX_VALUE; <span class="comment">//修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了</span></span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//初始化一个新的Entry数组</span></span><br><span class="line">     Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">     <span class="comment">//！！将数据转移到新的Entry数组里</span></span><br><span class="line">     transfer(newTable);     </span><br><span class="line">     <span class="comment">//HashMap的table属性引用新的Entry数组</span></span><br><span class="line">     table = newTable;  </span><br><span class="line">     <span class="comment">//修改阈值</span></span><br><span class="line">     threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line"><span class="number">13</span> &#125;</span><br></pre></td></tr></table></figure><p>transfer()方法将原有Entry数组的元素拷贝到新的Entry数组里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//src引用了旧的Entry数组</span></span><br><span class="line">      Entry[] src = table;                   </span><br><span class="line">      <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123; <span class="comment">//遍历旧的Entry数组</span></span><br><span class="line">          Entry&lt;K,V&gt; e = src[j];             <span class="comment">//取得旧Entry数组的每个元素</span></span><br><span class="line">          <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">              src[j] = <span class="keyword">null</span>;<span class="comment">//释放旧Entry数组的对象引用（for循环后，旧的Entry数组不再引用任何对象）</span></span><br><span class="line">              <span class="keyword">do</span> &#123;</span><br><span class="line">                  Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                  <span class="comment">//！！重新计算每个元素在数组中的位置</span></span><br><span class="line">                  <span class="keyword">int</span> i = indexFor(e.hash, newCapacity); </span><br><span class="line">                 e.next = newTable[i]; <span class="comment">//标记[1]</span></span><br><span class="line">                 newTable[i] = e; <span class="comment">//将元素放在数组上</span></span><br><span class="line">                 e = next; <span class="comment">//访问下一个Entry链上元素</span></span><br><span class="line">            &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>newTable[i]的引用赋给了e.next，也就是使用了单链表的头插入方式 。下来的三个步骤是哈希桶数组 resize成4，然后所有的Node重新rehash的过程。</p><p><img src="https://i.loli.net/2021/05/15/nCYJf3KPqBdEU4G.png" alt="image-20210515115619336"></p></li><li><p><code>get方法实现</code></p><p>用key的hash值算出key对应的Entry所在链表在在table的下标，然后遍历下标即可。</p><img src="4843132-9b5f706433247a6c.webp" alt="img" style="zoom:80%;"/></li></ul><h5 id="5-1-为什么HashMap默认链表长度超过8转为红黑树，而不是6、7或9？">5.1 为什么HashMap默认链表长度超过8转为红黑树，而不是6、7或9？</h5><ul><li><p>在理想情况下，链表长度符合泊松分布，各个长度的命中概率依次递减，当长度为 8 的时候，概率仅为 0.00000006。源码中注释如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:    <span class="number">0.60653066</span></span><br><span class="line"><span class="number">1</span>:    <span class="number">0.30326533</span></span><br><span class="line"><span class="number">2</span>:    <span class="number">0.07581633</span></span><br><span class="line"><span class="number">3</span>:    <span class="number">0.01263606</span></span><br><span class="line"><span class="number">4</span>:    <span class="number">0.00157952</span></span><br><span class="line"><span class="number">5</span>:    <span class="number">0.00015795</span></span><br><span class="line"><span class="number">6</span>:    <span class="number">0.00001316</span></span><br><span class="line"><span class="number">7</span>:    <span class="number">0.00000094</span></span><br><span class="line"><span class="number">8</span>:    <span class="number">0.00000006</span></span><br><span class="line">more: less than <span class="number">1</span> in ten million</span><br></pre></td></tr></table></figure><p>这是一个小于千万分之一的概率，通常我们的 Map 里面是不会存储这么多的数据的，所以通常情况下，并不会发生从链表向红黑树的转换。</p></li><li><p>特别的，默认是链表长度达到 8 就转成红黑树，而当长度降到 6 就转换回去，这体现了时间和空间平衡的思想。<strong>长度较小时，使用链<u>表空间占用少</u>，时间也不会长（因为链表短</strong>）。</p></li></ul><h5 id="5-2-HashMap-多线程操作导致死循环问题？">5.2  HashMap 多线程操作导致死循环问题？</h5><p><strong>总结</strong>： HashMap之所以在并发下的扩容造成死循环，是因为，多个线程并发进行时，<strong>因为一个线程先期完成了扩容</strong>，将原的链表重新散列到自己的表中，并且链表变成了<strong>倒序</strong>，后一个线程再扩容时，又进行自己的散列，再次将<strong>倒序链表变为正序链表</strong>，于是形成了一个环形链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//src引用了旧的Entry数组</span></span><br><span class="line">      Entry[] src = table;                   </span><br><span class="line">      <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123; <span class="comment">//遍历旧的Entry数组</span></span><br><span class="line">          Entry&lt;K,V&gt; e = src[j];             <span class="comment">//取得旧Entry数组的每个元素</span></span><br><span class="line">          <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">              src[j] = <span class="keyword">null</span>;</span><br><span class="line">             <span class="keyword">do</span> &#123;</span><br><span class="line">                  Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                  <span class="comment">//！！重新计算每个元素在数组中的位置</span></span><br><span class="line">               <span class="keyword">int</span> i = indexFor(e.hash, newCapacity); </span><br><span class="line">               e.next = newTable[i]; <span class="comment">//标记[1]</span></span><br><span class="line">               newTable[i] = e;    <span class="comment">//将元素放在数组上</span></span><br><span class="line">                e = next;    <span class="comment">//访问下一个Entry链上的元素</span></span><br><span class="line">            &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol><li><p>map初始化为一个长度为2的数组，loadFactor=0.75，<code>threshold=2*0.75</code>=1，也就是说当put第二个key的时候，map就需要进行resize。</p></li><li><p>设置断点让线程1和线程2同时debug到transfer方法的首行。注意此时两个线程已经成功添加数据。放开thread1的断点至transfer方法的“Entry next = e.next;” 这一行；然后放开线程2的的断点，让线程2进行resize。结果如下图。</p><p><img src="https://i.loli.net/2021/05/15/9wiAnOHdBe7hjLs.png" alt="image-20210515120319361"></p></li><li><p>注意，Thread1的 e 指向了key(3)，而next指向了key(7)，其在线程二rehash后，<strong>指向了线程二重组后的新链表</strong>。</p></li><li><p>线程一被调度回来执行，先是执行 newTalbe[i] = e， 然后是e = next，导致了e指向了key(7)，而下一次循环的next = e.next导致了next指向了key(3)。</p><p><img src="https://i.loli.net/2021/05/15/NFfwAOguQmsyeWh.png" alt="image-20210515120436107"></p></li><li><p>e.next = newTable[i] 导致 key(3).next 指向了 key(7)。注意：此时的key(7).next 已经指向了key(3)， 环形链表就这样出现了。</p><p><img src="https://i.loli.net/2021/05/15/ApClYedO6JTWmnx.png" alt="image-20210515120503570"></p></li></ol><h5 id="5-3-说说HashMap的put方法？">5.3 说说HashMap的put方法？</h5><p>根据key值计算在数组中的位置：</p><ul><li>如果定位到的数组位置没有元素 就直接插入；</li><li>如果定位到的数组位置有元素，遍历以这个元素为头结点的链表，<u>依次和插入的 key 比较，如果 <strong>hash值&amp;equals对象相同</strong>就直接<strong>覆盖</strong>，<strong>不同</strong>就采用<strong>头插法</strong>插入元素</u>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//table[i]的位置已经存在元素，遍历链表</span></span><br><span class="line"><span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;    </span><br><span class="line">    Object k;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用 equals 方法判断key是否相等，若相等，该key对应的键值对已经存在，用新的value取代旧的value</span></span><br><span class="line">    <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;    </span><br><span class="line">        V oldValue = e.value;    </span><br><span class="line">        e.value = value;    </span><br><span class="line">        e.recordAccess(<span class="keyword">this</span>);    </span><br><span class="line">        <span class="keyword">return</span> oldValue;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h5 id="5-4-说说HashMap的get方法？"><strong>5.4 说说HashMap的get方法</strong>？</h5><p>根据key值计算在数组中的位置：</p><ul><li>遍历链表或者在红黑树，比较key来获取value</li></ul><h5 id="5-5-【百度】rehash扩容时机？在插入前还是插入后？">5.5 【百度】rehash扩容时机？在插入前还是插入后？</h5><p>rehash过程在put函数中，其大致扩容时机如下：</p><ol><li><p>计算hash，定位到桶；且遍历桶外挂链表，如果有相同key则覆盖；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)  <span class="comment">// 【百度】怎么处理key或value为NULL的情况？</span></span><br><span class="line">            <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);<span class="comment">//计算键的hash值</span></span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);<span class="comment">//通过hash值对应到桶位置</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;<span class="comment">//顺序遍历桶外挂的单链表</span></span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;/</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">        addEntry(hash, key, value, i);<span class="comment">//遍历单链表完毕，没有找到与键相对的Entry，需新建一个Entry</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>【如果没有找到相同key，说明要插入一个新entry】</strong> ，执行addEntry，<strong>插入前</strong>先验证下是否扩容；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">            resize(<span class="number">2</span> * table.length);<span class="comment">//将容量扩容为原来的2倍</span></span><br><span class="line">            hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">            bucketIndex = indexFor(hash, table.length);<span class="comment">//扩容后的，该hash值对应的新的桶位置</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        createEntry(hash, key, value, bucketIndex);<span class="comment">//在指定的桶位置上，创建一个新的Entry</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);<span class="comment">//链表的头插法插入新建的Entry</span></span><br><span class="line">        size++;<span class="comment">//更新size</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>因此总结扩容时机如下：</p><ul><li>在执行put时，如果遍历指定桶外挂链表<strong>没有找到相同key</strong>的节点时，说明需要<strong>新建一个entry</strong>，这个时候在<strong>插入前</strong>验证下是否要扩容。</li></ul><h5 id="5-6-hashmap在1-7版本之前为什么使用头插法？">5.6 hashmap在1.7版本之前为什么使用头插法？</h5><blockquote><p>1.7版本之前采用头插法，1.8之后采用尾插法。</p></blockquote><p><strong>头插法</strong>会改变链表中元素原本的顺序，以至于在并发场景下<strong>导致链表成环</strong>的问题；而<strong>尾插法</strong>，在扩容时<strong>会保持链表元素原本的顺序</strong>，就不会出现链表成环的问题 。</p><blockquote><p>既然有多线程并发问题，那为什么1.8之前还要使用头插法？</p></blockquote><ol><li><strong>局部性原理</strong>： 最近访问过的数据下次大概率会再次访问，把刚访问过的元素<strong>放在链表最前面</strong>可以直接被查询到，减少查找次数</li><li><strong>不是为了适应多线程而设计</strong>：　只有在并发情况下，头插法才会出现链表成环的问题，多线程情况下，HashMap 本就非线程安全，这就<strong>相当于你在它的规则之外</strong>出了问题。</li></ol><h5 id="5-7-为什么-HashMap-的负载因子设置成-0-75，而不是-1-也不是-0-5？">5.7 <strong>为什么 HashMap 的负载因子设置成 0.75，而不是 1 也不是 0.5？</strong></h5><p>在 HashMap 中，临界值（threshold） = 负载因子（loadFactor） * 容量（capacity）。</p><p><strong>那么如何能有效的避免哈希碰撞呢</strong>？</p><p>我们先反向思维一下，你认为什么情况会导致 HashMap 的哈希碰撞比较多？</p><p>无外乎两种情况：</p><ol><li><p>容量太小。容量小，碰撞的概率就高了。狼多肉少，就会发生争抢。</p></li><li><p>hash 算法不够好。算法不合理，就可能都分到同一个或几个桶中。分配不均，也会发生争抢。</p></li></ol><p><strong>为了避免哈希碰撞，HashMap 需要在合适的时候进行扩容</strong>。那就是当其中的元素个数达到临界值的时候（<strong>等全满了再扩容，那么在此之前容量太少，导致碰撞的概率过高</strong>），而这个临界值前面说过和 loadFactor 有关，换句话说，<strong>设置一个合理的 loadFactor</strong>，可以有效的避免哈希冲突。</p><blockquote><p>JVM中原话：</p><p><strong>一般来说，默认的负载因子 (0.75) 在时间和空间成本之间提供了很好的权衡。更高的值减少了空间开销，但增加了查找成本(反映在 HashMap 类的大多数操作中，包括 get 和 put)</strong>。</p><p>另一方面，<strong>为了保证负载因子（loadFactor） * 容量（capacity）的结果是一个整数，这个值是 0.75(3/4) 比较合理，因为这个数和任何 2 的幂乘积结果都是整数</strong>。</p></blockquote><h5 id="5-8-Hashmap-怎么处理key和value为null的情况？">5.8 Hashmap 怎么处理key和value为null的情况？</h5><h4 id="6-Hashtable-源码分析">6. Hashtable 源码分析</h4><blockquote><p>参考：<a href="https://juejin.cn/post/6844903509725282317">Java集合之Hashtable源码解析</a></p></blockquote><ul><li><p><strong>构造函数</strong></p><p>和HashMap还是挺相似的，但是默认初始容量是11（HashMap是16）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;?,?&gt;[] table;<span class="comment">//数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> count;<span class="comment">//键值对的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threshold;<span class="comment">//阀值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> loadFactor;<span class="comment">//加载因子</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;<span class="comment">//修改次数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;<span class="comment">//下面的三个构造函数都是调用这个函数，来进行相关的初始化</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Load: &quot;</span>+loadFactor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)</span><br><span class="line">            initialCapacity = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        table = <span class="keyword">new</span> Entry[initialCapacity];<span class="comment">//这里是与HashMap的区别之一，HashMap中table</span></span><br><span class="line">        threshold = (<span class="keyword">int</span>)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">        initHashSeedAsNeeded(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;<span class="comment">//指定初始数组长度</span></span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, <span class="number">0.75f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">()</span> </span>&#123;<span class="comment">//从这里可以看出容量的默认值为16，加载因子为0.75f.</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Math.max(<span class="number">2</span>*t.size(), <span class="number">11</span>), <span class="number">0.75f</span>);</span><br><span class="line">        putAll(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>put方法</strong></p><p>和HashMap整体过程依旧很像，但有4点注意：</p><ol><li><p>put方法是加锁synchronized，所以线程安全</p></li><li><p>Hashtable计算hash值的hash(key)，不允许为null，所以会抛出异常</p></li><li><p>获取数组散列的下标 <code>(hash &amp; 0x7FFFFFFF) % tab.length</code> 和HashMap <code>hash &amp; length-1</code> 不同</p><blockquote><ul><li><code>(hash &amp; 0x7FFFFFFF) % tab.length</code>  是（1）<code>hash &amp; 0x7FFFFFFF</code>  保证hash是正数 （2）然后取余</li><li>相比之下，HashMap是位运算进行了优化，更高效</li></ul></blockquote></li><li><p>Hashtable没有链表转红黑树的机制</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;<span class="comment">//这里方法修饰符为synchronized,所以是线程安全的。</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();<span class="comment">//value如果为Null,抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        Entry tab[] = table;</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);<span class="comment">//hash里面的代码是hashSeed^key.hashcode（）,null.hashCode（）会抛出异常，所以这就解释了Hashtable的key和value不能为null的原因。</span></span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;<span class="comment">//获取数组元素下标,先对hash值取正，然后取余。</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">                V old = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                <span class="keyword">return</span> old;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        modCount++;<span class="comment">//修改次数。</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= threshold) &#123;<span class="comment">//键值对的总数大于其阀值</span></span><br><span class="line">            rehash();<span class="comment">//在rehash里进行扩容处理</span></span><br><span class="line"></span><br><span class="line">            tab = table;</span><br><span class="line">            hash = hash(key);</span><br><span class="line">            index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        &#125;</span><br><span class="line">        Entry&lt;K,V&gt; e = tab[index];</span><br><span class="line">        tab[index] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>rehash方法（扩容</strong>）</p><p>和HashMap依旧很像，但是扩容每次是 <code>old*2+1</code> 。</p></li><li><p><strong>get方法</strong></p><p>也是相比Hashmap直接加了 synchronized 进行修饰，保证线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;<span class="comment">//没有什么特殊性，就是加了一个synchronized，就是根据index来遍历索引处的单链表。</span></span><br><span class="line">       Entry tab[] = table;</span><br><span class="line">       <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">       <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">       <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">           <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">               <span class="keyword">return</span> e.value;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="6-1-（容易忘）HashMap-和-Hashtable-的区别-？">6.1 （容易忘）HashMap <strong>和</strong> Hashtable <strong>的区别</strong> ？</h5><ol><li><p><strong>关于null</strong>，HashMap允许key和value都可以为null，而Hashtable则不接受key为null或value为null的键值对。</p></li><li><p><strong>关于线程安全</strong>，HashMap是线程不安全的，Hashtable是线程安全的，因为Hashtable的许多操作函数都用synchronized修饰。</p></li><li><p><strong>Hashtable与HashMap实现的接口不一致</strong>，但Hashtable继承Dictionary，而HashMap继承自AbstractMap，即父类不同</p></li><li><p><strong>默认初始容量不同</strong>，扩容大小不同。HashMap的hash数组的默认大小是16，而且一定是2 的指数<code>old*2</code>；Hashtable中hash数组默认大小是11，增加的方式是<code>old*2+1</code>。</p></li></ol><h5 id="6-2-ConcurrentHashMap-和-Hashtable-的区别-？">6.2 ConcurrentHashMap <strong>和</strong> Hashtable <strong>的区别</strong> ？</h5><p>ConcurrentHashMap 和 Hashtable 的区别主要体现在实现线程安全的方式上不同。</p><ul><li><strong>底层数据结构</strong>： JDK1.7的 ConcurrentHashMap 底层采用<strong>分段的数组+链表</strong> 实现，JDK1.8 采用的数据结构跟HashMap1.8的结构⼀样，数组+链表/红黑⼆叉树。Hashtable 和 JDK1.8 之前的HashMap 的底层数据结构类似都是采用<strong>数组+链表/红黑树</strong> 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；</li><li><strong>实现线程安全的方式（重要</strong>）： ①<strong>在JDK1.7</strong>的时候ConcurrentHashMap（分段锁） 对整个桶数组进行了分割分段(Segment)，每⼀把锁只锁容器其中⼀部分数据，多线程访问容器⾥不同数据段的数据，就不会存在锁竞争，提高并发访问率。<strong>到JDK1.8 的时候已经摒弃了Segment的概念，而是直接用 Node 数组+链表+红黑树的数据结构来实现，并发控制使用 synchronized 和CAS 来操作</strong>。（JDK1.6以后 对 synchronized锁做了很多优化） <u>整个看起来就像是优化过且线程安全的 HashMap</u>，虽然在JDK1.8中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；② <strong>Hashtable(同⼀把锁，全表锁)</strong> :使用 synchronized 来保证线程安全，效率非常低下。当⼀个线程访问同步方法时，其他线程也访问同步方法，可能会进⼊阻塞或轮询状态，如使用 put 添加元素，另⼀个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。</li></ul><h4 id="7-ConcurrentHashMap线程安全的具体实现方式-底层具体实现-？">7.  ConcurrentHashMap<strong>线程安全的具体实现方式</strong>/<strong>底层具体实现</strong> ？</h4><blockquote><p>参考：<a href="https://www.cnblogs.com/huangjuncong/p/9478505.html">https://www.cnblogs.com/huangjuncong/p/9478505.html</a></p><p><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/collection/ConcurrentHashMap%E6%BA%90%E7%A0%81%2B%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90.md">javaGuide</a></p></blockquote><p>Java7 中 ConcurrentHashMap 使用的分段锁，也就是每一个 Segment 上同时只有一个线程可以操作，每一个 Segment 都是一个类似 HashMap 数组的结构，它可以扩容，它的冲突会转化为链表。但是 Segment 的个数一但初始化就不能改变。</p><p>Java8 中的 ConcurrentHashMap 使用的 Synchronized 锁加 CAS 的机制。结构也由 Java7 中的 <strong>Segment 数组 + HashEntry 数组 + 链表</strong> 进化成了 <strong>Node 数组 + 链表 / 红黑树</strong>，Node 是类似于一个 HashEntry 的结构。它的冲突再达到一定大小时会转化成红黑树，在冲突小于一定数量时又退回链表。</p><ul><li><p><strong>JDK 1.7 实现</strong></p><p>Java 7 中 ConcurrentHashMap 的存储结构如下图。</p><img src="https://i.loli.net/2021/05/15/iT9npPGIdazS4vw.png" alt="img" style="zoom:150%;" /><ul><li><p><strong>存储结构</strong></p><p>ConcurrentHashMap 为了提高本身的并发能力，在内部采用了一个叫做 Segment 的结构，<strong>一个 Segment 其实就是一个类 HashTable 的结构</strong>，Segment 内部维护了一个链表数组。</p><blockquote><p><strong>两次Hash</strong>。ConcurrentHashMap 定位一个元素的过程需要进行两次Hash操作，第一次 Hash 定位到 Segment，第二次 Hash 定位到元素所在的链表的头部。</p><p>因此，这一种结构的带来的副作用是 Hash 的过程要比普通的 HashMap 要长，但是带来的好处是写操作的时候可以只对元素所在的 Segment 进行操作即可，不会影响到其他的 Segment。</p></blockquote><p><strong>1. ConcurrentHashMap的成员变量和构造函数</strong></p><blockquote><p><strong>ConcurrentHashMap扩容</strong>： 元素数量增加导致ConrruentHashMap需要扩容，ConcurrentHashMap不会增加Segment的数量，而<strong>只会增加Segment中链表数组的容量大小</strong>。 需要对整个ConcurrentHashMap做rehash，而只需要对Segment里面的元素做一次rehash就可以了。</p></blockquote><p>核心初始化函数逻辑如下：</p><blockquote><p>2的指数是为了可以使用移位操作加快hash计算过程。</p></blockquote><ol><li><p>计算出Segment的数量<code>ssize</code>，是不大于concurrencyLevel的最大的2的指数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ssize = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class="line">          ++sshift; </span><br><span class="line">           ssize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据intialCapacity确定Segment的容量的大小，每一个Segment的容量大小也是2的指数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> c = initialCapacity / ssize;</span><br><span class="line"><span class="keyword">if</span> (c * ssize &lt; initialCapacity)</span><br><span class="line">      ++c;</span><br><span class="line">      <span class="keyword">int</span> cap = MIN_SEGMENT_TABLE_CAPACITY;</span><br><span class="line">      <span class="keyword">while</span> (cap &lt; c)</span><br><span class="line">            cap &lt;&lt;= <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ol><p>下面是完整代码：</p><blockquote><ul><li>segmentShift 偏移量，这个值为【容量 = 2 的N次方】中的 N，在后面 Put 时计算位置时会用到 <strong>。默认是 32 - sshift = 28</strong></li><li>segmentMask，默认是 ssize - 1 = 16 -1 = 15</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认初始容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"><span class="comment">// 默认加载因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"><span class="comment">// 默认segment层级</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br><span class="line"><span class="comment">// 最大容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">// segment最小容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_SEGMENT_TABLE_CAPACITY = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 一个segment最大容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SEGMENTS = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line"><span class="comment">// 锁之前重试次数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RETRIES_BEFORE_LOCK = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数：无参</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造函数：指定初始容量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造函数：指定初始容量，负载因子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, loadFactor, DEFAULT_CONCURRENCY_LEVEL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造函数：指定初始容量，负载因子，并发级别</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">float</span> loadFactor, <span class="keyword">int</span> concurrencyLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">if</span> (concurrencyLevel &gt; MAX_SEGMENTS)</span><br><span class="line">            concurrencyLevel = MAX_SEGMENTS;</span><br><span class="line">        <span class="comment">// 找到两种大小的最匹配参数</span></span><br><span class="line">        <span class="keyword">int</span> sshift = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// segment数组的长度是由concurrentLevel计算来的，segment数组的长度是2的N次方，</span></span><br><span class="line">        <span class="comment">// 默认concurrencyLevel = 16, 所以ssize在默认情况下也是16,此时 sshift = 4</span></span><br><span class="line">        <span class="comment">// sshift相当于ssize从1向左移的次数</span></span><br><span class="line">        <span class="keyword">int</span> ssize = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class="line">            ++sshift; </span><br><span class="line">            ssize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 段偏移量，默认值情况下此时segmentShift = 28</span></span><br><span class="line">        <span class="keyword">this</span>.segmentShift = <span class="number">32</span> - sshift;</span><br><span class="line">        <span class="comment">// 散列算法的掩码，默认值情况下segmentMask = 15</span></span><br><span class="line">        <span class="keyword">this</span>.segmentMask = ssize - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> c = initialCapacity / ssize;</span><br><span class="line">        <span class="keyword">if</span> (c * ssize &lt; initialCapacity)</span><br><span class="line">            ++c;</span><br><span class="line">        <span class="keyword">int</span> cap = MIN_SEGMENT_TABLE_CAPACITY;</span><br><span class="line">        <span class="keyword">while</span> (cap &lt; c)</span><br><span class="line">            cap &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// create segments and segments[0]</span></span><br><span class="line">        Segment&lt;K,V&gt; s0 =</span><br><span class="line">            <span class="keyword">new</span> Segment&lt;K,V&gt;(loadFactor, (<span class="keyword">int</span>)(cap * loadFactor),</span><br><span class="line">                             (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap]);</span><br><span class="line">        <span class="comment">// 创建ssize长度的Segment数组</span></span><br><span class="line">        Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])<span class="keyword">new</span> Segment[ssize];</span><br><span class="line">        UNSAFE.putOrderedObject(ss, SBASE, s0); <span class="comment">// ordered write of segments[0]</span></span><br><span class="line">        <span class="keyword">this</span>.segments = ss;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>2.来查看具体代码定义，Segment的成员变量</strong>：</p><blockquote><p>Segment 继承于 ReentrantLock，不会像 HashTable 那样不管是 put 还是 get 操作都需要做同步处理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count;    <span class="comment">//Segment中元素的数量</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;      <span class="comment">//对table的大小造成影响的操作的数量(比如put或者remove操作)</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> threshold;    <span class="comment">//阈值,Segment里面元素的数量超过这个值那么就会对Segment进行扩容</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;   <span class="comment">//负载因子,用于确定threshold</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;    <span class="comment">//链表数组,数组中的每一个元素代表了一个链表的头部</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 继续查看HashEntry组成</strong>：</p><blockquote><p>和 HashMap 非常类似，唯一的区别就是其中的核心数据如 <strong>value ，以及链表都是 volatile 修饰的</strong>，保证了获取时的可见性。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    　<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConcurrentHashMap列表Entry。注意，这不会作为用户可见的Map.Entry导出。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HashEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">volatile</span> V value;</span><br><span class="line">    <span class="keyword">volatile</span> HashEntry&lt;K,V&gt; next;</span><br><span class="line">    </span><br><span class="line">    HashEntry(<span class="keyword">int</span> hash, K key, V value, HashEntry&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置具有volatile写语义的next字段。</span></span><br><span class="line">  <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(HashEntry&lt;K,V&gt; n)</span> </span>&#123;</span><br><span class="line">      UNSAFE.putOrderedObject(<span class="keyword">this</span>, nextOffset, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下面不太重要，略。</span></span><br></pre></td></tr></table></figure></li><li><p><strong>put() 方法实现</strong></p><blockquote><p>相比Hashtable，1.7版本concurrentHashmap的更加细粒度，只有定位到段，才会锁住。也就是段锁！</p><p>而Hashtable直接锁住整个方法。</p></blockquote><ol><li><p>计算key的hash值 ;</p></li><li><p>根据<strong>hash值，segmentShift，segmentMask定位到哪个Segment</strong>；</p></li><li><p>如果指定位置的 Segment 为空，则初始化这个 Segment；</p></li><li><p>在对应的 Segment 中进行具体的 put。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    Segment&lt;K,V&gt; s;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="comment">// hash 值无符号右移 28位（初始化时获得），然后与 segmentMask=15 做与运算</span></span><br><span class="line">    <span class="comment">// 其实也就是把高4位与segmentMask（1111）做与运算</span></span><br><span class="line">    <span class="keyword">int</span> j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span><br><span class="line">    <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          <span class="comment">// nonvolatile; recheck</span></span><br><span class="line">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == <span class="keyword">null</span>) <span class="comment">//  in ensureSegment</span></span><br><span class="line">        <span class="comment">// 如果查找到的 Segment 为空，初始化</span></span><br><span class="line">        s = ensureSegment(j);</span><br><span class="line">    <span class="keyword">return</span> s.put(key, hash, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Segment 中进行具体的 put的源码如下：</p><blockquote><p>判断元素个数是否超过了阈值或者segment中数组的长度超过了MAXIMUM_CAPACITY，如果满足条件则rehash扩容！</p></blockquote><p>由于 Segment 继承了 ReentrantLock，所以 Segment 内部可以很方便的获取锁，put 流程就用到了这个功能。</p><ol><li><p>tryLock() 获取锁，获取不到使用<code>scanAndLockForPut</code>方法继续获取；</p><blockquote><p>这里面的第一步中的 scanAndLockForPut 操作这里没有介绍，这个方法做的操作就是不断的自旋 <code>tryLock()</code> 获取锁。当自旋次数大于指定次数时，使用 <code>lock()</code> 阻塞获取锁。</p></blockquote></li><li><p>计算 put 的数据要放入的 index 位置，然后获取这个位置上的 HashEntry ；</p></li><li><p>遍历 put 新元素，为什么要遍历？因为这里获取的 HashEntry 可能是一个空元素，也可能是链表已存在，所以要区别对待；</p><p>如果这个位置上的 <strong>HashEntry 不存在</strong>：</p><ol><li>如果当前容量大于扩容阀值，小于最大容量，<strong>进行扩容</strong>。</li><li>直接<strong>头插法</strong>插入。</li></ol><p>如果这个位置上的 <strong>HashEntry 存在</strong>：</p><ol><li>判断链表当前元素 Key 和 hash 值是否和要 put 的 key 和 hash 值一致，<strong>一致则替换值</strong></li><li>不一致，<u>获取链表下一个节点</u>，直到发现相同进行值替换，或者链表表里完毕没有相同的。<ol><li>如果当前容量大于扩容阀值，小于最大容量，<strong>进行扩容</strong>。</li><li>直接链表<strong>头插法</strong>插入。</li></ol></li></ol></li><li><p>如果要插入的位置之前已经存在，替换后返回旧值，否则返回 null。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, <span class="keyword">int</span> hash, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取 ReentrantLock 独占锁，获取不到，scanAndLockForPut 获取。</span></span><br><span class="line">    HashEntry&lt;K,V&gt; node = tryLock() ? <span class="keyword">null</span> : scanAndLockForPut(key, hash, value);</span><br><span class="line">    V oldValue;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class="line">        <span class="comment">// 计算要put的数据位置</span></span><br><span class="line">        <span class="keyword">int</span> index = (tab.length - <span class="number">1</span>) &amp; hash;</span><br><span class="line">        <span class="comment">// CAS 获取 index 坐标的值</span></span><br><span class="line">        HashEntry&lt;K,V&gt; first = entryAt(tab, index);</span><br><span class="line">        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = first;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 检查是否 key 已经存在，如果存在，则遍历链表寻找位置，找到后替换 value</span></span><br><span class="line">                K k;</span><br><span class="line">                <span class="keyword">if</span> ((k = e.key) == key ||</span><br><span class="line">                    (e.hash == hash &amp;&amp; key.equals(k))) &#123;</span><br><span class="line">                    oldValue = e.value;</span><br><span class="line">                    <span class="keyword">if</span> (!onlyIfAbsent) &#123;</span><br><span class="line">                        e.value = value;</span><br><span class="line">                        ++modCount;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                e = e.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// first 有值没说明 index 位置已经有值了，有冲突，链表头插法。</span></span><br><span class="line">                <span class="keyword">if</span> (node != <span class="keyword">null</span>)</span><br><span class="line">                    node.setNext(first);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, first);</span><br><span class="line">                <span class="keyword">int</span> c = count + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 容量大于扩容阀值，小于最大容量，进行扩容</span></span><br><span class="line">                <span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</span><br><span class="line">                    rehash(node);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">// index 位置赋值 node，node 可能是一个元素，也可能是一个链表的表头</span></span><br><span class="line">                    setEntryAt(tab, index, node);</span><br><span class="line">                ++modCount;</span><br><span class="line">                count = c;</span><br><span class="line">                oldValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>扩容 rehash</strong></p><blockquote><p>rehash在put()内部被触发。</p></blockquote><p>ConcurrentHashMap 的扩容只会扩容到原来的两倍。老数组里的数据移动到新的数组时，<strong>位置要么不变，要么变为 index+ oldSize</strong>，参数里的 node 会在扩容之后使用链表<strong>头插法</strong>插入到指定位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> idx = e.hash &amp; sizeMask;  <span class="comment">// 新位置计算</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">(HashEntry&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">    HashEntry&lt;K,V&gt;[] oldTable = table;</span><br><span class="line">    <span class="comment">// 老容量</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    <span class="comment">// 新容量，扩大两倍</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 新的扩容阀值 </span></span><br><span class="line">    threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">    <span class="comment">// 创建新的数组</span></span><br><span class="line">    HashEntry&lt;K,V&gt;[] newTable = (HashEntry&lt;K,V&gt;[]) <span class="keyword">new</span> HashEntry[newCapacity];</span><br><span class="line">    <span class="comment">// 新的掩码，默认2扩容后是4，-1是3，二进制就是11。</span></span><br><span class="line">    <span class="keyword">int</span> sizeMask = newCapacity - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oldCapacity ; i++) &#123;</span><br><span class="line">        <span class="comment">// 遍历老数组</span></span><br><span class="line">        HashEntry&lt;K,V&gt; e = oldTable[i];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            HashEntry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="comment">// 计算新的位置，新的位置只可能是不变或者是：老的位置+老的容量。</span></span><br><span class="line">            <span class="keyword">int</span> idx = e.hash &amp; sizeMask;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>)   <span class="comment">//  Single node on list</span></span><br><span class="line">                <span class="comment">// 如果当前位置还不是链表，只是一个元素，直接赋值</span></span><br><span class="line">                newTable[idx] = e;</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// Reuse consecutive sequence at same slot</span></span><br><span class="line">                <span class="comment">// 如果是链表了</span></span><br><span class="line">                HashEntry&lt;K,V&gt; lastRun = e;</span><br><span class="line">                <span class="keyword">int</span> lastIdx = idx;</span><br><span class="line">                <span class="comment">// 新的位置只可能是不变或者是：老的位置+老的容量。</span></span><br><span class="line">                <span class="comment">// 遍历结束后，lastRun 后面的元素位置都是相同的</span></span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; last = next; last != <span class="keyword">null</span>; last = last.next) &#123;</span><br><span class="line">                    <span class="keyword">int</span> k = last.hash &amp; sizeMask;</span><br><span class="line">                    <span class="keyword">if</span> (k != lastIdx) &#123;</span><br><span class="line">                        lastIdx = k;</span><br><span class="line">                        lastRun = last;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// ，lastRun 后面的元素位置都是相同的，直接作为链表赋值到新位置。</span></span><br><span class="line">                newTable[lastIdx] = lastRun;</span><br><span class="line">                <span class="comment">// Clone remaining nodes</span></span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; p = e; p != lastRun; p = p.next) &#123;</span><br><span class="line">                    <span class="comment">// 遍历剩余元素，头插法到指定 k 位置。</span></span><br><span class="line">                    V v = p.value;</span><br><span class="line">                    <span class="keyword">int</span> h = p.hash;</span><br><span class="line">                    <span class="keyword">int</span> k = h &amp; sizeMask;</span><br><span class="line">                    HashEntry&lt;K,V&gt; n = newTable[k];</span><br><span class="line">                    newTable[k] = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(h, p.key, v, n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 头插法插入新的节点</span></span><br><span class="line">    <span class="keyword">int</span> nodeIndex = node.hash &amp; sizeMask; <span class="comment">// add the new node</span></span><br><span class="line">    node.setNext(newTable[nodeIndex]);</span><br><span class="line">    newTable[nodeIndex] = node;</span><br><span class="line">    table = newTable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>get方法</strong></p><blockquote><p>注意，Hashtable 会使用Synchronized进行修饰，所以不支持并发。但是ConcurrentHashmap <strong>没有使用同步机制</strong>：</p><ul><li>1.7版本 <strong>。使用unsafe方法（）等方式直接操作来保证并发处理的安全性</strong>，使用的是硬件的安全机制。</li><li>1.8版本。没有使用同步，也没有使用unsafe方式。所以<strong>是并发</strong>的。</li></ul></blockquote><ul><li><p>到这里就很简单了，get 方法只需要两步即可。</p><ol><li>计算得到segment的位置 u</li><li><strong>CAS方式获取segment数组对象 segment[u]</strong></li><li>计算HashEntry数组的下标 i</li><li><strong>CAS方式获取HashEntry[i]，即数组首节点</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Segment&lt;K,V&gt; s; <span class="comment">// manually integrate access methods to reduce overhead</span></span><br><span class="line">    HashEntry&lt;K,V&gt;[] tab;</span><br><span class="line">    <span class="keyword">int</span> h = hash(key);</span><br><span class="line">    <span class="keyword">long</span> u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;</span><br><span class="line">    <span class="comment">// 计算得到 key 的存放位置</span></span><br><span class="line">    <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">        (tab = s.table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</span><br><span class="line">                 (tab, ((<span class="keyword">long</span>)(((tab.length - <span class="number">1</span>) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</span><br><span class="line">             e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            <span class="comment">// 如果是链表，遍历查找到相同 key 的 value。</span></span><br><span class="line">            K k;</span><br><span class="line">            <span class="keyword">if</span> ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</span><br><span class="line">                <span class="keyword">return</span> e.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>JDK 1.8 实现</strong></p><blockquote><p>1.8版本分析，建议参考：<a href="https://www.cnblogs.com/zerotomax/p/8687425.html">https://www.cnblogs.com/zerotomax/p/8687425.html</a> 。</p></blockquote><p><img src="https://i.loli.net/2021/05/15/F6UhuXNQGKnldVk.png" alt="image-20210515224441806"></p><p>可以发现 Java8 的 ConcurrentHashMap 相对于 Java7 来说变化比较大，不再是之前的 <strong>Segment 数组 + HashEntry 数组 + 链表</strong>，而是 <strong>Node 数组 + 链表 / 红黑树</strong>。当冲突链表达到一定长度时，链表会转换成红黑树。</p><blockquote><p>和JDK1.8的HashMap是很相似 , 抛弃了原有的 Segment 分段锁，而采用了 <code>CAS + synchronized</code> 来保证并发安全性。</p></blockquote><ul><li><p><strong>存储结构和属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">16</span>; <span class="comment">// hashmap也是16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>; <span class="comment">// 超过8扩容</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>; <span class="comment">// 超过64红黑树</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>; <span class="comment">// 表示正在转移</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEBIN   = -<span class="number">2</span>; <span class="comment">// 表示已经转换成树</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESERVED  = -<span class="number">3</span>; <span class="comment">// hash for transient reservations</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_BITS = <span class="number">0x7fffffff</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Node数组存储元素</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;<span class="comment">//默认没初始化的数组，用来保存元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;<span class="comment">//转移的时候用的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来控制表初始化和扩容的，默认值为0，当在初始化的时候指定了大小，这会将这个大小保存在sizeCtl中，大小为数组的0.75</span></span><br><span class="line"><span class="comment">     * 当为负的时候，说明表正在初始化或扩张，</span></span><br><span class="line"><span class="comment">     *     -1表示初始化</span></span><br><span class="line"><span class="comment">     *     -(1+n) n:表示活动的扩张线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在ConcurrentHashMap中使用了unSafe方法，通过直接操作内存的方式来保证并发处理的安全性，使用的是硬件的安全机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 用来返回节点数组的指定位置的节点的原子操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function">Node&lt;K,V&gt; <span class="title">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * cas原子操作，在指定位置设定值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 原子操作，在指定位置设定值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">void</span> <span class="title">setTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class="line">        U.putObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, v);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//空的构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMapDebug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//如果在实例化对象的时候指定了容量，则初始化sizeCtl</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMapDebug</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//当出入一个Map的时候，先设定sizeCtl为默认容量，在添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMapDebug</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sizeCtl = DEFAULT_CAPACITY;</span><br><span class="line">        putAll(m);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>put方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>再来看putVal ：</p><blockquote><p>可以发现相比HashTable直接对方法进行加锁synchronized / 1.7版本的ConcurrentHashMap 进入的开头尝试获取锁，1.8版本的ConcurrentHashMap 锁更加细粒度化。</p><ul><li>只有：（1）table不为初始化 （2）定位到table位置<code>i</code>不存在元素（此时会用CAS方式进行添加）（3）数组也没有在进行扩张（MOVED=-1）</li></ul><p>此时才会进行synchronized 添加元素（不会锁住rehash方法，最后才判断是否扩容）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 当添加一对键值对的时候，首先会去判断保存这些键值对的数组是不是初始化了，</span></span><br><span class="line"><span class="comment">     * 如果没有的话就初始化数组</span></span><br><span class="line"><span class="comment">     *  然后通过计算hash值来确定放在数组的哪个位置</span></span><br><span class="line"><span class="comment">     * 如果这个位置为空则直接添加，如果不为空的话，则取出这个节点来</span></span><br><span class="line"><span class="comment">     * 如果取出来的节点的hash值是MOVED(-1)的话，则表示当前正在对这个数组进行扩容，复制到新的数组，则当前线程也去帮助复制</span></span><br><span class="line"><span class="comment">     * 最后一种情况就是，如果这个节点，不为空，也不在扩容，则通过synchronized来加锁，进行添加操作</span></span><br><span class="line"><span class="comment">     *    然后判断当前取出的节点位置存放的是链表还是树</span></span><br><span class="line"><span class="comment">     *    如果是链表的话，则遍历整个链表，直到取出来的节点的key来个要放的key进行比较，如果key相等，并且key的hash值也相等的话，</span></span><br><span class="line"><span class="comment">     *          则说明是同一个key，则覆盖掉value，否则的话则添加到链表的末尾</span></span><br><span class="line"><span class="comment">     *    如果是树的话，则调用putTreeVal方法把这个元素添加到树中去</span></span><br><span class="line"><span class="comment">     *  最后在添加完成之后，会判断在该节点处共有多少个节点（注意是添加前的个数），如果达到8个以上了的话，</span></span><br><span class="line"><span class="comment">     *  则调用treeifyBin方法来尝试将处的链表转为树，或者扩容数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();<span class="comment">//K,V都不能为空，否则的话跑出异常</span></span><br><span class="line">        <span class="keyword">int</span> hash = spread(key.hashCode());    <span class="comment">//取得key的hash值</span></span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;    <span class="comment">//用来计算在这个节点总共有多少个元素，用来控制扩容或者转移为树</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;    <span class="comment">//</span></span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)    </span><br><span class="line">                tab = initTable();    <span class="comment">//第一次put的时候table没有初始化，则初始化table</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;    <span class="comment">//通过哈希计算出一个表中的位置因为n是数组的长度，所以(n-1)&amp;hash肯定不会出现数组越界</span></span><br><span class="line">                <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,        <span class="comment">//如果这个位置没有元素的话，则通过cas的方式尝试添加，注意这个时候是没有加锁的</span></span><br><span class="line">                             <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))        <span class="comment">//创建一个Node添加到数组中区，null表示的是下一个节点为空</span></span><br><span class="line">                    <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 如果检测到某个节点的hash值是MOVED，则表示正在进行数组扩张的数据复制阶段，</span></span><br><span class="line"><span class="comment">             * 则当前线程也会参与去复制，通过允许多线程复制的功能，一次来减少数组的复制所带来的性能损失</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)    </span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * 如果在这个位置有元素的话，就采用synchronized的方式加锁，</span></span><br><span class="line"><span class="comment">                 *     如果是链表的话(hash大于0)，就对这个链表的所有元素进行遍历，</span></span><br><span class="line"><span class="comment">                 *         如果找到了key和key的hash值都一样的节点，则把它的值替换到</span></span><br><span class="line"><span class="comment">                 *         如果没找到的话，则添加在链表的最后面</span></span><br><span class="line"><span class="comment">                 *  否则，是树的话，则调用putTreeVal方法添加到树中去</span></span><br><span class="line"><span class="comment">                 *  </span></span><br><span class="line"><span class="comment">                 *  在添加完之后，会对该节点上关联的的数目进行判断，</span></span><br><span class="line"><span class="comment">                 *  如果在8个以上的话，则会调用treeifyBin方法，来尝试转化为树，或者是扩容</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                V oldVal = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;        <span class="comment">//再次取出要存储的位置的元素，跟前面取出来的比较</span></span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;                <span class="comment">//取出来的元素的hash值大于0，当转换为树之后，hash值为-2</span></span><br><span class="line">                            binCount = <span class="number">1</span>;            </span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;    <span class="comment">//遍历这个链表</span></span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == hash &amp;&amp;        <span class="comment">//要存的元素的hash，key跟要存储的位置的节点的相同的时候，替换掉该节点的value即可</span></span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    oldVal = e.val;</span><br><span class="line">                                    <span class="keyword">if</span> (!onlyIfAbsent)        <span class="comment">//当使用putIfAbsent的时候，只有在这个key没有设置值得时候才设置</span></span><br><span class="line">                                        e.val = value;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                Node&lt;K,V&gt; pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;    <span class="comment">//如果不是同样的hash，同样的key的时候，则判断该节点的下一个节点是否为空，</span></span><br><span class="line">                                    pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,        <span class="comment">//为空的话把这个要加入的节点设置为当前节点的下一个节点</span></span><br><span class="line">                                                              value, <span class="keyword">null</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;    <span class="comment">//表示已经转化成红黑树类型了</span></span><br><span class="line">                            Node&lt;K,V&gt; p;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,    <span class="comment">//调用putTreeVal方法，将该元素添加到树中去</span></span><br><span class="line">                                                           value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                oldVal = p.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    p.val = value;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)    <span class="comment">//当在同一个节点的数目达到8个的时候，则扩张数组或将给节点的数据转为tree</span></span><br><span class="line">                        treeifyBin(tab, i);    </span><br><span class="line">                    <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> oldVal;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addCount(<span class="number">1L</span>, binCount);    <span class="comment">//计数，可能也会触发扩容</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>扩容<code>transfer</code></p><blockquote><p>扩容主要是通过transfer方法来进行的。</p><ul><li>只有在往map中添加元素的时候，在某一个节点的数目已经超过了8个，调用<strong>treeifyBin()</strong> 触发数组的扩容/转换为数；</li><li>使用**addCount()**添加元素数组元素，会进行判断达到了sizeCtl的数量的时候，则会调用transfer方法来进行扩容</li></ul></blockquote><ul><li><p><strong>treeifyBin()</strong></p><p>某一个节点的数目已经超过了8个，执行treeifyBin() 。</p><ol><li><p>当需要扩容的时候，调用的时候tryPresize方法</p><p>（1）<strong>tryPresize方法并没有加锁</strong>，允许多个线程进入，如果数组正在扩张，则当前线程也去帮助扩容使用<strong>transfer</strong>方法</p><p>（2）<u>transfer比较复杂还没有详细看，它里面使用的synchronized 进行单个节点处理扩容</u>  （查看上面看transfer源码）</p></li><li><p>否则synchronized进行链表转换为树</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 当数组长度小于64的时候，扩张数组长度一倍，否则的话把链表转为树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; b; <span class="keyword">int</span> n, sc;</span><br><span class="line">        <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;treeifyBin方\t==&gt;数组长：&quot;</span>+tab.length);</span><br><span class="line">            <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)    <span class="comment">//MIN_TREEIFY_CAPACITY 64</span></span><br><span class="line">                tryPresize(n &lt;&lt; <span class="number">1</span>);        <span class="comment">// 数组扩容</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="keyword">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (b) &#123;    <span class="comment">//使用synchronized同步器，将该节点出的链表转为树</span></span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;    <span class="comment">//hd：树的头(head)</span></span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                            TreeNode&lt;K,V&gt; p =</span><br><span class="line">                                <span class="keyword">new</span> TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,</span><br><span class="line">                                                  <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> ((p.prev = tl) == <span class="keyword">null</span>)        <span class="comment">//把Node组成的链表，转化为TreeNode的链表，头结点任然放在相同的位置</span></span><br><span class="line">                                hd = p;    <span class="comment">//设置head</span></span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                tl.next = p;</span><br><span class="line">                            tl = p;</span><br><span class="line">                        &#125;</span><br><span class="line">                        setTabAt(tab, index, <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hd));<span class="comment">//把TreeNode的链表放入容器TreeBin中</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>addCount()</strong></p><p>addCount也主要是调用transfer，这里主要还是寄一下transfer的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Moves and/or copies the nodes in each bin to new table. See</span></span><br><span class="line"><span class="comment">     * above for explanation.</span></span><br><span class="line"><span class="comment">     * 把数组中的节点复制到新的数组的相同位置，或者移动到扩张部分的相同位置</span></span><br><span class="line"><span class="comment">     * 在这里首先会计算一个步长，表示一个线程处理的数组长度，用来控制对CPU的使用，</span></span><br><span class="line"><span class="comment">     * 每个CPU最少处理16个长度的数组元素,也就是说，如果一个数组的长度只有16，那只有一个线程会对其进行扩容的复制移动操作</span></span><br><span class="line"><span class="comment">     * 扩容的时候会一直遍历，知道复制完所有节点，没处理一个节点的时候会在链表的头部设置一个fwd节点，这样其他线程就会跳过他，</span></span><br><span class="line"><span class="comment">     * 复制后在新数组中的链表不是绝对的反序的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = tab.length, stride;</span><br><span class="line">        <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)    <span class="comment">//MIN_TRANSFER_STRIDE 用来控制不要占用太多CPU</span></span><br><span class="line">            stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range    //MIN_TRANSFER_STRIDE=16</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 如果复制的目标nextTab为null的话，则初始化一个table两倍长的nextTab</span></span><br><span class="line"><span class="comment">         * 此时nextTable被设置值了(在初始情况下是为null的)</span></span><br><span class="line"><span class="comment">         * 因为如果有一个线程开始了表的扩张的时候，其他线程也会进来帮忙扩张，</span></span><br><span class="line"><span class="comment">         * 而只是第一个开始扩张的线程需要初始化下目标数组</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                nextTab = nt;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">                sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nextTable = nextTab;</span><br><span class="line">            transferIndex = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> nextn = nextTab.length;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建一个fwd节点，这个是用来控制并发的，当一个节点为空或已经被转移之后，就设置为fwd节点</span></span><br><span class="line"><span class="comment">         * 这是一个空的标志节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</span><br><span class="line">        <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;    <span class="comment">//是否继续向前查找的标志位</span></span><br><span class="line">        <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; <span class="comment">// to ensure sweep(清扫) before committing nextTab,在完成之前重新在扫描一遍数组，看看有没完成的没</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</span><br><span class="line">            <span class="keyword">while</span> (advance) &#123;</span><br><span class="line">                <span class="keyword">int</span> nextIndex, nextBound;</span><br><span class="line">                <span class="keyword">if</span> (--i &gt;= bound || finishing) &#123;</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    i = -<span class="number">1</span>;</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</span><br><span class="line">                         (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class="line">                          nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                       nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                    bound = nextBound;</span><br><span class="line">                    i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">                <span class="keyword">int</span> sc;</span><br><span class="line">                <span class="keyword">if</span> (finishing) &#123;        <span class="comment">//已经完成转移</span></span><br><span class="line">                    nextTable = <span class="keyword">null</span>;</span><br><span class="line">                    table = nextTab;</span><br><span class="line">                    sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);    <span class="comment">//设置sizeCtl为扩容后的0.75</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    finishing = advance = <span class="keyword">true</span>;</span><br><span class="line">                    i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)            <span class="comment">//数组中把null的元素设置为ForwardingNode节点(hash值为MOVED[-1])</span></span><br><span class="line">                advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;                <span class="comment">//加锁操作</span></span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;        <span class="comment">//该节点的hash值大于等于0，说明是一个Node节点</span></span><br><span class="line">                                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                                 * 因为n的值为数组的长度，且是power(2,x)的，所以，在&amp;操作的结果只可能是0或者n</span></span><br><span class="line"><span class="comment">                                 * 根据这个规则</span></span><br><span class="line"><span class="comment">                                 *         0--&gt;  放在新表的相同位置</span></span><br><span class="line"><span class="comment">                                 *         n--&gt;  放在新表的（n+原来位置）</span></span><br><span class="line"><span class="comment">                                 */</span></span><br><span class="line">                            <span class="keyword">int</span> runBit = fh &amp; n; </span><br><span class="line">                            Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                             * lastRun 表示的是需要复制的最后一个节点</span></span><br><span class="line"><span class="comment">                             * 每当新节点的hash&amp;n -&gt; b 发生变化的时候，就把runBit设置为这个结果b</span></span><br><span class="line"><span class="comment">                             * 这样for循环之后，runBit的值就是最后不变的hash&amp;n的值</span></span><br><span class="line"><span class="comment">                             * 而lastRun的值就是最后一次导致hash&amp;n 发生变化的节点(假设为p节点)</span></span><br><span class="line"><span class="comment">                             * 为什么要这么做呢？因为p节点后面的节点的hash&amp;n 值跟p节点是一样的，</span></span><br><span class="line"><span class="comment">                             * 所以在复制到新的table的时候，它肯定还是跟p节点在同一个位置</span></span><br><span class="line"><span class="comment">                             * 在复制完p节点之后，p节点的next节点还是指向它原来的节点，就不需要进行复制了，自己就被带过去了</span></span><br><span class="line"><span class="comment">                             * 这也就导致了一个问题就是复制后的链表的顺序并不一定是原来的倒序</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> b = p.hash &amp; n;    <span class="comment">//n的值为扩张前的数组的长度</span></span><br><span class="line">                                <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                    runBit = b;</span><br><span class="line">                                    lastRun = p;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                                ln = lastRun;</span><br><span class="line">                                hn = <span class="keyword">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                hn = lastRun;</span><br><span class="line">                                ln = <span class="keyword">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                             * 构造两个链表，顺序大部分和原来是反的</span></span><br><span class="line"><span class="comment">                             * 分别放到原来的位置和新增加的长度的相同位置(i/n+i)</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</span><br><span class="line">                                <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                                         * 假设runBit的值为0，</span></span><br><span class="line"><span class="comment">                                         * 则第一次进入这个设置的时候相当于把旧的序列的最后一次发生hash变化的节点(该节点后面可能还有hash计算后同为0的节点)设置到旧的table的第一个hash计算后为0的节点下一个节点</span></span><br><span class="line"><span class="comment">                                         * 并且把自己返回，然后在下次进来的时候把它自己设置为后面节点的下一个节点</span></span><br><span class="line"><span class="comment">                                         */</span></span><br><span class="line">                                    ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                                         * 假设runBit的值不为0，</span></span><br><span class="line"><span class="comment">                                         * 则第一次进入这个设置的时候相当于把旧的序列的最后一次发生hash变化的节点(该节点后面可能还有hash计算后同不为0的节点)设置到旧的table的第一个hash计算后不为0的节点下一个节点</span></span><br><span class="line"><span class="comment">                                         * 并且把自己返回，然后在下次进来的时候把它自己设置为后面节点的下一个节点</span></span><br><span class="line"><span class="comment">                                         */</span></span><br><span class="line">                                    hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);    </span><br><span class="line">                            &#125;</span><br><span class="line">                            setTabAt(nextTab, i, ln);    </span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            advance = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;    <span class="comment">//否则的话是一个树节点</span></span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                            TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> h = e.hash;</span><br><span class="line">                                TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</span><br><span class="line">                                    (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                                        lo = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        loTail.next = p;</span><br><span class="line">                                    loTail = p;</span><br><span class="line">                                    ++lc;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                                        hi = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        hiTail.next = p;</span><br><span class="line">                                    hiTail = p;</span><br><span class="line">                                    ++hc;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                             * 在复制完树节点之后，判断该节点处构成的树还有几个节点，</span></span><br><span class="line"><span class="comment">                             * 如果≤6个的话，就转回为一个链表</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                                (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</span><br><span class="line">                            hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                                (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            advance = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>get方法</strong></p><p>get操作中，根本没有使用同步机制，<strong>也没有使用unsafe方法</strong>，所以读（get）操作是支持并发操作的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 相比put方法，get就很单纯了，支持并发操作，</span></span><br><span class="line"><span class="comment">     * 当key为null的时候回抛出NullPointerException的异常</span></span><br><span class="line"><span class="comment">     * get操作通过首先计算key的hash值来确定该元素放在数组的哪个位置</span></span><br><span class="line"><span class="comment">     * 然后遍历该位置的所有节点</span></span><br><span class="line"><span class="comment">     * 如果不存在的话返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</span><br><span class="line">        <span class="keyword">int</span> h = spread(key.hashCode());</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((eh = e.hash) == h) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                    <span class="keyword">return</span> e.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                    <span class="keyword">return</span> e.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="7-1-你知道-ConcurrentHashMap-的工作原理吗？">7.1 你知道 ConcurrentHashMap 的工作原理吗？</h5><ul><li>Java7 中 ConcurrentHashMap 使用的分段锁，也就是每一个 Segment 上同时只有一个线程可以操作，每一个 Segment 都是一个类似 HashMap 数组的结构，它可以扩容，它的冲突会转化为链表。但是 Segment 的个数一但初始化就不能改变。<ul><li><strong>主要采用锁机制</strong>，在对某个Segment进行操作时，将该Segment锁定，不允许对其进行非查询操作</li></ul></li><li>Java8 中的 ConcurrentHashMap 使用的 Synchronized 锁加 CAS 的机制。结构也由 Java7 中的 <strong>Segment 数组 + HashEntry 数组 + 链表</strong> 进化成了 <strong>Node 数组 + 链表 / 红黑树</strong>，Node 是类似于一个 HashEntry 的结构。它的冲突再达到一定大小时会转化成红黑树，在冲突小于一定数量时又退回链表。<ul><li><strong>CAS无锁算法</strong>，这种乐观操作在完成前进行判断，如果符合预期结果才给予执行</li></ul></li></ul><h5 id="7-2-请问ConcurrentHashMap中变量使用final和volatile修饰有什么用呢？其中链表是final的next属性，那么发生删除某个元素，如何实现的？">7.2 请问ConcurrentHashMap中变量使用final和volatile修饰有什么用呢？其中链表是final的next属性，那么发生删除某个元素，如何实现的？</h5><p>ConcurrentHashMap被final修饰的变量，（部分）如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认初始容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"><span class="comment">// 默认加载因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"><span class="comment">// 默认segment层级</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br><span class="line"><span class="comment">// 最大容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">// segment最小容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_SEGMENT_TABLE_CAPACITY = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 一个segment最大容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SEGMENTS = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line"><span class="comment">// 锁之前重试次数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RETRIES_BEFORE_LOCK = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>HashEntry中被volatile修饰的部分变量如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HashEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">       <span class="keyword">final</span> K key;</span><br><span class="line">       <span class="keyword">volatile</span> V value;  <span class="comment">// 保证可见性</span></span><br><span class="line">       <span class="keyword">volatile</span> HashEntry&lt;K,V&gt; next;</span><br></pre></td></tr></table></figure><ul><li><strong>使用final</strong>。用来实现不变模式（immutable），他是多线程安全里最简单的一种保障方式。因为你拿他没有办法，想改变它也没有机会。不变模式主要通过final关键字来限定的。在JMM中final关键字还有特殊的语义。Final域使得确保初始化安全性（initialization safety）成为可能，初始化安全性让不可变形对象不需要同步就能自由地被访问和共享。</li><li><strong>使用volatile</strong>。保证某个变量内存的改变对其他线程即时可见，在配合CAS可以实现不加锁对并发操作的支持。</li></ul><h5 id="7-3-HashTable与ConcurrentHashMap有什么区别，描述锁分段技术。">7.3 HashTable与ConcurrentHashMap有什么区别，描述锁分段技术。</h5><ul><li><strong>锁机制</strong>。 所有访问HashTable的线程都必须竞争同一把锁，效率更低；ConcurrentHashMap所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</li><li><strong>底层数据结构</strong>。 1.8之后很相似，都是数组+链表/红黑树 ； 1.8之前，ConcurrentHashMap是Segement数组 + HashEntry数组 + 链表。</li></ul><h5 id="7-4-（阿里·淘特）ConcurrentHashMap1-8为什么不使用分段锁？">7.4 （阿里·淘特）ConcurrentHashMap1.8为什么不使用分段锁？</h5><p>先说分段锁的优点：</p><ol><li>保证在<strong>操作不同段 map</strong> 的时候<strong>可以并发执行</strong>；操作<strong>同段 map</strong> 的时候，进行<strong>锁的竞争和等待</strong>。这相<strong>对于直接对整个map同步synchronized</strong>是有优势的。</li></ol><p>但是分段锁也有一些不可忽视的缺点：</p><ol><li>分成很多段时会比较<strong>浪费内存空间</strong>(不连续，碎片化)；</li><li><strong>操作map时竞争同一个分段锁的概率非常小（段散列比较好的时候</strong>）时，分段锁反而会造成更新等操作的长时间等待；</li><li>当某个段很大时，分段锁的性能会下降。</li></ol><p>综上考虑1.8不再使用分段锁。</p><h5 id="7-5-为什么1-8中-get-方法不加锁？">7.5 为什么1.8中 get() 方法不加锁？</h5><p>因为链表每个节点的val和next都使用volatile修饰，保证了可见性。</p><h5 id="7-6-为什么1-8不使用lock而是使用sync？">7.6 为什么1.8不使用lock而是使用sync？</h5><ol><li>因为sync加入锁升级机制（jdk1.6之后），已经优化的不错了；</li><li>lock通过reentranclock实现，reentranlock是通过AQS实现，需要增加额外内存开销（CLH双向队列）。</li></ol><h5 id="7-7-ConcurrenthashMap使用的时候有可能出现不安全的情况？">7.7 ConcurrenthashMap使用的时候有可能出现不安全的情况？</h5><blockquote><p>参考：<a href="https://blog.csdn.net/luzhensmart/article/details/108133560">https://blog.csdn.net/luzhensmart/article/details/108133560</a></p></blockquote><p>查了一些资料后发现，<strong>原来ConcurrentHashMap的线程安全指的是，它的【每个方法】单独调用（即原子操作）都是线程安全的，但是代码总体的互斥性并不受控制</strong>。以上面的代码为例，最后一行中的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            this.addup();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private void addup() &#123;</span><br><span class="line">        if (!map.containsKey(KEY)) &#123;</span><br><span class="line">            map.put(KEY, 1);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            map.put(KEY, map.get(KEY) + 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在上面一个线程内部进行了100次加法，但是其实加1在线程内部本身也并不是原子操作</strong>。</p><p>实际上并不是原子操作，它包含了三步：</p><ol><li>map.get</li><li>加1</li><li>map.put</li></ol><p>是由于在上面的代码中，map本身是一个共享变量。<strong>当线程A执行map.get的时候，其它线程可能正在执行map.put</strong>，这样一来当线程A执行到map.put的时候，线程A的值就已经是脏数据了，然后脏数据覆盖了真值，导致线程不安全。</p><h4 id="8-HashMap-和-HashSet区别-？">8. HashMap <strong>和</strong> HashSet<strong>区别</strong> ？</h4><blockquote><p>如果你看过 HashSet 源码的话就应该知道：HashSet 底层就是基于 HashMap 实现的。（HashSet 的源码非常非常少，因为除了clone() 、 writeObject() 、 readObject() 是 HashSet ⾃⼰不得不实现之外，其他方法都是直接调用 HashMap 中的方法。</p></blockquote><table><thead><tr><th style="text-align:center"><strong>HashMap</strong></th><th style="text-align:center"><strong>HashSet</strong></th></tr></thead><tbody><tr><td style="text-align:center">实现了Map接⼝</td><td style="text-align:center">实现Set接⼝</td></tr><tr><td style="text-align:center">存储键值对</td><td style="text-align:center">仅存储对象</td></tr><tr><td style="text-align:center">调⽤ <code>put()</code> 向map中添加元素</td><td style="text-align:center">调⽤ <code>add()</code> ⽅法向Set中添加元素</td></tr><tr><td style="text-align:center">HashMap使⽤键（Key）计算Hashcode：<code>int hash = hash(key);</code></td><td style="text-align:center">HashSet使⽤成员对象来计算hashcode值，对于两个对象来说hashcode可能相同，所以equals()⽅法⽤来判断对象的相等性。</td></tr></tbody></table><h4 id="9-说说HashSet的基本原理？">9. 说说HashSet的基本原理？</h4><ul><li><p><strong>底层结构</strong></p><p><code>HashSet</code>底层原理完全就是包装了一下<code>HashMap</code> ，只不过存储的时候<code>value</code>是默认存储了一个<code>Object</code>的静态常量，取的时候也是只返回<code>key</code>，所以看起来就像<code>List</code>一样。</p></li><li><p><strong>初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max((<span class="keyword">int</span>) (c.size()/<span class="number">.75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>add()方法</strong></p><p>可以看到这三个方法都是直接调用的<code>HashMap</code>的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.remove(o)==PRESENT;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.containsKey(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>add其实就是调用HashMap的put方法，那么如何保证<strong>唯一性</strong>？</p></blockquote><p><strong>如果<code>哈希值</code>和<code>key</code>都一样</strong>，就会直接拿新值<strong>覆盖旧值</strong>，而<code>HashSet</code>就是利用这个特性来保证唯一性。</p><p>其实和HashMap就是一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">    e = p;</span><br></pre></td></tr></table></figure></li><li><p><strong>contains方法</strong>（<s>Get()方法</s> ）</p><p><strong>hashset没有get方法</strong>，因为没有意义：不需要获取某个键值对应的value。</p><p>具体实现直接调用hashmap的containsKey()方法：</p><blockquote><p>过程和hashmap的get方法过程差不多，返回为null则是不存在。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.containsKey(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="9-1-HashSet如何检查重复-？">9. 1 HashSet<strong>如何检查重复</strong> ？</h5><ol><li>把对象加⼊ HashSet 时，HashSet先计算对象的hashcode 值；</li><li>根据hashcode值计算出要加⼊的位置，同时也会与其他加⼊的对象的hashcode值作⽐教；</li><li>如果没有相符的hashcode，HashSet会假设对象没有重复出现；</li><li><strong>如果发现有相同hashcode值的对象，这时会调用 equals()</strong> 方法来检查hashcode相等的对象是否真的相同，如果两者相同，HashSet就不会让加⼊操作成功。</li></ol><h5 id="9-2-【新】contains-方法在HashSet和ArrayList的实现区别？">9.2 【新】contains()方法在HashSet和ArrayList的实现区别？</h5><ul><li><p><strong>Arraylist</strong></p><p>因为底层是object数组，判断某个对象是否存在，其实是通过遍历来进行判断的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;<span class="comment">//#1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回指定元素在列表中第一次出现的索引，如果该列表不包含该元素，则返回-1。*/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Hashset</strong></p><p>Hashset是<strong>hash值 &amp;&amp; 遍历链表equals()</strong> 都相等，来判断的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">    e = p;</span><br></pre></td></tr></table></figure></li></ul><h4 id="10-comparable-和-Comparator的区别？">10. comparable <strong>和</strong> Comparator的区别？</h4><blockquote><p>参考：<a href="https://www.cnblogs.com/xujian2014/p/5215082.html">https://www.cnblogs.com/xujian2014/p/5215082.html</a></p></blockquote><ul><li><p>Comparable是排序接口，若一个类实现了Comparable接口，就意味着“该类支持排序”。</p><blockquote><p>例如Person类，实现Comparable接口，使得所有Person类对象可以按照各自年龄大小进行排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.age-p.getAge();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Comparator是比较器，我们若需要控制某个类的次序，可以建立一个“该类的比较器”来进行排序。</p><blockquote><p>Person类没有实现Comparable接口，该如何比较大小呢？我们可以新建一个类，让其实现Comparator接口，从而构造一个“比较器&quot;。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Comparable相当于“内部比较器”，而Comparator相当于“外部比较器”。。</p></li></ul><h4 id="11-如何选用集合">11. <strong>如何选用集合</strong>?</h4><p><img src="https://img-blog.csdn.net/20140630092900390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaml1cWl5dWxpYW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><p><strong>需要存储键值对</strong>：</p><ul><li><strong>Map接口的集合</strong><ul><li>需要排序时选择TreeMap</li><li>不需要排序时就选择HashMap</li><li>需要保证线程安全就选⽤ConcurrentHashMap</li></ul></li></ul><p><strong>只需要存储元素，实现collection接口的集合，又分为</strong>：</p><ul><li><strong>需要保证元素唯一–Set接口的集合</strong><ul><li>HashSet</li></ul></li><li><strong>不需要元素唯一–List接口结合</strong><ul><li>查找比较多：ArrayList</li><li>增删比较多：LinkedList</li></ul></li></ul><h3 id="1-3-3-List">1.3.3 <strong>List</strong></h3><h4 id="1-用过-ArrayList-吗？说一下它有什么特点？">1.<strong>用过 ArrayList 吗？说一下它有什么特点</strong>？</h4><ul><li><strong>自动扩容</strong>： 当加入数据达到一定程度后，会实行自动扩容，即扩大数组大小 ；</li><li><strong>底层实现</strong>：底层是使用数组实现，add(int,o)，添加到某个位置，那么可能会挪动大量的数组元素，并且可能会触发扩容机制；</li><li><strong>线程不安全</strong></li></ul><h4 id="2-ArrayList-与-Vector-区别呢-为什么要用Arraylist取代Vector呢？">2. ArrayList <strong>与</strong> Vector <strong>区别呢</strong>?<strong>为什么要用</strong>Arraylist<strong>取代</strong>Vector<strong>呢</strong>？</h4><ul><li><p><strong>线程安全</strong>： Vector线程安全，ArrayList 不是；</p></li><li><p><strong>Vector耗时</strong>：Vector 类的所有方法都是同步的。可以由两个线程安全地访问⼀个Vector对象、但是⼀个线程访问Vector的话代码要在同步操作上耗费大量的时间。</p></li></ul><h4 id="3-Array-ArrayList不同点">3. Array &amp; ArrayList不同点?</h4><ol><li><strong>Array可以包含基本类型和对象类型</strong>，<strong>ArrayList只能包含对象类型</strong> ；</li><li>Array大小是固定的，ArrayList的大小是 <u>动态变化</u> 的 ；</li><li>ArrayList提供了更多的方法和特性: addAll()，removeAll()，iterator()。</li></ol><h4 id="4-Arraylist-与-LinkedList-区别">4. Arraylist <strong>与</strong> LinkedList <strong>区别</strong>?</h4><ul><li><p><strong>索引/插入</strong>：ArrayList按序号索引，索引快插入慢；LinkedList不是，索引慢，插入快；</p></li><li><p><strong>内存方面</strong>： Arraylist 是线性连续存储， 内存利用更低；LinkedList 是链表，内存利用更高（将内存零散空间串联），但也更占有内存（每个节点存储了两个引用）；</p></li><li><p><strong>线程安全</strong>： ArrayList 和 LinkedList 都是不同步的，也就是<strong>都不</strong>保证线程安全；</p></li><li><p><strong>底层数据结构</strong>： Arraylist 底层使用的是 <strong>Object</strong>数组； LinkedList  底层使用的是<strong>双向链表</strong> 数据结构 ；</p><blockquote><p>JDK1.6之前为循环链表，JDK1.7取消了循环。</p></blockquote></li></ul><h4 id="5-【-u-源码解读-u-】说说ArrayList的扩容机制吧-？为什么是扩容1-5倍？默认大小是多少。">5. 【<u>源码解读</u>】说说ArrayList的扩容机制吧 ？为什么是扩容1.5倍？默认大小是多少。</h4><blockquote><p><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/collection/ArrayList%E6%BA%90%E7%A0%81%2B%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90.md">逐源码分析扩容机制</a></p></blockquote><p>先把回答写在下面：</p><blockquote><p><strong>ArrayList/vector默认大小都是10，但vectot扩容是2倍</strong>。</p></blockquote><p><strong>1. 扩容机制</strong>：</p><p>使用无参构造函数创建的数组长度为0，当第一次add后数组长度为10 ； 如果继续add超过10后，也就是不满足<strong>minCapacity（最小需要容量） - elementData.length &gt; 0</strong> 会触发扩容机制。 将新容量更新为旧容量的1.5倍 ，若还是小于最小需要容量，那么就把【最小需要容量当作数组的新容量】。</p><p>最后检查设置的新容量是否大于最大容量MAX_ARRAY_SIZE ，进入<code>hugeCapacity()</code> :</p><ul><li>如果minCapacity大于MAX_ARRAY_SIZE，则新容量则为<code>Integer.MAX_VALUE</code>，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 <code>Integer.MAX_VALUE - 8</code> 。</li></ul><p><strong>2. 为什么是1.5倍</strong>？</p><p>因为，<strong>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1)，所以 ArrayList 每次扩容之后容量都会变为原来的 1.5 倍左右（oldCapacity 为偶数就是 1.5 倍，否则是 1.5 倍左右）！</strong> 奇偶不同。</p><p>比如 ：10+10/2 = 15, 33+33/2=49。如果是奇数的话会丢掉小数。</p><ul><li><p><strong>ArrayList总览</strong></p><p><code>ArrayList</code>继承于<strong>AbstractList</strong> ，实现了<strong>List</strong>,<strong>RandomAccess</strong>,<strong>Cloneable</strong>,<strong>java.io.Serializable</strong> 这些接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><code>RandomAccess</code> 是一个标志接口，表明实现这个这个接口的 List 集合是支持<strong>快速随机访问</strong>的。在 <code>ArrayList</code> 中，我们即可以通过元素的序号快速获取元素对象，这就是快速随机访问；</li><li><code>ArrayList</code> 实现了<strong>Cloneable 接口</strong> ，即覆盖了函数<code>clone()</code>，能被克隆；</li><li><code>ArrayList</code> 实现了 <code>java.io.Serializable </code>接口，这意味着<code>ArrayList</code>支持序列化，能通过序列化去传输。</li></ul></li><li><p><strong>ArrayList 核心源码解读（先耐心看一遍</strong>）</p><p>直接点击上面链接 <a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/collection/ArrayList%E6%BA%90%E7%A0%81%2B%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90.md">逐源码分析扩容机制</a> 查看。</p></li><li><p><strong>【重点】JDK8 <u>扩容机制</u> 解读</strong></p><ol><li><p><strong>从构造函数说起</strong></p><p>（JDK8）ArrayList 有三种方式来初始化 :</p><ul><li>以<strong>无参数构造方法</strong>创建 ArrayList 时，实际上初始化赋值的是一个<strong>空数组</strong>。<u>当真正对数组进行添加元素操作时，才真正分配容量</u>。即向数组中添加第一个元素时，数组容量扩为 10。</li><li>jdk8中的ArrayList的对象的创建<strong>类似于单例的懒汉式</strong>。JDK8的内存优化也值得我们在平时开发中学习。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 默认初始容量大小</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line">     </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 空数组（用于空实例）。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">     </span><br><span class="line">  <span class="comment">//用于默认大小空实例的共享空数组实例。</span></span><br><span class="line">   <span class="comment">//我们把它从EMPTY_ELEMENTDATA数组中区分出来，以知道在添加第一个元素时容量需要增加多少。</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">     </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 保存ArrayList数据的数组</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line">     </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * ArrayList 所包含的元素个数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">     </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment"> /**</span></span><br><span class="line"><span class="comment">  * 带初始容量参数的构造函数。（用户自己指定容量）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;<span class="comment">//初始容量大于0</span></span><br><span class="line">         <span class="comment">//创建initialCapacity大小的数组</span></span><br><span class="line">         <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;<span class="comment">//初始容量等于0</span></span><br><span class="line">         <span class="comment">//创建空数组</span></span><br><span class="line">         <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;<span class="comment">//初始容量小于0，抛出异常</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                            initialCapacity);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *构造包含指定collection元素的列表，这些元素利用该集合的迭代器按顺序返回</span></span><br><span class="line"><span class="comment"> *如果指定的集合为null，throws NullPointerException。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">     elementData = c.toArray();</span><br><span class="line">     <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">         <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">             elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// replace with empty array.</span></span><br><span class="line">         <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>再看<code>add</code>方法</strong></p><blockquote><p>这里<u>以无参构造函数创建的 ArrayList</u> 为例分析 。</p></blockquote><blockquote><p>JDK11 移除了 <code>ensureCapacityInternal()</code> 和 <code>ensureExplicitCapacity()</code> 方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将指定的元素追加到此列表的末尾。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//添加元素之前，先调用ensureCapacityInternal方法</span></span><br><span class="line">      ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">      <span class="comment">//这里看到ArrayList添加元素的实质就相当于为数组赋值</span></span><br><span class="line">      elementData[size++] = e;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>再看 <code>ensureCapacityInternal()</code> 方法</strong></p><p>第2步（JDK7）可以看到 <code>add</code> 方法 首先调用了<code>ensureCapacityInternal(size + 1)</code> 。</p><ul><li><strong>当 要 add 进第 1 个元素时，minCapacity 为 1，在 Math.max()方法比较后，minCapacity 为 10。</strong></li><li>然后开始调用 <code>ensureExplicitCapacity()</code> 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到最小扩容量</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            <span class="comment">// 获取默认的容量和传入参数的较大值</span></span><br><span class="line">          minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      ensureExplicitCapacity(minCapacity);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>调用 <code>ensureCapacityInternal()</code> 进入<code>ensureExplicitCapacity()</code>这个方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否需要扩容</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//调用grow方法进行扩容，调用此方法代表已经开始扩容了</span></span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们来仔细分析一下：</p><ul><li>当我们要 add 进第 1 个元素到 ArrayList 时，elementData.length 为 0 （因为还是一个空的 list），因为执行了 <code>ensureCapacityInternal()</code> 方法 ，<strong>所以 minCapacity 此时为 10</strong>。此时，<code>minCapacity - elementData.length &gt; 0</code>成立，所以会进入 <code>grow(minCapacity)</code> 方法。</li><li>当 add 第 2 个元素时，minCapacity 为 2，此时 elementData.length(容量)在添加第一个元素后扩容成 10 了。此时，<code>minCapacity - elementData.length &gt; 0</code> 不成立，所以不会进入 （执行）<code>grow(minCapacity)</code> 方法。</li><li>添加第 3、4···到第 9 个元素时，依然不会执行 grow 方法，数组容量都为 10。</li></ul><p>直到添加第 10 个元素，<code>minCapacity &lt; elementData.length</code><strong>不成立</strong>。进入 grow 方法进行扩容。</p></li><li><p><strong>elementData.length（实际容量）&gt;= minCapacity（最小需要容量）  , 执行 grow()</strong></p><blockquote><p><strong>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1),所以 ArrayList 每次扩容之后容量都会变为原来的 1.5 倍左右（oldCapacity 为偶数就是 1.5 倍，否则是 1.5 倍左右）！</strong> 奇偶不同，比如 ：10+10/2 = 15, 33+33/2=49。如果是奇数的话会丢掉小数。</p></blockquote><p>将新容量更新为旧容量的1.5倍 ，若还是小于最小需要容量，那么就把【最小需要容量当作数组的新容量】。</p><ul><li>最后检查设置的新容量是否大于最大容量MAX_ARRAY_SIZE ，进入<code>hugeCapacity()</code> :<ul><li>如果minCapacity大于MAX_ARRAY_SIZE，则新容量则为<code>Integer.MAX_VALUE</code>，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 <code>Integer.MAX_VALUE - 8</code> 。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 要分配的最大数组大小</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line">     </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * ArrayList扩容的核心方法grow。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// oldCapacity为旧容量，newCapacity为新容量</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="comment">//将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span></span><br><span class="line">       <span class="comment">//我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，</span></span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="comment">//然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把【最小需要容量当作数组的新容量】，</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">      <span class="comment">// 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，</span></span><br><span class="line">      <span class="comment">//如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br></pre></td></tr></table></figure></li><li><p><strong>设置完新容量 newCapacity ，进行<code>Arrays.copyOf</code></strong></p><p>Arrays的copyOf()方法传回的数组是新的数组对象，改变传回数组中的元素值，不会影响原来的数组。</p><ul><li><u>第二个自变量指定要建立的新数组长度</u>，如果新数组的长度超过原数组的长度，则保留数组默认值，例如：</li></ul><p>使用 <code>Arrays.copyOf()</code>方法主要是为了给原有数组扩容。</p></li></ol></li><li><p><strong>contains()方法</strong></p><p>就是遍历数组看是否存在该元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;<span class="comment">//#1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回指定元素在列表中第一次出现的索引，如果该列表不包含该元素，则返回-1。*/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-1-多线程操作ArrayList会出现什么错误？">5.1 多线程操作ArrayList会出现什么错误？</h5><p>从ArrayList的（1）添加元素（<code>add</code>/<code>addAll</code>）和（2）获取元素（<code>get</code>）  两个角度来说：</p><ol><li><p><strong>多线程添加元素</strong></p><p>假设此时<code>minCapacity（最小需要容量）= 10</code> ，此时数组容量是10。A,B两个线程各需要添加若干元素，<strong>同时</strong> 判断此时不需要扩容，后续可能就会发生<strong>数组越界</strong>。</p></li><li><p><strong>多线程获取元素</strong></p><p>一个线程正在修改某个元素，另外一个线程此时正在读，那么读到的就是修改前的元素，也就是<strong>脏数据</strong>。</p></li></ol><h5 id="5-2-arraylist可以存多少数据？">5.2 <strong>arraylist可以存多少数据</strong>？</h5><p>Integer.MAX_VALUE = 2147483647 。</p><p>arraylist底层是一个数组对象：Object[] arr = new Object[10]，数组的大小只能设置int类型。所以能存储2147483647 字节数据。</p><h4 id="6-说一下LinkedList底层原理？">6. 说一下LinkedList底层原理？</h4><blockquote><p>参考：<a href="https://segmentfault.com/a/1190000021433760">Java集合系列之三：LinkedList底层原理</a></p></blockquote><p>LinkedList实现了<strong>List</strong>接口和<strong>Deque</strong>接口的，底层的<strong>双端链表</strong>结构使它支持高效的插入和删除操作，<u>也具有队列的特性</u>，非线程安全的。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/2192701-9c26f117619ad840.png" alt="img"></p><blockquote><p>相比ArrayList要简单很多，主要是双向链表那些操作。</p></blockquote><ul><li><p><strong>底层结构</strong></p><p>核心属性、构造方法和Node定义如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;<span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;   <span class="comment">//LinkedList中存放的元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; first;  <span class="comment">//头节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; last;   <span class="comment">//尾节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法，创建一个空的列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将一个指定的集合添加到LinkedList中，先完成初始化，在调用添加操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span>     </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Node节点    </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">     E item;</span><br><span class="line">     Node&lt;E&gt; next;</span><br><span class="line">     Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">     Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">         <span class="keyword">this</span>.item = element;</span><br><span class="line">         <span class="keyword">this</span>.next = next;</span><br><span class="line">         <span class="keyword">this</span>.prev = prev;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>add() 方法</strong></p><p><strong>朴实无华的双向链表尾插法</strong>。获得当前最后一个节点最为当前节点的前置节点，同样把当前节点设置为前置节点的后置节点，然后把当前节点作为最后一个节点，因为只需要创建一个节点与前一个节点建立前后关系即可，时间复杂度是O(1)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获得当前最后一个节点作为前置节点，可能为空</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="comment">// 初始化当前节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 把当前节点作为最后的节点</span></span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="comment">// 第一次添加设置为第一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 把当前节点设置为前置节点的后置节点</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>add(int index,E e)</strong></p><p>按索引插入元素，首先判断是不是第一个添加的元素，如果是的话，直接使用add()方法添加就可以了，如果不是则需要根据索引来遍历寻找链表上对应位置。</p><ul><li>这里用了个小技巧，<strong>判断索引是在前半段还是在后半段</strong>，从短的那头开始遍历，找到之后，新建一个节点，建立新的前置节点和后置节点的关系。时间复杂度是O(n)，n为size/2。</li></ul></li><li><p><strong>get(int index)方法</strong></p><p>get()方法是用的上面介绍过的node()方法，时间复杂度是O(n)，n为size/2。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 判断数组越界</span></span><br><span class="line">     checkElementIndex(index);</span><br><span class="line">     <span class="comment">// 遍历寻找节点</span></span><br><span class="line">     <span class="keyword">return</span> node(index).item;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得被插入索引上的元素</span></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"><span class="comment">// 如果索引是在链表的前半段</span></span><br><span class="line"><span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="comment">// 获得第一个节点</span></span><br><span class="line">    Node&lt;E&gt; x = first;</span><br><span class="line">    <span class="comment">// 往后找到插入索引位置上的节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">        x = x.next;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果索引是在链表的前半段</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 获得最后个节点</span></span><br><span class="line">    Node&lt;E&gt; x = last;</span><br><span class="line">    <span class="comment">// 往前找到插入索引位置上的节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">        x = x.prev;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-3-4-迭代器">1.3.4 迭代器</h3><h4 id="1-请简单说明一下什么是迭代器？">1.<strong>请简单说明一下什么是迭代器</strong>？</h4><p>Iterator提供了统一遍历操作集合元素的统一接口, <strong>Collection接口实现Iterable接口</strong>。</p><ul><li>每个集合<strong>都通过实现Iterable接口中iterator()方法</strong>返回Iterator接口的实例, 然后对集合的元素进行迭代操作；</li><li>在<u><strong>迭代元素的时候不能通过集合的方法删除元素</strong></u>, 否则会抛出ConcurrentModificationException 异常. 但是可以通过Iterator接口中的remove()方法进行删除。</li></ul><h4 id="2-请你说说Iterator和ListIterator的区别？">2.<strong>请你说说Iterator和ListIterator的区别</strong>？</h4><ul><li><strong>遍历类型</strong>：<code>Iterator</code>可用来遍历Set和List集合，但是<code>ListIterator</code>只能用来遍历List；</li><li><strong>遍历方向</strong>：<code>Iterator</code>对集合只能是前向遍历，<code>ListIterator</code>既可以前向也可以后向；</li><li><strong>功能区别</strong>：<code>ListIterator</code>实现了Iterator接口，并包含其他的功能</li></ul>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（一）_Java_面对对象</title>
      <link href="/p/7257/"/>
      <url>/p/7257/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我的校招记录：<a href="https://www.hwh.zone/p/29708/">校招笔记（零）_写在前面</a> ，以下是校招笔记总目录。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><h2 id="1-2-面对对象">1.2 面对对象</h2><h3 id="1-2-1-基本问题">1.2.1 基本问题</h3><h4 id="1-介绍一下面对对象七大原则？三大特性？">1.<strong>介绍一下面对对象七大原则？三大特性</strong>？</h4><h5 id="七大原则">七大原则</h5><ul><li><p><strong>单一职责原则</strong>： 就一个类来说，应该仅有一个引起它变化的原因。也就是说，<strong>一个类应该只有一个职责</strong>。</p><blockquote><p>如果有多个职责，那么就相当于把这些指责耦合在起，一个职责的变化就可能削弱或抑制了这个类完成其他职责的能力，引起类的变化的原因就会有多个。所以在构造一个类时， 将类的不同职责分离至两个或多个类中(或者接口中)，确保引起该类变化的原因只有一个。</p></blockquote></li><li><p><strong>开闭原则(OCP)</strong>： 软件组成实体应该是可扩展的，但是不可修改。开放-封闭原则认为应该试图设计永远也不需要改变的模块。可以添加新代码来打展系统的行为，不能对已有的代码进行修改。</p><blockquote><p>这个原则很好的实现了面向对象的封装性和可重用性。</p></blockquote></li><li><p><strong>李氏替换原则(LSP)</strong>： 子类应当可以替换父类并出现在父类能够出现的任何地方。</p><blockquote><p>以圆和椭圆为例，圆是椭圆的一一个特殊子类。因此任何出现椭圆的地方，圆均可以出现。</p></blockquote></li><li><p><strong>依赖倒置原则(DIP)</strong>： 在进行业务设计时，与<u>特定业务有关的依赖</u>关系应该尽量依赖<strong>接口和抽象类</strong>，<strong>而不是依赖于具体类</strong>。具体类只负责相关业务的实现，修改具体类不影响与特定业务有关的依赖关系。</p><blockquote><p>为此，在进行业务设计时，应尽量在接口或抽象类中定义业务方法的原型，并通过具体的实现类(子类)来实现该业务方法，业务方法内容的修改将不会影响到运行时业务方法的调用。</p></blockquote></li><li><p><strong>接口分离原则(ISP)</strong>：  <u>采用多个与特定客户类有关的接口</u> 比采用一个通用的涵盖多个业务方法的接口要好。</p><blockquote><p>举例：如果拥有一个针对多个客户的类，为每一个客户创建特定业务接口，然后使该客户类继承多个特定业务接口将<u>比直接加载客户所需所有方法有效</u>。</p></blockquote></li><li><p><strong>组合重用原则</strong> ：能用组合实现的地方，<strong>尽量用组合来</strong>实现，而<strong>不要使用继承</strong>来扩展功能。</p><blockquote><p>097因为组合能更好地实现封装，比继承具有更大的灵活性和更稳定的结构。</p></blockquote></li><li><p><strong>迪米特原则 :</strong> <u>一个对象应该对于其他对象有最少的了解</u>，这样做的好处就是可以有效地降低类之间的耦合要求。</p></li></ul><h5 id="三大特性">三大特性</h5><ul><li><p><strong>封装</strong>。<u>封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的方法</u>，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果⼀个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</p></li><li><p><strong>继承</strong>。 <u>继承是使用已存在的类的定义作为基础建⽴新类的技术，新类的定义可以增加新的数据或新的功能</u>，也可以用⽗类的功能，但不能选择性地继承⽗类。通过使用继承我们能够非常方便地<strong>复用</strong>以前的代码。</p><blockquote><ol><li>子类拥有⽗类对象所有的属性和方法（包括私有属性和私有方法），但是⽗类中的私有属性和方法子类是无法访问，只是拥有。</li><li>子类可以拥有⾃⼰属性和方法，即子类可以对⽗类进行扩展。</li><li>子类可以用⾃⼰的方式实现⽗类的方法。</li></ol></blockquote></li><li><p><strong>多态</strong>。（1）<strong>静态多态：重载</strong> （2）<strong>动态多态</strong>：所谓多态就是指程序中定义的<strong>引用变量所指向的具体类型</strong>和&lt;通过该<strong>引用变量发出的方法调用</strong>在<strong>编程时并不确定</strong>，而是在【<strong>程序运行期间才确定</strong>】。即⼀个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><blockquote><p>在 Java 中有两种形式可以实现多态：<strong>继承</strong>（多个子类对同⼀方法的重写）和<strong>接口</strong>（实现接口并覆盖接口中同⼀方法）。</p></blockquote></li></ul><h5 id="1-1-java多态的原理？【阿里-待重写】">1.1 java多态的原理？【阿里&amp;待重写】</h5><p>多态分两种：（1）【编译】时多态（静态多态）（2）运行时多态（动态多态）。</p><ol><li><p><strong>静态多态</strong></p><p><strong>重载</strong>（overload）就是编译时多态的一个例子，<strong>编译时</strong>多态在编译时就已经<strong>确定</strong>。</p><p>运行时运行的时候调用的是确定的方法。</p></li><li><p><strong>动态多态</strong></p><blockquote><p>我们通常所说的多态指的都是运行时多态，也就是<strong>编译时不确定究竟调用哪个具体方法</strong>，一直延迟到运行时（<strong>链接过程</strong>）才能确定。</p></blockquote><p>通常动态多态的实现方法：</p><ol><li>子类继承父类（extends）</li><li>类实现接口（implements）</li></ol><p>核心之处就在于<strong>对父类方法的改写或对接口方法的实现</strong>，以取得在运行时不同的执行效果。</p></li><li><p><strong>多态运行的原理</strong></p><blockquote><p>详细建议查看：<a href="https://zhuanlan.zhihu.com/p/94086109">深入理解Java多态的实现原理</a></p></blockquote><ul><li><p><strong>背景介绍</strong></p><p><img src="https://i.loli.net/2021/04/21/m1Ot3nQcMGq2YfW.jpg" alt="img"></p><p><u>类加载</u> 时会将<strong>类的元数据信息</strong>（<strong>类的方法代码、类变量、成员变量的定义</strong>等等）保存到方法区，<strong>方法区</strong>主要分为两部分：</p><ol><li><strong>常量池</strong>：Java 类引用的一些常量信息，比如<strong>类的符号引用信息</strong></li><li><strong>方法区其它部分</strong>： 保存<strong>方法表</strong>等</li></ol><p><u>链接过程</u> <strong>类的多态就发生在 <u>链接的解析</u></strong> 过程，将 <u>符号引用替换为直接引用</u>。</p></li><li><p><strong>原理简述（子类方法继承</strong>）</p><blockquote><p>参考：<a href="https://www.huaweicloud.com/articles/9b805c24ab31a65f5883c0dfeaf5a39b.html">https://www.huaweicloud.com/articles/9b805c24ab31a65f5883c0dfeaf5a39b.html</a></p></blockquote></li></ul></li></ol><h4 id="2-请解释Java中的概念，什么是构造函数？什么是构造函数重载？什么是复制构造函数？">2.<strong>请解释Java中的概念，什么是构造函数？什么是构造函数重载？什么是复制构造函数</strong>？</h4><ul><li><strong>构造函数</strong>： 每一个类都有构造函数，程序员没有创建时，编译器会默认创建一个构造函数；<strong>对象被创建时，构造函数被调用</strong>；</li><li><strong>构造函数重载</strong>： 和方法重载类似，一个类可以创建多个构造函数，每个构造函数都有<strong>唯一参数列表</strong>；</li><li><strong>复制构造函数</strong>： Java不支持像C++中那样的复制构造函数。</li></ul><h4 id="3-请说明Java中的方法重写-Overriding-和方法重载-Overloading-是什么意思？构造函数能否被重写？">3.<strong>请说明Java中的方法重写(Overriding)和方法重载(Overloading)是什么意思？构造函数能否被重写</strong>？</h4><ul><li><p>Overriding ： 方法重写是说<u>子类重新定义了父类的方法</u>，有<u>相同的方法名，参数列表和返回类型</u> ；</p></li><li><p>Overloading： 同一个类里面两个或者是多个方法<u>同名</u> ，但 <u>参数列表不同</u>不同。</p><blockquote><p>特别的重写要求返回类型一致，但<strong>重载不要求返回类型一致</strong>！</p></blockquote></li></ul><p><strong>构造函数不能被 override（重写）</strong>！但是可以 overload（重载）,所以你可以看到⼀个类中有多个构造函数的情况。</p><h5 id="3-1-f（List-String-l）-f（List-Integer-l）是重载么？">3.1 f（List&lt;String&gt; l） f（List&lt;Integer&gt; l）是重载么？</h5><p>不是重载。</p><p>静态类型一致，并<strong>不会因为泛型而改变</strong>。因为<strong>编译</strong>期间，会对泛型进行<strong>擦除</strong>。</p><h4 id="4-介绍一下接口和抽象类的区别？">4.<strong>介绍一下接口和抽象类的区别</strong>？</h4><ul><li><p><strong>设计层面</strong></p><p>接口，是对类的行为进行约束，<strong>强制要求</strong>不同类实现相同行为 ； 抽象类，既 1.<strong>非抽象类实现代码复用</strong> 2.又同时有<strong>抽象方法使得被继承类各自实现</strong>。</p></li><li><p><strong>方法实现</strong></p><p>抽象类可以<strong>有非抽象方法，有方法体</strong> ； 接口不能有。</p><blockquote><p><strong>抽象类中添加新的方法，你可以给它提供默认的实现</strong>。因此你不需要改变你现在的代码。 如果你往接口中添加方法，那么你必须改变实现该接口的类。</p></blockquote></li><li><p><strong>构造函数</strong></p><p>抽象类有；接口没有。</p></li><li><p><strong>修饰符</strong></p><p>抽象类除private 都有（抽象类目的是被继承，所以<strong>抽象方法是为被重写，不能私有</strong>）；接口<strong>默认public</strong>。</p></li><li><p><strong>继承个数 [接口优]</strong></p><p>抽象类只能被继承一次；接口可以有多个。</p></li></ul><h4 id="5-Java的四种引用？强软弱虚-？">5. <strong>Java的四种引用？强软弱虚</strong> ？</h4><ul><li><p><strong>强引用</strong> ：强引用是平常中使用最多的引用，强引用<strong>在程序内存不足（OOM</strong>）的时候也不会被回收，使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(<span class="string">&quot;str&quot;</span>);</span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure></li><li><p><strong>软引用</strong>： 软引用<strong>在程序内存不足时，会被回收（“软”，没钱用了第一个被打劫</strong>），使用方式：</p><blockquote><p>可用场景： 创建缓存的时候，创建的对象放进缓存中，当内存不足时，JVM就会回收<u>早先创建的对象</u>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：wrf这个引用也是强引用，它是指向SoftReference这个对象的，</span></span><br><span class="line"><span class="comment">// 这里的软引用指的是指向new String(&quot;str&quot;)的引用，也就是SoftReference类中T</span></span><br><span class="line">SoftReference&lt;String&gt; wrf = <span class="keyword">new</span> SoftReference&lt;String&gt;(<span class="keyword">new</span> String(<span class="string">&quot;str&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p><strong>弱引用</strong>：是<strong>只要<u>JVM垃圾回收器发现了弱引用</u>，就会将之回收</strong>，使用方式：</p><blockquote><p><strong>可用场景</strong>：  Java源码中的 java.util.WeakHashMap 中的 key 就是使用弱引用。一旦我不需要某个引用，JVM会自动帮我处理它，这样我就不需要做其它操作。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WeakReference&lt;String&gt; wrf = <span class="keyword">new</span> WeakReference&lt;String&gt;(str);</span><br></pre></td></tr></table></figure></li><li><p><strong>虚引用：无法通过虚引用来获取对一个对象的真实引用</strong>； 虚引用必须与ReferenceQueue一起使用，当GC准备回收一个<strong>对象</strong>，如果发现<strong>它还有虚引用</strong>，就会在回收之前，把这个虚引用加入到与之关联的ReferenceQueue中。</p><blockquote><p>可用场景： 对象销毁前的一些操作，比如说资源释放等。 Object.finalize() 虽然也可以做这类动作，但是这个方式即不安全又低效。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PhantomReference&lt;String&gt; prf = <span class="keyword">new</span> PhantomReference&lt;String&gt;(<span class="keyword">new</span> String(<span class="string">&quot;str&quot;</span>),</span><br><span class="line"><span class="keyword">new</span> ReferenceQueue&lt;&gt;());</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-JAVA创建对象的机制？">6. <strong>JAVA创建对象的机制</strong>？</h4><ul><li><p>new创建新对象</p></li><li><p>通过反射机制</p></li><li><p>采用clone机制</p></li><li><p>通过序列化机制</p></li></ul><h4 id="7-简述Java的对象结构？">7.<strong>简述Java的对象结构</strong>？</h4><p>Java对象由三个部分组成：对象头、实例数据、<u>对齐填充</u>。</p><ol><li><p><strong>对象头</strong>。 在JVM中，对象在内存中除了本身的数据外还会有个对象头，对于普通对象而言，其对象头中有两类信息：<strong>mark word和类型指针</strong>。 如果是数组对象，还有数组长度。</p><ol><li><p><u><code>mark word(32位)</code></u></p><p><img src="https://i.loli.net/2021/05/16/PjXkchreF9sSEKG.png" alt="image-20210516131559341"></p><ul><li>具体的内容包含对象的hashcode、分代年龄、轻量级锁指针、重量级锁指针、GC标记（分代年龄）、偏向锁线程ID、偏向锁时间戳。</li><li>当对象状态为偏向锁时，<code>mark word</code>存储的是偏向的线程ID；当状态为轻量级锁（lightweight locked）时，<code>mark word</code>存储的是指向线程栈中<code>Lock Record</code>的指针；<strong>当状态为重量级锁（inflated）时，为指向堆中的monitor对象的指针</strong>。</li></ul></li><li><p><u>存储类型指针</u>，也就是指向类的元数据的指针，通过这个指针才能确定对象是<strong>属于哪个类的实例</strong>；</p></li><li><p><u>数组长度：</u>另外对于数组而言还会有一份记录数组长度的数据。</p></li></ol></li><li><p><strong>实例数据</strong>。 来存储对象真正的有效信息（包括父类继承下来的和自己定义的）；</p></li><li><p><strong>对齐填充</strong>。JVM要求对象起始地址必须是8字节的整数倍（8字节对齐）。</p></li></ol><h4 id="8-Object有哪些常用方法？">8. Object有哪些常用方法？</h4><ul><li><em>equals方法</em></li><li>hashCode方法</li><li>wait方法</li><li>notify方法</li><li>notifyAll方法</li></ul><h3 id="1-2-2-反射">1.2.2 反射</h3><h4 id="1-请说明一下JAVA中反射的实现过程和作用分别是什么？-（快手）优缺点？">1.<strong>请说明一下JAVA中反射的实现过程和作用分别是什么</strong>？ （快手）优缺点？</h4><ul><li><p><strong>定义</strong></p><p>反射机制是<strong>在运行时</strong>，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意个对象，都能够调用它的任意一个方法。在java中，只要给定类的名字，就可以通过反射机制来获得类的所有信息。</p><blockquote><p>jdbc就是典型的反射 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&#x27;com.mysql.jdbc.Driver.class&#x27;</span>);<span class="comment">//加载MySQL的驱动类</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>实现和作用</strong></p><p>JAVA语言编译之后会生成一个<code>.class</code>文件，反射就是通过<strong>字节码</strong>文件<strong>找到某一个类、类中的方法以及属性</strong>等。</p><ul><li><p><strong>实现</strong>： （1）<strong>代码会编译成一个.class文件</strong> （2）<strong>类加载器加载进JVM的内存中，在方法区创建了Object类的Class对象</strong></p><blockquote><p>不是new出来的对象，而是类的类型对象，每个类都只有一个Class对象，作为方法区类的数据结构的接口。</p></blockquote><p>我们便是通过这个class对象来进行反射获取类的信息。</p></li><li><p><strong>作用</strong>：</p><ol><li>反射机制指的是程序在运行时能够获取自身的信息。在JAVA中，<strong><u>只要给定类的名字</u></strong>，那么就可以通过反射机制来获取类的所有信息。</li><li>根据类名在<strong>运行时创建实例</strong>（类名可以从配置文件读取，不用new）</li></ol></li></ul></li><li><p><strong>反射优缺点</strong></p><ul><li><strong>优点</strong>：（1）对于任意一个类，都能够知道这个类的所有属性和方法；（2）对于任意一个对象，都能够调用它的任意一个方法</li><li><strong>缺点</strong>：<ul><li><strong>性能降低</strong> ： 反射包括了一些<strong>动态类型</strong>，所以JVM<strong>无法对这些代码进行优化</strong></li><li><strong>安全限制</strong>： 使用反射技术要求程序必须在一个<strong>没有安全限制的环境</strong>中运行</li><li><strong>内部暴露</strong>：由于反射允许代码执行一些在正常情况下不被允许的操作（比如<strong>访问私有的属性和方法</strong>），所以使用反射可能会导致意料之外的副作用</li></ul></li></ul></li></ul><h4 id="2-解释一下JAVA代理模式？动态代理的原理？">2. 解释一下JAVA代理模式？动态代理的原理？</h4><blockquote><p>参考这个：<a href="https://zhuanlan.zhihu.com/p/54733692">JAVA面试50讲之9：动态代理的原理是什么？</a></p></blockquote><p>代理模式是给某一个对象提供一个代理，并由【<strong>代理对象】控制对【原对象】的引用(使用)</strong>。</p><ul><li><strong>优点</strong>：代理模式能够协调调用者和被调用者，<u>在一定程度上降低了系统的<strong>耦合度</strong></u>；可以<u>灵活地隐藏被代理对象的部分功能和服务，也增加额外的功能和服务</u>。</li><li><strong>缺点</strong>：由于使用了代理模式，因此程序的性能<u>没有直接调用性能高</u>；使用代理模式<u>提高了代码的复杂度</u>。</li></ul><p>根据代理模式又可以分为：静态代理和动态代理。</p><h5 id="2-1-静态代理">2.1 静态代理</h5><blockquote><p>静态代理：由程序员创建或特定工具自动生成源代码，也就是在<strong>编译时</strong>就已经将接口、被代理类、代理类等确定下来。在程序运行之前，代理类的.class文件就已经生成。</p></blockquote><p>代理模式最主要的就是有一个公共接口（Person），一个具体的类（Student），一个代理类（StudentsProxy）,代理类持有具体类的实例，代为执行具体类实例方法。</p><ul><li><p>一个班的同学（Student）要向老师交班费，但是都是通过班长（StudentProxy）把自己的钱转交给老师。这里，班长就是代理学生上交班费，班长就是学生的代理。</p></li><li><p><strong>公共Person接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//上交班费</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">giveMoney</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Student实现Person接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(name + <span class="string">&quot;上交班费50元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>StudentsProxy实现Person接口</strong></p><p>实现了Peson接口，<strong>同时持有一个Student对象</strong>，那么他可以代理学生类对象执行上交班费（执行giveMoney()方法）行为。</p><blockquote><p>⚠️ 自己实现的giveMoney，调用的是<strong>被代理的学生对象.giveMoney()</strong> 方法！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentsProxy</span> <span class="keyword">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//被代理的学生</span></span><br><span class="line">    Student stu;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentsProxy</span><span class="params">(Person stu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只代理学生对象</span></span><br><span class="line">        <span class="keyword">if</span>(stu.getClass() == Student.class) &#123;</span><br><span class="line">            <span class="keyword">this</span>.stu = (Student)stu;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代理上交班费，调用被【代理学生的上交班费】行为</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stu.giveMoney();</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用实例1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//被代理的学生张三，他的班费上交有代理对象monitor（班长）完成</span></span><br><span class="line">        Person zhangsan = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成代理对象，并将张三传给代理对象</span></span><br><span class="line">        Person monitor = <span class="keyword">new</span> StudentsProxy(zhangsan);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//班长代理上交班费，实际上是调用被代理对象的giveMoney方法</span></span><br><span class="line">        monitor.giveMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用实例2</strong>：扩充增强原对象方法</p><p>班长在帮张三上交班费之前，想要先反映一下<strong>张三最近学习有很大进步</strong>，通过代理模式很轻松就能办到 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentsProxy</span> <span class="keyword">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//被代理的学生</span></span><br><span class="line">    Student stu;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentsProxy</span><span class="params">(Person stu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只代理学生对象</span></span><br><span class="line">        <span class="keyword">if</span>(stu.getClass() == Student.class) &#123;</span><br><span class="line">            <span class="keyword">this</span>.stu = (Student)stu;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代理上交班费，调用被代理学生的上交班费行为</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;张三最近学习有进步！&quot;</span>);</span><br><span class="line">        stu.giveMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-2-动态代理">2.2 动态代理</h5><blockquote><p>上面静态代理的例子中，代理类(studentProxy)是自己定义好的，在程序运行之前就<strong>已经编译</strong>完成 。</p></blockquote><p>然而动态代理，代理类<strong>并不是在Java代码中定义</strong>的，而是在运行时根据我们在Java代码中的“指示”<strong>动态生成</strong>“的 。</p><ul><li><p><strong>优点</strong>： 可以很方便的对代理类的函数进行统一的处理，<strong>而不用修改每个代理类中的方法</strong>。 比如说，想要在每个代理的方法前<u>都加上</u>一个处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveMoney</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">        <span class="comment">//调用被代理方法前加入处理方法</span></span><br><span class="line">        beforeMethod();</span><br><span class="line">        stu.giveMoney();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 代理类其它方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveHomework</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">//调用被代理方法前加入处理方法</span></span><br><span class="line">        beforeMethod();</span><br><span class="line">        stu.giveHomework();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>除了giveMonney还有很多其他的方法（giveHomework），那就需要写很多次beforeMethod方法，麻烦。</p></li><li><p><strong>简单实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//创建一个与代理对象相关联的InvocationHandler</span></span><br><span class="line">  InvocationHandler stuHandler = <span class="keyword">new</span> MyInvocationHandler&lt;Person&gt;(stu);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个代理对象stuProxy，代理对象的每个执行方法都会替换执行Invocation中的invoke方法</span></span><br><span class="line">  Person stuProxy= (Person) Proxy.newProxyInstance(Person.class.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[]&#123;Person.class&#125;, stuHandler);</span><br></pre></td></tr></table></figure></li><li><p><strong>公共Person接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//上交班费</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">giveMoney</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Student实现Person接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//假设数钱花了一秒时间</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">       System.out.println(name + <span class="string">&quot;上交班费50元&quot;</span>);</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>增加一个计算方法执行时间的检测方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MonitorUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tl.set(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结束时打印耗时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(String methodName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> finishTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(methodName + <span class="string">&quot;方法耗时&quot;</span> + (finishTime - tl.get()) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>StuInvocationHandler 实现 InvocationHandler接口</strong></p><blockquote><p>并没有像之前一样：用一个代理类 StudentsProxy实现公共<strong>Person</strong>接口，而是代理类StuInvocationHandler 实现<strong>InvocationHandler</strong>接口。</p><p>但二者<strong>都是持有被代理的对象Student引用</strong>。</p></blockquote><p>InvocationHandler中有一个invoke方法，所有执行代理对象的方法都会被替换成执行invoke方法。</p><ul><li>通过<strong>反射</strong>，可以执行被代理对象Student的相应方法giveMoney()。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StuInvocationHandler</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">   <span class="comment">//invocationHandler持有的被代理对象</span></span><br><span class="line">    T target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StuInvocationHandler</span><span class="params">(T target)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * proxy:代表动态代理对象</span></span><br><span class="line"><span class="comment">     * method：代表正在执行的方法</span></span><br><span class="line"><span class="comment">     * args：代表调用目标方法时传入的实参</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理执行&quot;</span> +method.getName() + <span class="string">&quot;方法&quot;</span>);</span><br><span class="line">     */   </span><br><span class="line">        <span class="comment">//代理过程中插入监测方法,计算该方法耗时</span></span><br><span class="line">        MonitorUtil.start();</span><br><span class="line">        <span class="comment">// 原来的代理对象Student中的方法</span></span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        MonitorUtil.finish(method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>具体实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个实例对象，这个对象是被代理的对象</span></span><br><span class="line">        Person zhangsan = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个与代理对象相关联的InvocationHandler</span></span><br><span class="line">        InvocationHandler stuHandler = <span class="keyword">new</span> StuInvocationHandler&lt;Person&gt;(zhangsan);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个代理对象stuProxy来代理zhangsan，代理对象的每个执行方法都会替换执行Invocation中的invoke方法</span></span><br><span class="line">        Person stuProxy = (Person) Proxy.newProxyInstance(Person.class.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[]&#123;Person.class&#125;, stuHandler)；</span><br><span class="line"></span><br><span class="line">       <span class="comment">//代理执行上交班费的方法</span></span><br><span class="line">        stuProxy.giveMoney();</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/26/bIVRJdO5vKX36nQ.jpg" alt="img"></p></li></ul><h5 id="2-3-动态代理的原理">2.3 动态代理的原理</h5><p>从 JVM 角度来说，动态代理是在运行时<u>，通过<strong>反射</strong>动态生成类<strong>字节码</strong>，</u>并加载到 JVM 中的。</p><h4 id="3-如何利用反射创建一个对象？">3. 如何利用反射创建一个对象？</h4><p>过程如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 得到Stu类的运行时Class描述符</span></span><br><span class="line">            <span class="comment">//简单理解为你现在有了这个类，可以调用相应的方法进行实例化了</span></span><br><span class="line">            Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;Stu&quot;</span>);</span><br><span class="line">            <span class="comment">//2.从getDeclaredConstructor()的字面意思就能理解，得到所有声明的构造器</span></span><br><span class="line">            <span class="comment">//这里得到的是所有声明的构造器，getConstructor()则只能得到被public修饰的构造器</span></span><br><span class="line">            Constructor&lt;?&gt; declaredConstructor = stu.getDeclaredConstructor(<span class="keyword">new</span> Class[]&#123;String.class, <span class="keyword">int</span>.class&#125;);</span><br><span class="line">            <span class="comment">//3. 使用newInstance()方法创建对象并传入参数</span></span><br><span class="line">            <span class="comment">//简单的理解为Stu o = new Stu(&quot;zhangsan&quot;, 01)</span></span><br><span class="line">            Stu o = (Stu) declaredConstructor.newInstance(<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;zhangsan&quot;</span>, <span class="number">01</span>&#125;);</span><br><span class="line">            <span class="comment">//4.调用Stu这个类里面的方法</span></span><br><span class="line">            <span class="comment">// getDeclaredMethod()方法能调用到所有声明的方法</span></span><br><span class="line">            Method method = stu.getDeclaredMethod(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line">            <span class="comment">//5. 简单的理解为o.toStirng()</span></span><br><span class="line">            String invoke = (String)method.invoke(o, <span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">            System.out.println(invoke);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（一）_Java_Java入门</title>
      <link href="/p/51787/"/>
      <url>/p/51787/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我的校招记录：<a href="https://www.hwh.zone/p/29708/">校招笔记（零）_写在前面</a> ，以下是校招笔记总目录。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><h2 id="1-1-JAVA入门">1.1  JAVA入门</h2><h3 id="1-1-1-JAVA基本">1.1.1 JAVA基本</h3><h4 id="1-介绍一下JVM-JRE-JDK？-JAVA语言有什么特点？">1.<strong>介绍一下JVM&amp;JRE&amp;JDK？</strong> JAVA语言有什么特点？</h4><ul><li><strong>JVM&amp;JRE&amp;JDK</strong><ul><li><strong>JVM:</strong>  即java虚拟机，针对不同操作系统，JVM把Java代码翻译成<u>对应操作系统可以识别的内容，实现跨平台</u> ；</li><li><strong>JRE</strong> : <u>JVM + 核心类库 = JRE</u> ， 即Java运行时环境。只有JVM不能运行，它还<strong>需要核心类库，才能保证Java运行</strong> ；</li><li><strong>JDK:</strong> <u>JRE + <strong>java开发工具</strong>（编译器等) = JDK</u> ，Java开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具。</li></ul></li><li><strong>Java语言特点</strong><ol><li><p>简单易学；</p></li><li><p>面向对象（封装，继承，多态）；</p></li><li><p><strong>平台无关性</strong>（ Java 虚拟机实现平台无关性）；</p></li><li><p>可靠性；</p></li><li><p>安全性；</p></li><li><p><strong>支持多线程</strong>（ <u>C++ 语⾔没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计</u>，而 Java 语⾔却提供了多线程支持）；</p></li></ol></li></ul><h4 id="2-什么是Java虚拟机？为什么Java被称为平台无关的编程语言？">2.<strong>什么是Java虚拟机？为什么Java被称为平台无关的编程语言</strong>？</h4><p><img src="https://i.loli.net/2021/05/12/b4HUYmVo6P5uFCi.png" alt="image-20210512104311616"></p><ul><li><p>java虚拟机，是<strong>执行字节码文件（.class</strong>）的<u>虚拟机进程</u>；</p><blockquote><p>在 Java 中，<strong>JVM 可以理解的代码就叫做 字节码</strong> （即扩展名为 .class 的⽂件），它不面向任 何特定的处理器，<strong>只面向虚拟机</strong>。</p></blockquote></li><li><p>java源程序（.java）被编译器编译成字节码文件（.class）。然后字节码文件，将由<u>java虚拟机，解释成机器码（<strong>不同平台的机器码不同</strong>）</u>。</p></li></ul><h4 id="3-请你谈谈Java中是如何支持正则表达式操作的？（补充实例）">3. 请你谈谈Java中是如何支持正则表达式操作的？（补充实例）</h4><p>Java中的String类提供了支持正则表达式操作的方法，包括：</p><ul><li><code>matches()、replaceAll()、replaceFirst()、split()</code></li></ul><p>此外，Java中可以用Pattern类表示正则表达式对象，它提供了丰富的API进行各种正则表达式操作，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegExpTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;成都市(成华区)(武侯区)(高新区)&quot;</span>;</span><br><span class="line">        Pattern p = Pattern.compile(<span class="string">&quot;.*?(?=\\()&quot;</span>);</span><br><span class="line">        Matcher m = p.matcher(str);</span><br><span class="line">        <span class="keyword">if</span>(m.find()) &#123;</span><br><span class="line">            System.out.println(m.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实例示范（PCG问过）">实例示范（PCG问过）</h5><blockquote><p>参考：<a href="https://www.runoob.com/regexp/regexp-syntax.html">https://www.runoob.com/regexp/regexp-syntax.html</a></p></blockquote><ul><li><p><strong>特殊字符</strong></p><img src="https://i.loli.net/2021/05/12/9IBVheAOz5aGnxC.png" alt="image-20210512110705420" style="zoom:80%;" /></li><li><p><strong>普通字符</strong></p><p><img src="https://i.loli.net/2021/05/12/QcjTKqEJZwx7LdM.png" alt="image-20210512111050519"></p></li><li><p><strong>实例示范</strong></p><ol><li><p>匹配邮箱</p><p><img src="https://i.loli.net/2021/05/12/Lvo56GHie2Qqla1.png" alt="img"></p></li><li><p>匹配电话号码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配电话号码</span></span><br><span class="line">String phone = <span class="string">&quot;18637866964&quot;</span>;</span><br><span class="line">String reg = <span class="string">&quot;^1[3,5,7,8,9]\\d&#123;9&#125;$&quot;</span>;</span><br><span class="line">System.out.println(phone.matches(reg));</span><br></pre></td></tr></table></figure></li><li><p>匹配第一个出现的数字</p><p>下面好像是不对的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String phone = <span class="string">&quot;avss1sdp22&quot;</span>;</span><br><span class="line">String reg = <span class="string">&quot;\d?&quot;</span>;</span><br><span class="line">System.out.println(phone.matches(reg));</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="4-（补充例子）请你简单描述一下正则表达式及其用途。">4.<strong>（补充例子）请你简单描述一下正则表达式及其用途</strong>。</h4><p>在编写处理字符串的程序时，经常会有查找 <u>符合某些复杂规则的字符串</u> 的需要。</p><ul><li>计算机处理的信息更多的时候不是数值而是字符串，正则表达式就是在进行字符串匹配和处理的时候最为强大的工具；</li><li>绝大多数语言都提供了对正则表达式的支持。</li></ul><h4 id="5-和-区分？">5.<strong>&amp;和&amp;&amp;区分？</strong></h4><ul><li><strong>共同点</strong>：都要求运算符左右两端的布尔值 <u>都是true</u> 整个表达式的值才是true</li><li>区别：&amp;&amp;之称为短路运算，<u>如果&amp;&amp;左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算</u>。 好处：<ul><li><em>e.g.</em> ：右边判别式有如果有空指针<code>NullPointerException</code>异常判断风险，可以避免。</li></ul></li></ul><h4 id="6-值传递和引用传递区分？">6.<strong>值传递和引用传递区分？</strong></h4><ul><li><p>值传递是<strong>该变量</strong>的一个<u>副本</u>， 改变副本<u>不影响</u>原变量；</p></li><li><p>引用传递是<strong>对象地址</strong>的<u>副本</u>，引用对象进行操作会同时<u>改变</u>原对象。</p></li></ul><h4 id="7-十进制与二进制？">7.<strong>十进制与二进制？</strong></h4><ul><li><p><strong>请你讲讲一个十进制的数在内存中是怎么存的？</strong></p><p>补码形式。</p></li><li><p><strong>为什么会出现4.0-3.6=0.40000001这种现象？</strong></p><p>2进制的小数无法精确的表达10进制小数，计算机在 <u>计算10进制小数的过程中要先转换为2进制进行计算</u> ，这个过程中出现了误差。</p></li></ul><h4 id="8-（重要）equals与-的区别">8.<strong>（重要）equals与==的区别</strong></h4><blockquote><p>很清晰严谨的一篇文章：<a href="https://www.cnblogs.com/skywang12345/p/3324958.html">https://www.cnblogs.com/skywang12345/p/3324958.html</a></p></blockquote><ul><li><p><strong>==</strong></p><ol><li>基本类型：比较的是值是否相同；</li><li>引用类型：比较的是<strong>引用（对象地址</strong>）是否相同；</li></ol></li><li><p><strong>equals</strong></p><p>要看<strong>类是否覆盖equals()方法</strong>，将它分为两种情况：</p><ol><li><p>若某个类没有覆盖equals()方法，当它的通过<strong>equals()比较两个对象</strong>时，实际上是比较两个对象（地址）是不是同一个对象。这时，<u>等价于通过“==”去比较这两个对象</u>；</p></li><li><p>我们可以覆盖类的equals()方法，来让equals()通过其它方式比较两个对象的内容（<strong>而不是地址</strong>）是否相等。</p><blockquote><p>String 中的 equals 方法是被重写过的：</p><ul><li>因为 object 的 equals 方法是⽐教的对象的内存地址</li><li>而 <strong>String 的 equals 方法（1）先比较对象地址是否相等 ，相同则ture，否则（2）再比较值是否相等</strong></li></ul></blockquote></li></ol></li></ul><h4 id="7-请解释hashCode-和equals-方法有什么联系？">7.<strong>请解释hashCode()和equals()方法有什么联系？</strong></h4><blockquote><p>面试官可能会问你：“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode方法？”</p><ul><li>建议看文中例子理解：<a href="https://www.cnblogs.com/skywang12345/p/3324958.html">https://www.cnblogs.com/skywang12345/p/3324958.html</a></li></ul></blockquote><ul><li><p><strong>hashCode()介绍</strong></p><p>hashCode() 的作用是<strong>获取哈希码</strong>，也称为散列码；它实际上是返回一个int整数。这个<strong>哈希码的作用</strong>是确定该 <u>对象在哈希表中的索引位置</u>。</p><blockquote><p>我们仅在HashSet, Hashtable, HashMap等等这些本质是散列表的数据结构中，用到该类。  其它情况下hashCode() 则根本没有任何作用，所以，不用理会hashCode()。</p><ul><li>在这种情况下对象相等，hashcode值也会不相等。</li></ul></blockquote></li><li><p><strong>为什么要有hashcode()</strong></p><p>hashCode() 的作用就是<strong>获取哈希码</strong>，也称为散列码；它实际上是返回⼀个 int整数。这个<strong>哈希码的作用</strong>是确定该对象在哈希表中的索引位置。 <strong>hashCode()</strong><u>在散列表中</u>才有用，在其它情况下没用。在散列表中 hashCode() 的作用是获取对象的散列码，进而确定该对象在散列表中的位置。</p><p><strong>先判断hashcode，而不是直接遍历O(n)复杂度用equals()判断，减少判断时间</strong>。</p><blockquote><p><strong>如果hashcode一样，会调用equals()去比较</strong>。</p><ul><li><strong>HashSet</strong> 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 equals() 方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加⼊操作成功。如果不同的话，就会重新散列到其他位置。</li></ul></blockquote></li></ul><h5 id="7-1-为什么重写了equals-一定要重写hashcode-方法？">7.1 为什么重写了equals()一定要重写hashcode()方法？</h5><blockquote><p>参考：<a href="https://blog.csdn.net/xyh269/article/details/69171545">为什么重写了equals()，还要重写hashCode()？</a></p></blockquote><p>在Hashmap / Hashset中，通过计算hash = hash(key.hashcode) 然后进行取余操作，快速定位到数组中。</p><p>因为<strong>map中是不允许重复key</strong>的，所以对内部get()/add()方法：对于散列到数组同一位置的对象来说，<strong>如果hash相等 &amp;&amp; equals()判断相等</strong> ，是要进行<strong>覆盖</strong>的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用 equals 方法判断key是否相等，若相等，该key对应的键值对已经存在，用新的value取代旧的value</span></span><br><span class="line">           <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;    </span><br></pre></td></tr></table></figure><p>如果我们只重写了equals方法：用来判断两个对象是否相等。但是依旧可能出现：两个相同对象<strong>equals相等，但hashcode不等，被散列到不同桶上，map中依旧出现了重复键值对！</strong></p><p><img src="https://i.loli.net/2021/05/26/v5aHJGt8qErx6P9.png" alt="hashcode"></p><p>所以，需要重写hashcode方法，保证<strong>相同对象一定是散列到同一个位置（具有同样的hash值）</strong>。</p><h5 id="7-2-两个对象值相同-x-equals-y-true-，但却可有不同的hash-code，该说法是否正确，为什么？">7.2 <strong>两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，该说法是否正确，为什么</strong>？</h5><p>不一定正确，<u>如果在HashSet, Hashtable, HashMap等等这些本质是散列表的数据结构中</u>，两个对象x和y满足x.equals(y) == true，它们的哈希码（hash code）应当相同。</p><p>其它情况下可能会出现题目描述的情况。</p><h4 id="8-自动拆箱和装箱？">8. 自动拆箱和装箱？</h4><h5 id="8-1-介绍一下int-Integer？">8.1 <strong>介绍一下int&amp;Integer？</strong></h5><p>Java为了编程的方便还是引入了基本数据类型，但是 <u>为了能够将这些基本数据类型当成对象操作</u>，Java为每一个基本数据类型都引入了对应的<strong>包装类型</strong>（wrapper class）</p><ul><li><p>int的包装类就是Integer，从Java 5开始引入了自动装箱/拆箱机制，使得二者可以相互转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// e.g. </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        Integer a = <span class="keyword">new</span> Integer(<span class="number">3</span>);</span><br><span class="line">        Integer b = <span class="number">3</span>;          <span class="comment">// 将3自动装箱成Integer类型</span></span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// false 两个引用没有引用同一对象</span></span><br><span class="line">        System.out.println(a == b);  </span><br><span class="line">        <span class="comment">// true a自动拆箱成int类型再和c比较</span></span><br><span class="line">        System.out.println(a == c);  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>Java 为<u>每个原始类型</u>提供了包装类型：</p><ul><li>（<strong>8种基本类型</strong>）原始类型: boolean，char，byte，short，int，long，float，double</li><li>包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double</li></ul></li></ul><h5 id="8-2-拆箱、装箱存在的意义？">8.2 <strong>拆箱、装箱存在的意义？</strong></h5><blockquote><p>为什么要有装箱、拆箱，它们的作用是什么？</p></blockquote><p><em>java</em> 是 面对对象编程，而基本数据类型不是对象，<strong>所有才有封装类 引用基本数据类型进行操作</strong>。比如，下面打印出<em>int</em>型数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>； </span><br><span class="line">System.out.println(i); <span class="comment">// 自动装箱</span></span><br></pre></td></tr></table></figure><p>其实，查看源码，实际经过以下几个过程：</p><ul><li>将 <em>i</em> 自动装箱成封装类 <em>Integer</em></li><li>然后调用 <em>Integer</em>中 <em>toString</em>() 方法，打印出字符串输出到控制台。</li></ul><blockquote><p>自动装箱和拆箱？</p></blockquote><ul><li>自动装箱：就是自动将基本数据类型转换为包装器类型</li><li>自动拆箱：就是自动将包装器类型转换为基本数据类型</li></ul><h5 id="8-3-char和byte的区别-，-能否强制转换？">8.3 char和byte的区别 ， 能否强制转换？</h5><p>区别：</p><ul><li>Char是无符号型的，可以表示一个整数，不能表示负数，大小范围 是0—65535；而byte是有符号型的，可以表示-128—127 的数</li><li>char可以表中英文字符，byte不可以</li></ul><p>强制转换：</p><p>可以，但是会出现精度丢失。</p><h4 id="9-String-StringBuffer-StringBuilder-区别？为什么String不可变">9.  String &amp; StringBuffer&amp; StringBuilder 区别？为什么String不可变?</h4><ul><li><p><strong>请解释String &amp; StringBuffer区别？</strong></p><ul><li><p><strong>共同点</strong>：它们可以<strong>储存和操作</strong>字符串，即包含多个字符的字符数据；</p></li><li><p><strong>可否修改</strong>：String类提供了数值不可改变的字符，StringBuffer可以修改字符串，需要 <u>字符数据要改变</u> 时用。</p></li></ul><p>典型地，你可以使用StringBuffers来动态构造字符数据。</p></li><li><p><strong>请解释 StringBuilder&amp; StringBuffer 区别？</strong></p><ul><li><p><strong>共同点</strong>：<code>AbstractStringBuilder</code> 是 StringBuilder 与 StringBuffer 的公共⽗类。都可以修<u>改字符串，操作字符串方法丰富</u>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">CharSequence</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The value is used for character storage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">char</span>[] value;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The count is the number of characters used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">int</span> count;</span><br><span class="line"> AbstractStringBuilder(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line"> value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><u><strong>线程安全</strong>：</u>单线程且操作大量字符串用StringBuilder,速度快，但线程不安全，可修改；在多线程且操作大量字符串用<strong>StringBuffer，线程安全，可修改</strong>。</p><blockquote><p>StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。</p></blockquote></li></ul></li><li><p><strong>为什么String 不可变？</strong></p><p>String 类中使用 final 关键字修饰字符数组来保存字符串， 所以 String 对象是不可变的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[]</span><br></pre></td></tr></table></figure></li></ul><h4 id="10-说说深拷贝和浅拷贝？">10.<strong>说说深拷贝和浅拷贝</strong>？</h4><ul><li><p>浅拷贝（shallowCopy）只是增加了一个指针指向已存在的内存地址；</p><blockquote><p>因此，可能会出现出现浅拷贝时释放同一个内存的错误。</p></blockquote></li><li><p>深拷贝（deepCopy）是增加了一个指针<strong>并且申请了一个新的内存</strong>，使这个增加的指针指向这个新的内存。</p></li></ul><h4 id="11-【新增】介绍一下JDK1-8的新特性？">11. 【新增】介绍一下JDK1.8的新特性？</h4><p>JDK1.8新增了非常多的特性，如：</p><ul><li><strong>Lambda表达式</strong>：Lambda允许把函数作为一个方法的参数（函数作为参数传递到方法中）。</li><li><strong>方法引用</strong>：方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</li><li><strong>默认方法</strong>：默认方法就是一个<strong>在接口里面有了一个实现的方法</strong>。</li><li><strong>新工具</strong>：新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。</li><li><strong>Stream API</strong>：新添加的Stream API（java.util.stream） 把真正的<strong>函数式编程风格</strong>引入到Java中。</li><li><strong>Date Time API</strong>：加强对日期与时间的处理。</li><li><strong>Optional类</strong>：Optional 类已经成为 Java 8 类库的一部分，用来解决<strong>空指针异常</strong>。</li><li><strong>Nashorn，JavaScript引擎</strong>：JDK1.8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</li></ul><h4 id="12-【新增】java一个程序能不能有多个main方法？一个类里呢？">12. 【新增】java一个程序能不能有多个main方法？一个类里呢？</h4><ul><li><p><strong>一个程序里，多个class都有main方法</strong></p><p>可以，默认第一个为入口，其余为普通函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>一个类有多个main方法</strong></p><p>可以，其余就相当是重载。但是具有以下sigature（签名）的主要方法将被视为app入口点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-1-2-关键字">1.1.2 关键字</h3><h4 id="1-请你讲讲Java里面的final关键字是怎么用的？">1.<strong>请你讲讲Java里面的final关键字是怎么用的</strong>？</h4><ul><li><p><strong>修饰类</strong>：表示不能被继承，final类 <u>成员变量</u> 可以设为final；但final类<u>所有方法</u> ，都被隐式指定为final方法；</p></li><li><p><strong>修饰方法</strong>：防任何继承类修改它的含义 ； 在早期的Java实现版本中，会将final方法转为内嵌调用，效率会更高；</p></li><li><p><strong>修饰变量、引用</strong>：<u>基本类型</u>的话一旦初始化不能修改；<u>引用类型</u>，不能指定其他对象 。</p></li></ul><h4 id="2-【重点】请你谈谈关于Synchronized和lock-？">2. 【<strong>重点</strong>】请你谈谈关于Synchronized和lock ？</h4><ul><li><p><strong>Synchronized</strong>：是一个关键字，修饰<u>类、方法 </u> 或 <u>代码块</u> ，保证在同一时刻最<strong>多只有一个线程</strong>执行该段代码；</p><blockquote><p>作用范围：</p><ol><li>修饰一个类/静态方法，<strong>作用的对象是这个类的所有对象</strong>。</li><li>修饰一个方法/代码块，<strong>作用的对象是调用这个方法/代码块的对象</strong>。</li></ol></blockquote></li><li><p>Lock：<strong>是一个接口</strong>，Lock能完成synchronized所实现的所有功能。</p><blockquote><p>Lock接口是不能直接实例化的，需要靠它的实现类ReentrantLock来进行实例化。</p></blockquote><ul><li><p>区别：</p><ul><li><u>锁释放：</u><strong>synchronized在发生异常时，会自动释放线程占有的锁</strong>，因此不会导致死锁现象发生；Lock不会主动适应 <code>unLock()</code> 释放，必须手动在f<code>inally</code>释放。；</li><li><u>线程等待：</u> <u>Lock可以让<strong>等待锁的线程可以响应中断</strong></u>，线程可以中断去干别的事务；而synchronized却不行，使用synchronized时，等待的线程会一直等待下去；</li><li><u>成功获取锁：</u> 通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。</li></ul></li></ul></li></ul><h4 id="3-instanceof关键字的作用？">3. <strong>instanceof</strong>关键字的作用？</h4><p>instanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">System.out.println(i <span class="keyword">instanceof</span> Integer);<span class="comment">//编译不通过 i必须是引用类型，不能是基本类型</span></span><br><span class="line">System.out.println(i <span class="keyword">instanceof</span> Object);<span class="comment">//编译不通过</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer integer = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">System.out.println(integer <span class="keyword">instanceof</span> Integer);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="4-final有哪些用法">4. <strong>final有哪些用法?</strong></h4><ul><li><p>被final修饰的类不可以被继承 ；</p></li><li><p>被final修饰的方法<strong>不可以被重写</strong>，<u>而且JVM会尝试将其内联，以提高运行效率</u>；</p></li><li><p>被final修饰的<u>变量</u>不可以被改变；</p><ul><li><p>被final修饰的<u>引用</u>，那么表示引用不可变，<u>引用指向的内容可变</u>；</p></li><li><p>被final修饰的<u>常量</u>，在编译阶段会存入常量池中。</p></li></ul></li></ul><h4 id="5-static都有哪些用法">5. <strong>static都有哪些用法 ?</strong></h4><ul><li><p><strong>修饰静态变量和静态方法</strong> ：都属于类的静态资源，类实例所共享 ；</p></li><li><p><strong>修饰静态块</strong>：用于初始化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> calss PreCache&#123;</span><br><span class="line"> <span class="keyword">static</span>&#123;</span><br><span class="line"> <span class="comment">//执行相关操作</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>修饰静态包</strong>：在JDK 1.5之后引入的新特性,可以用来指定导入某个类中的静态资源,并且<strong>不需要使用类名,<strong>可以直接</strong>使用方法名</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(Math.sin(20));传统做法</span></span><br><span class="line">        System.out.println(sin(<span class="number">20</span>));</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-谈一谈transient关键字？">6. 谈一谈transient关键字？</h4><blockquote><p><strong>参考</strong> : <a href="https://www.cnblogs.com/chenpi/p/6185773.html">Java中的关键字 transient</a></p></blockquote><ul><li><p><strong>Java中序列化操作</strong></p><p>Java中对象的序列化指的是将<strong>对象转换成以【字节序列】的形式来表示</strong>，这些字节序列<strong>包含了对象的数据和信息</strong>。</p><blockquote><p>当然，序列化后的最终目的是为了反序列化，恢复成原先的Java对象，要不然序列化后干嘛呢，所以序列化后的字节序列都是可以恢复成Java对象的，这个过程就是反序列化。</p></blockquote><ul><li><u>一个序列化后的对象可以<strong>被写到数据库或文件</strong>中</u>，也可用于<strong>网络传输</strong>，一般当我们使用缓存cache（内存空间不够有可能会本地存储到硬盘）或远程调用rpc（网络传输）的时候，经常需要让我们的实体类实现Serializable接口，目的就是为了让其可序列化。</li></ul></li><li><p><strong>关于transient关键字</strong></p><p>Java中transient关键字的作用，向虚拟机表明: <strong><code>transient</code>变量不是对象的<u>持久状态</u>的一部分</strong>。</p><p>简单地说，就是让某些被修饰的成员属性变量不被序列化，例如：</p><ol><li><p>类中的字段值可以根据其它字段推导出来，如一个长方形类有三个属性：长度、宽度、面积（示例而已，一般不会这样设计），那么在序列化的时候，面积这个属性就没必要被序列化了；</p></li><li><p>其它，看具体业务需求吧，哪些字段不想被序列化；</p></li></ol></li></ul><h5 id="7-1-HashMap中源码modCount为什么用tranisent修饰？">7.1 HashMap中源码modCount为什么用tranisent修饰？</h5><p>modCount主要用于判断HashMap是否被修改（像put、remove操作的时候，modCount都会自增）。</p><p>对于这种变量，一开始可以为任何值，0当然也是可以（new出来、反序列化出来、或者克隆clone出来的时候都是为0的），没必要持久化其值。</p><h3 id="1-1-3-Java异常">1.1.3 Java异常</h3><h4 id="1-Java常见异常和分类？">1. Java常见异常和分类？</h4><p><img src="https://i.loli.net/2021/05/26/1ctoGfDdrj6Wapv.png" alt="Java异常的分类和类结构图1"></p><p>常见分为两类，Error和Exception ：</p><ul><li><strong>Error</strong> ：指程序无法恢复的异常情况，对于其所有类型，都不要求程序处理。<ul><li>常见错误：Stackoverflow，outOfMemory</li></ul></li><li><strong>Exception：</strong> 程序有可能恢复的错误，又分为IOException &amp; RuntimeException ，常见错误：<ul><li><strong>IOException</strong>：FileNotFoundExcepetion</li><li><strong>RuntimeException</strong>  : 空指针，参数不合法，类未找到等</li></ul></li></ul><h4 id="2-OOM产生原因和分析？">2. OOM产生原因和分析？</h4><blockquote><p>OOM，全称“Out Of Memory”，翻译成中文就是“内存用完了”，来源于java.lang.OutOfMemoryError 。</p></blockquote><ol><li><p><strong>java.lang.OutOfMemoryError: Java heap space</strong> （堆溢出）</p><ul><li><p><strong>产生原因</strong></p><ol><li><strong>内存泄漏</strong>；</li><li>堆分配太小；</li></ol></li><li><p><strong>解决办法</strong></p><ol><li><strong>内存泄漏要手动去释放内存</strong>，比如数据库连接池，单例模式</li><li>通过虚拟机参数<code>-Xms,-Xmx</code>等修改，对内存大小</li></ol></li></ul></li><li><p><strong>java.lang.OutOfMemoryError: PermGen space</strong> （永久代（方法区）溢出）</p><ul><li><p><strong>产生原因</strong></p><p>即方法区溢出了：</p><ol><li>一般出现于大量Class或者jsp页面，或者采用cglib等反射机制的情况，因为上述情况会产生<strong>大量的Class信息存储于方法区</strong> ；</li><li><strong>过多的常量</strong>尤其是字符串也会导致方法区溢出。</li></ol></li><li><p><strong>解决办法</strong></p><ol><li>永久代的内存分配增大 ：-XX:PermSize和-XX:MaxPermSize</li></ol></li></ul></li><li><p><strong>java.lang.StackOverflowError ------&gt; 不会抛OOM error，但也是比较常见的Java内存溢出</strong>。</p><p>线程栈相关的内存异常有两个：</p><ul><li>StackOverflowError(方法调用层次太深，内存不够新建栈帧)</li><li>OutOfMemoryError（线程太多，内存不够新建线程）</li></ul></li><li><p><strong>java.lang.OutOfMemoryError: Metaspace</strong></p><blockquote><p>Java中<strong>普通I/O</strong>采用<strong>输入/输出流</strong>方式实现，输入流InputStream（  终端—&gt;直接内存-&gt;JVM），输出流（JVM-&gt;直接内存-&gt;终端），这一过程中有kenel与JVM之间的拷贝（很多次）。</p></blockquote><p>为了使用<strong>直接内存</strong>，Java是有一块区域叫<strong>DirectBuffer</strong>，不是JavaHeap而是<strong>cHeap</strong>的一部分。</p><p>但由于直接内存没有被java虚机完全托管，若使用不当，也容易触发溢出，导致宕机。</p></li></ol><h4 id="3-try-catch-finally，try里有return，finally还执行么？"><strong>3. try catch finally，try里有return，finally还执行么</strong>？</h4><p>执行，并且finally的执行早于try里面的return ：</p><ol><li>不管有木有出现异常，finally块中代码都会执行；</li><li>当try和catch中有return时，finally仍然会执行；</li><li>finally是<strong>在return后面的表达式运算后执行</strong>的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以<strong>函数返回值是在finally执行前确定</strong>的。</li></ol><h4 id="4-说说你是怎么处理异常的？">4.<strong>说说你是怎么处理异常的？</strong></h4><p><em><strong>try-catch-finally</strong></em></p><p><img src="https://i.loli.net/2021/05/05/JfavipzFPb6GI2t.png" alt="image-20210505154833171"></p><ul><li><p>try 块负责监控可能出现异常的代码</p></li><li><p>catch 块负责捕获可能出现的异常，并进行处理</p></li><li><p>finally 块负责清理各种资源，不管是否出现异常都会执行</p></li><li><p>其中 try 块是必须的，<strong>catch 和 finally 至少存在一个标准异常处理流程</strong></p></li></ul><h4 id="5-web网页卡怎么排查？cpu100-怎么排查？OOM怎么排查？">5. web网页卡怎么排查？cpu100%怎么排查？OOM怎么排查？</h4><ul><li><p><strong>web网页卡顿</strong></p><ol><li><strong>用户端</strong>：硬件配置低、资源不足；CPU 或者内存资源不足, 比如用户是否使用了 Chrome 这种 “吃内存大户” 的浏览器并且打开了很多网页?</li><li><strong>网络分析</strong>：<strong>DNS 解析慢</strong>；<strong>未设置 CDN</strong>，如果没有设置 CDN, 在跨线路访问(比如用户是铁通, 但是服务器部署在联通, 这种情况就是跨线路), 地理位置相差很远 等情况 ；用户端的带宽不足或所处环境网络不佳；</li><li><strong>服务端</strong>：服务端响应慢，性能比较差 。</li></ol></li><li><p><strong>cpu100%</strong></p><blockquote><p>参考：<a href="https://www.cnblogs.com/dennyzhangdd/p/11585971.html">https://www.cnblogs.com/dennyzhangdd/p/11585971.html</a></p></blockquote><ol><li><p><strong>执行<code>top</code>命令</strong>：查看所有进程占系统CPU的排序；</p><blockquote><p>极大可能排第一个的就是咱们的java进程（COMMAND列）。PID那一列就是进程号。</p></blockquote></li><li><p>执行<strong>top -Hp 进程号</strong>命令：查看java进程下的<strong>所有线程占CPU的情况</strong>；</p></li><li><p>执行<strong>printf &quot;%x\n 10</strong>命令 ：后续查看线程堆栈信息展示的都是十六进制，为了找到咱们的线程堆栈信息，咱们需要把线程号转成16进制。</p></li><li><p>执行<strong>jstack 进程号 | grep 线程ID” 查找某进程下</strong>–&gt;<code>线程ID(jstack堆栈信息中的nid)=0xa</code>的<strong>线程状态</strong>。</p><p>代码中有大量消耗CPU的操作，导致CPU过高，系统运行缓慢：</p><blockquote><ol><li><p>jstack，可直接定位到代码行。例如某些复杂算法，甚至算法BUG，无限循环递归等等。</p></li><li><p>如果有死锁，会直接提示关键字：deadlock。步骤4，会打印出业务死锁的位置。</p></li></ol></blockquote></li><li><p>执行<strong>jstat -gcutil 进程号</strong> 统计间隔毫秒 统计次数（缺省代表一致统计）”，<strong>查看某进程GC持续变化情况</strong>，<strong>如果发现返回中FGC很大且一直增大–&gt;确认Full GC!</strong></p><p>也可以使用“<strong>jmap -heap 进程ID”查看一下进程的堆内从是不是要溢出了</strong>，特别是老年代内从使用情况一般是达到阈值(具体看垃圾回收器和启动时配置的阈值)就会进程Full GC。</p><blockquote><p>jstat命令监控GC情况，可以看到Full GC次数非常多，并且次数在不断增加。</p></blockquote></li><li><p>执行<strong>jmap -dump:format=b,file=filename 进程ID</strong>，导出某进程下内存heap输出到文件中。</p></li></ol></li><li><p><strong>OOM</strong></p><blockquote><p>参考：<a href="https://www.cnblogs.com/valjeanshaw/p/13130102.html">https://www.cnblogs.com/valjeanshaw/p/13130102.html</a></p></blockquote><p>先通过内存映像工具对Dump出来的堆转储快照进行分析，<strong>重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏还是内存溢出</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:format=b,file=$java_pid.hprof     #java_pid为java进程ID</span><br></pre></td></tr></table></figure><p>然后看具体是报什么错：很明显下面是堆溢出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">Dumping heap to oom.out ...</span><br><span class="line">Heap dump file created [3196858 bytes in 0.016 secs]</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">        at java.util.Arrays.copyOf(Arrays.java:3332)</span><br><span class="line">        at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124)</span><br><span class="line">        at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:700)</span><br><span class="line">        at java.lang.StringBuilder.append(StringBuilder.java:214)</span><br><span class="line">        at jvm.OomDemo.main(OomDemo.java:13)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（零）_写在前面</title>
      <link href="/p/29708/"/>
      <url>/p/29708/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>转眼就到了属于我的毕业季，还记得初来学校的期待和兴奋，却从“小师弟”眨眼变成了“老油条”。实习和秋招也算正式告一段落，对于我这种懒蛋，有幸拿到了<u>腾讯</u>、<u>美团</u>、<u>Shoope SG</u>等 <u>后端开发岗</u> offer，勉强算是一个 “happy ending”。找工作是今年我经历的最重要事情之一，同时也想给师弟师妹提供一点帮助，便整理了这份 <u>（互联网）校招笔记</u>。</p></blockquote><h3 id="直入主题">直入主题</h3><p>互联网校招主要形式和考察内容如下：</p><ul><li><p><strong>考察形式</strong></p><p>线上考察，视频面试（大部分公司）或电话面试（阿里等部分公司喜欢这种方式）。</p></li><li><p><strong>考察内容</strong></p><ul><li><p><strong>算法能力</strong></p><p>俗称“刷题”，一般面试都是常见题，理论上刷完<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a>，能做到烂熟于心（指现场<strong>秒背题或模板</strong>），大厂面试一般没有多大问题。</p><p>当然针对心仪公司，可以在面试前<strong>更加针对性</strong>地练习该公司的常出题，这一点上<a href="https://codetop.cc/">codeTop</a>是一个不错的网站。</p></li><li><p><strong>计算机基础</strong></p><p>俗称“八股”，考察范围包含：计算机网络、Linux、数据库、操作系统、常见中间件&amp;框架、智力题等。可以看得到<strong>考察范围非常广</strong>，但是<strong>考察的题目非常固定</strong>。所以只要背熟常见题目问答便能不错地应对面试，这也是该部分内容被称为“八股文”的原因。</p></li><li><p><strong>项目 &amp; 实习</strong></p><p>项目顾名思义，就是实际做的开发项目（如果是算法岗则对应论文）。根据面试经验，一个<strong>好的开源项目</strong>是非常加分的。</p><p>实习通常是指大厂实习，在竞争这么激烈的情况下，如果没有实习，秋招想进入互联网大厂将会变得很困难。</p></li></ul></li></ul><p>根据以上内容，这份校招笔记争取尽量全面覆盖，整个目录安排如下：</p><ul><li>[注1]：本份笔记除自身总结外，主要参考资料来源于<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Java Guide：https://github.com/Snailclimb/JavaGuide">[1]</span></a></sup><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="阿秀C++面试笔记：https://github.com/forthespada/InterviewGuide">[2]</span></a></sup><sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="牛客网面经：https://www.nowcoder.com/interview/center">[3]</span></a></sup>，特此注明。</li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><p>下面是一些奇怪没有脑袋的絮絮叨叨，迫不及待年入百万可以根据上面目录直接开始学习了，以下可略过。</p><h3 id="算法还是后端？">算法还是后端？</h3><blockquote><p>读了个（<s>末流</s>）985硕士，也有篇不错的（<s>水</s>）论文，最后去做了当时本科毕业就能做的开发岗？—《本科同学竟是我的面试官》系列。</p></blockquote><p>如果你和我有一样的困惑和选择，不妨来看看我的经历，也许会有点帮助。在这之前，我们先分析下算法和后端的各自优劣。</p><h4 id="算法-P-K-后端">算法 P.K. 后端</h4><p>在这里我将从，起薪、门槛、竞争强度、未来发展等维度来分析二者优劣。</p><ul><li>[注1]：以下均以一线大厂（腾讯、阿里、字节、美团等）为基准。</li><li>[注2]：CV=Computer Vision，NLP=Natural Language Processing 。</li><li>[注3]：非特别说明，不考虑特例情况。</li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">算法</th><th style="text-align:center">后端</th></tr></thead><tbody><tr><td style="text-align:center"><strong>起薪</strong></td><td style="text-align:center">同级别比后端高：1~2K/月</td><td style="text-align:center">中档薪资：40W+</td></tr><tr><td style="text-align:center"><strong>简历门槛</strong></td><td style="text-align:center">211硕士起</td><td style="text-align:center">211本起（部分知名双非）</td></tr><tr><td style="text-align:center"><strong>竞争强度</strong></td><td style="text-align:center">CV&gt;&gt;搜广推&gt;NLP</td><td style="text-align:center">CV&gt;Java后端&gt;&gt;C++后端&gt;其它</td></tr><tr><td style="text-align:center"><strong>未来发展</strong></td><td style="text-align:center">二者发展相差不大，和个人强相关</td><td style="text-align:center">二者发展相差不大，和个人强相关</td></tr><tr><td style="text-align:center"><strong>其它</strong></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>可以看到，CV竞争强度远大于其它算法岗位，即使和后端中竞争最激烈的<strong>Java后端</strong>相比，也依旧更大。</p><p>在读研期间，我个人研究方向就是CV领域（Object Tracking），有一篇论文（CCF-A，三审）和几篇专利。但是并没有信心去竞争CV相关岗位（学历和论文无优势），也对深度学习产生了迷茫：<u>调参和模型缝补也许并不是我想做的事，虽然有更底层的研究方向但自己的数学基础不够牢靠</u>。</p><p>就这样，带着<strong>七分迷茫三分盲目自信</strong> 的我一股脑扎进Java的苦海。可是<strong>Java后端岗位</strong>的竞争激烈程度远超我想象，实习和秋招一直都在失业边缘疯狂试探。无论是实习还是秋招，最后我接受的Offer都是<strong>C++后端岗位(腾讯)</strong> ，可以说是现实Java小丑了。</p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/b393ec036fd14f3c9d9610f7d0c839ff.png" alt="2021Q1天猫淘宝同比增长达53%，爆发的男士香水市场背后……_品牌" style="zoom:67%;" /><p>现在回头想想，Java后端竞争之所以这么激烈也基本是必然的：互联网的高薪（<s>和996</s>）吸引了大量其它专业转行的同学，而Java相比C++：易上手速成、需求大、生态丰富（<s>培训班一条龙服务</s>），自然是首选。</p><p>那么：<strong>到底是选择Java后端还是C++后端呢?</strong> 这里我也简单分析一下各自优劣，大家可以根据个人情况进行抉择。</p><h4 id="Java后端-P-K-C-后端">Java后端 P.K. C++后端</h4><blockquote><p>一家之言，仅供参考。</p></blockquote><p>在这里我将从，起薪&amp;门槛、岗位需求，竞争强度、未来发展等维度来分析二者优劣。</p><ul><li>[注1]：以下均以一线大厂（腾讯、阿里、字节、美团等）为基准。</li><li>[注2]：非特别说明，不考虑特例情况。</li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><strong>Java后端</strong></th><th style="text-align:center"><strong>C++后端</strong></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>起薪&amp;门槛</strong></td><td style="text-align:center">基本一致</td><td style="text-align:center">基本一致</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>岗位需求</strong></td><td style="text-align:center">非常多</td><td style="text-align:center">一般</td><td style="text-align:center"><strong>今年嵌入式爆热</strong>，C++岗位需求预计会增加</td></tr><tr><td style="text-align:center"><strong>竞争强度</strong></td><td style="text-align:center">非常大，Java&gt;&gt;C++</td><td style="text-align:center">一般</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>未来发展</strong></td><td style="text-align:center">相差不大，和个人相关</td><td style="text-align:center">相差不大，和个人相关</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>其它</strong></td><td style="text-align:center">银行和国企等<strong>养老性质</strong>单位对Java需求比较大，后期职业发展<strong>有更多选择</strong></td><td style="text-align:center">C++岗位需求主要是<strong>大厂</strong>，后期职业发展跳槽<strong>可选较少</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>对口公司</strong></td><td style="text-align:center">阿里、美团等</td><td style="text-align:center">腾讯、百度、华为等</td><td style="text-align:center"></td></tr></tbody></table><p>相信看到这里的聪明你，根据自己的技术倾向、意向公司等已经有了大概的思路：</p><ul><li>想更容易去大厂，做一些更底层（网络、存储、操作系统、安全方面等）的事情，C++自然是不错的选择；</li><li>但是未来考虑去一些养老单位养老，对Web开发、移动开发等更感兴趣的话，Java应该是更好的选择。</li></ul><h3 id="求职时间节点"><strong>求职时间节点</strong></h3><p>整个实习和秋招，由于自己的拖延和懒散，所有的时间节点基本都是在DDL上反复横跳。如果不是运气还不错，现在说不定正在寝室抱着浅蓝色床单哭泣 😭 ，留下不学无术的泪水。</p><p>所以根据自己的经验，整理了一份<strong>我认为</strong>的完美求职时间节点，同时也整理了一份工作小丑时间节点安排，供对比参考。</p><ul><li>[注1]：年份以当年应届求职年份为准。</li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">自律大佬 ⛹</th><th style="text-align:center">工作小丑 😹</th></tr></thead><tbody><tr><td style="text-align:center"><strong>1月份</strong></td><td style="text-align:center">刷完<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a>，准备项目</td><td style="text-align:center">玩</td></tr><tr><td style="text-align:center"><strong>2月份</strong></td><td style="text-align:center">二刷LeetCode，开始背诵八股，优化项目</td><td style="text-align:center">继续玩</td></tr><tr><td style="text-align:center"><strong>3月份</strong></td><td style="text-align:center">八股基本烂熟，开始面试（<strong>找实习</strong>）小试锋芒</td><td style="text-align:center">焦虑的玩</td></tr><tr><td style="text-align:center"><strong>4月份</strong></td><td style="text-align:center">LeetCode和八股烂熟，收获众多大厂实习Offer，赢来工作小丑羡慕的赞叹</td><td style="text-align:center">特别焦虑，开始一边羡慕一边投简历，面试被无情暴打</td></tr><tr><td style="text-align:center"><strong>5月份</strong></td><td style="text-align:center">开始<strong>第一段</strong>大厂实习</td><td style="text-align:center">极度焦虑，开始熬夜准备刷题和八股，继续面试</td></tr><tr><td style="text-align:center"><strong>6月份</strong></td><td style="text-align:center">已实习两个月，同时面试收获了第二个大厂Offer，波澜不惊</td><td style="text-align:center">终于收获Offer，现代范进中举，奔走相告</td></tr><tr><td style="text-align:center"><strong>7月份</strong></td><td style="text-align:center">开始<strong>第二段</strong>大厂实习，开始<strong>提前批</strong></td><td style="text-align:center">实习第一个月，下班就是玩，<strong>提前批那是个啥？</strong></td></tr><tr><td style="text-align:center"><strong>8月份</strong></td><td style="text-align:center">第二段大厂实习二个月，提前批收获校招Offer，同时无意外<strong>转正</strong></td><td style="text-align:center">实习两个月，继续无视提前批，运气好也<strong>转正</strong>了</td></tr><tr><td style="text-align:center"><strong>9月份</strong></td><td style="text-align:center"><code>Offer收割机</code>+<code>SSP收割机</code>称号达成，羡慕听到麻</td><td style="text-align:center">又玩了半个月，开始投简历，捡了几家Offer，彻底躺平</td></tr><tr><td style="text-align:center"><strong>10月份</strong></td><td style="text-align:center">开始准备<strong>选调</strong></td><td style="text-align:center"><code>白菜收割机</code>称号达成，最终无奈选一颗大白菜<strong>结束秋招</strong></td></tr></tbody></table><ul><li><p><strong>关于实习</strong>：可以看到，工作小丑如果不是<strong>运气好转正</strong>，秋招<strong>凭借实习经历（另一方面也说明了实习的重要性</strong>）拿了几个Offer，整个求职过程并不乐观。</p></li><li><p><strong>关于提前批</strong> ：实习的时候<strong>一定要去准备提前批</strong>，提前批<strong>HC众多</strong>（特别是好岗位），<strong>难度也较低（亲身感受）</strong> ，拿到Offer的概率<strong>相比秋招</strong>会大很多。</p></li></ul><p>所以，大家<strong>尽量早点</strong>充分准备，找工作不至于长期处于焦虑状态。拼运气自然不如拼实力，当然也要劳逸结合，有空闲多和师兄打打LOL放松下也是很有必要的 🕹 ，哈哈。</p><h3 id="一些有用的app-网站"><strong>一些有用的app &amp; 网站</strong></h3><blockquote><p>未必全面，仅供参考。</p></blockquote><ul><li>[注1]：各大公司校招官网，比如：<a href="join.qq.com">腾讯校园招聘</a> ，最好先去提前一次性注册好简历。</li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">应用/网站名</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><strong>网站</strong></td><td style="text-align:center"><a href="https://www.nowcoder.com/">牛客网</a></td><td style="text-align:center">找内推、看面经、求职交流等</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://leetcode-cn.com/">Leetcode</a></td><td style="text-align:center">刷题</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://codetop.cc/">codeTop</a></td><td style="text-align:center">刷题</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://www.wondercv.com/">超级简历</a></td><td style="text-align:center">制作简历的不二之选</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://www.hwh.zone">royhuang’s blog</a></td><td style="text-align:center">毛遂自荐，看看八股</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://github.com/">github</a></td><td style="text-align:center">神奇的地方，多在这里找各种资源：面经总结、项目教程等</td></tr><tr><td style="text-align:center"><strong>APP</strong></td><td style="text-align:center">牛客网</td><td style="text-align:center">同上</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">脉脉</td><td style="text-align:center">求职信息交流，国内最大的职场交流APP</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">闲鱼</td><td style="text-align:center">各种教学视频课程，不妨这里先搜一搜</td></tr></tbody></table><p>🔼 以上大概就是我求职所用到的，全部网站或APP，不算多但基本有点用。</p><h3 id="写在最后"><strong>写在最后</strong></h3><p>碎碎念又写了小几K字了，9月底结束秋招时，便想着把自己求职的笔记总结&amp;经历复盘。不知不觉又拖延/玩了两个月，这个星期把网站搞好了也正好顺手开始整理。写到这里，终于有了初步了结，感觉像是De一个大BUG 🐛 ，心情都舒畅了起来。</p><p>后面还会<strong>继续更新没填好的坑</strong>，e.g. 怎么准备一个秋招项目。也会开始记录一些<strong>C++音视频相关方向博文</strong>，和一些生活记录（虽然大部分时间都是无聊地待在寝室或家里）。当然，如果还有什么想要和我说的，可以在下面留言。</p><p>最后，给上我最诚挚的祝福：</p><div align = "center" style="bold"> <h5>“ 明年请务必倒挂我，谢谢。”</h5></div><h3 id="更新记录">更新记录</h3><div class="timeline"><div class="timenode"><div class="meta"><p><p>2021-11-29 ：更新文档</p></p></div><div class="body"><ol><li>更新校招心得记录 &amp; 重新分类整理笔记</li><li>支持评论系统</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-11-24 ：第一次更新</p></p></div><div class="body"><ol><li>上传所有笔记并发布</li></ol></div></div></div> <div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Java Guide：https://github.com/Snailclimb/JavaGuide<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">阿秀C++面试笔记：https://github.com/forthespada/InterviewGuide<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">牛客网面经：https://www.nowcoder.com/interview/center<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校招 </tag>
            
            <tag> 目录 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础笔记（初步整理）</title>
      <link href="/p/43848/"/>
      <url>/p/43848/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="一、Git-简介">一、Git 简介</h2><h3 id="1-1-安装">1.1 安装</h3><ul><li><p>安装地址</p><p>官网下载：<a href="https://git-scm.com/downloads">Git官网下载</a></p></li><li><p>设置用户信息</p><p>主要是设置 ： 名字 &amp; Email 地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;hwh&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;380141202@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p><code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p></li></ul><h3 id="1-2-创建版本库">1.2 创建版本库</h3><ul><li><p>创建仓库</p><p>​       windows可以直接在桌面创建一个名为：&quot;Git&quot;文件夹，下有“test”子文件夹，子文件夹含有一个名为“<a href="http://readme.md">readme.md</a>”文件。</p><p>​       然后切换到其目录下（这里切换的是&quot;Git&quot;文件夹，而非“test”子文件夹）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> Git/</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/c/Users/86151/Desktop/Git</span><br></pre></td></tr></table></figure></li><li><p>初步提交过程</p><ul><li><p>初始化仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/michael/learngit/.git/</span><br></pre></td></tr></table></figure></li><li><p>修改仓库文件</p><p>将“test”子文件夹，下readme.md文件，增加内容。</p></li><li><p>添加文件到仓库</p><p>注意：可以同时 一次添加<strong>多个</strong>文件到仓库！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add <span class="built_in">test</span>/readme.md</span><br></pre></td></tr></table></figure></li><li><p>提交文件</p><p>可以增加m参数：添加修改信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&#x27;第一次文件改动&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="二、时光机穿梭">二、时光机穿梭</h2><h3 id="2-0-更多控制修改提交">2.0 更多控制修改提交</h3><ul><li><p>概览</p><ul><li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li><li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff &lt;filepath&gt;</code>可以查看修改内容。</li></ul></li><li><p>实操</p><ul><li><p>再次修改文件</p><p>可以先清除原文件，再增添readme.md文档内容 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“i am  huitailang , here  is my first test word .“</span><br><span class="line"></span><br><span class="line"> “这是我第二次修改这个文件”</span><br></pre></td></tr></table></figure><p>使用 <code>git status</code>，查看状态发现readme.md文件已被修改但未提交（<strong>no changes</strong>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1560766427962.png" alt="1560766427962"></p></li><li><p>查看具体修改了什么内容</p><p><code>git diff &lt;filepath&gt;</code>查看文件具体修改，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff <span class="built_in">test</span>/readme.md</span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1560766437006.png" alt="1560766437006"></p></li><li><p>添加仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add <span class="built_in">test</span>/readme.md</span><br></pre></td></tr></table></figure><p>同时可用 <code>git status</code>，查看此时状态会显示，readme.md将要被提交修改。</p></li><li><p>提交仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;这是我第二次修改&quot;</span></span><br></pre></td></tr></table></figure><p>​     再用 <code>git status</code>，查看仓库当前状态，显示没有需要提交的修改，而且工作目录是干净的（working tree clean）。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1560766449576.png" alt="1560766449576"></p></li></ul></li></ul><h3 id="2-1-版本回退">2.1 版本回退</h3><ul><li><p>概览</p><ul><li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本</li></ul></li><li><p>实操</p><ul><li><p>N次修改文件</p><p>先多修改几次文件提交，得到多个版本。</p></li><li><p>版本回退</p><ul><li><p>查看版本历史</p><p><code>git log </code>查看当前版本和之前的历史，<code>git relog</code> 查看所有版本历史</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span>  <span class="comment"># 可以加上 --pretty=oneline 参数使显示更简洁</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1560778515569.png" alt="1560778515569"></p></li></ul></li><li><p>回退版本</p><p><code>git reset --hard &lt;指定版本&gt;</code>：可用于回到指定版本，&lt;<strong>指定版本</strong>&gt;方式：</p><ul><li><p>HEAD ^</p><p>HEAD ^ 回到上个版本；HEAD ^ ^  回到上上 个版本，依此类推。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^^  <span class="comment"># 回到上上个版本</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1560779037449.png" alt="1560779037449"></p></li><li><p>HEAD~&lt;数字&gt;</p><p>回到前&lt;数字&gt;版本。如HEAD~100，回到前100个版本。</p></li><li><p><commit ID> :</p><p>commit ID 不用打全，一般打前面几个字符即可。如，如果回退第2版本，<code>git log</code>，只能看到第2版本及之前的版本信息。那么可用 <code>git reflog</code>查看所有版本ID，然后指定ID，回到第4版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1560779323726.png" alt="1560779323726"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 3928d   <span class="comment"># 再次回到第四次修改版本</span></span><br><span class="line">HEAD is now at 3928d9f 第四次修改</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="2-2-工作区和暂存区">2.2 工作区和暂存区</h3><ul><li><p>概览</p><ul><li>理解工作区和暂存区的区别，暂存区是版本库的一个子集</li><li>比较文件有三个不同命令<ul><li>git diff   <filename></li><li>git diff  --cached <filename></li><li>git diff  --HEAD <filename></li></ul></li></ul></li><li><p>工作区</p><p>工作区就是我们能看到的目录，如我前面创建的<code>Git</code>文件夹就是一个工作区</p></li><li><p>版本库 &amp; 暂存区</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/0" alt="git-repo"></p><p>工作区有一个隐藏目录<code>.git</code>，不属于工作区而是Git版本库，版本库包含</p><ul><li><p>Git自动创建的分支<code>master</code>&amp;指向<code>master</code>的指针<code>HEAD</code></p></li><li><p>stage（或叫index）暂存区</p></li></ul></li><li><p>暂存区工作</p><ul><li><p><strong>git add</strong></p><p>这一步实际上就是把文件修改（已存在被修改 OR 新文件）添加到暂存区，可以add多个文件，一次被提交。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/0" alt="git-stage"></p></li><li><p><strong>git commit</strong></p><p>把暂存区的<strong>所有</strong>内容提交到当前分支。</p><p>但是注意，git commit 后<strong>暂存区文件不会消失</strong>，始终是上一次git add之后文件！</p></li><li><p><strong>git diff</strong>  &amp;<strong>git diff --cached</strong> &amp;<strong>git diff HEAD</strong></p><p>git diff  比较的是<strong>工作区文件和暂存区文件</strong>区别。</p><p>git diff --cached 比较的是<strong>暂存区文件和仓库分支文件</strong>区别。</p><p>git diff --HEAD 比较的是<strong>工作区文件和仓库分支最新版本</strong>区别。</p><ul><li><p>暂存区：就是 .git / index 这个文件，git add 会把工作区修改的文件添加到暂存区，即使 git commit 后也不会空，<strong>始终保存最近一次 git add后的内容</strong>。</p></li><li><p>仓库分支：<strong>始终保存上次git commit 内容</strong>。</p></li></ul></li></ul></li></ul><h3 id="2-3-管理修改">2.3 管理修改</h3><ul><li><p>概览</p><ul><li>git管理的是修改，而非文件</li></ul></li><li><p>实操</p><p>新建一个文件 readme1.txt，然后依次：</p><blockquote><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code></p></blockquote><p>​      用<code>git diff HEAD test/readme1.txt</code> 比较<strong>工作区和版本分支</strong>，会发现第二次修改没有被提交，说明git只把git add后暂存区内容提交了，而不管理文件。</p><p>如果要把第二次修改也提交了，需要进行以下操作：</p><blockquote><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改-&gt; <code>git add</code>  -&gt; <code>git commit</code></p></blockquote></li></ul><h3 id="2-4-撤销修改">2.4 撤销修改</h3><ul><li><p>概览</p><ul><li><p>场景1：改乱了工作区某个文件的内容，想直接丢弃工作区的修改时</p><p>用命令<code>git checkout -- file</code>。</p></li><li><p>场景2：不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改</p><ul><li>第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1</li><li>第二步按场景1操作。</li></ul></li><li><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交</p><p>参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>一节，不过前提是没有推送到远程库。</p></li></ul></li><li><p>实操</p><ul><li><p>场景1</p><p>不小心在文件里增加了一句话：</p><blockquote><p>刘婷是傻子</p></blockquote><p>用 <code>git checkout</code>命令撤回工作区修改，有两种情况</p><ul><li><code>readme.txt</code>修改但未被放到暂存区，撤销修改就回到和版本库一样状态；</li><li><code>readme.txt</code>修改且添加到暂存区后，撤销修改就回到添加到暂存区后的状态。</li></ul><blockquote><p>⚠️ 总之，就是让文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><p>🕵所以，也可用于恢复误删的文件（撤销工作区删除操作）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- <span class="built_in">test</span>/readme.md</span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1560826918878.png" alt="1560826918878"></p></li><li><p>场景2</p><p>不小心在文件里增加了一句话，而且已经git add提交到暂存区</p><blockquote><p>刘婷是傻子哈哈哈</p></blockquote><p>命令<code>git reset </code><strong>不仅可以回退版本 而且可以把暂存区的修改撤销</strong>。</p><p>⚠️之所以不直接 git checkout 是因为此时会用<strong>暂存区内容覆盖工作区</strong>，显然不行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD <span class="built_in">test</span>/readme.md <span class="comment"># HEAD表示最新版本</span></span><br></pre></td></tr></table></figure><p>然后此时再用git checkout ，暂存区内容覆盖工作区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- <span class="built_in">test</span>/readme.md</span><br></pre></td></tr></table></figure><p>再次查看文件发现，‘’刘婷是傻子哈哈哈‘’ 的胡话已经被没了，暂存区也没了。</p></li><li><p>场景3</p><p>又说胡话，不但 git add 且git  commit（暂存区和版本库<strong>HEAD</strong>都是修改后版本）</p><blockquote><p>刘婷是傻子哈哈哈哈哈哈</p></blockquote><p>这个时候只有回退版本了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog  <span class="comment"># 查看版本号</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard  3928</span><br><span class="line">HEAD is now at 3928d9f 第四次修改</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-5-删除文件">2.5 删除文件</h3><ul><li><p>rm 删除</p><ul><li><p>原理</p><p>rm 删除文件，只相当于删除了 工作区文件，如果要恢复文件撤销工作区修改即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm <span class="built_in">test</span>/readme.md</span><br></pre></td></tr></table></figure></li><li><p>恢复</p><p>用<code>git checkout -- &lt;file&gt;</code>，它会用最新版本库文件（如果已经git add 用最新暂存区内容，见前）覆盖工作区文件，则相当于撤销工作区修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- <span class="built_in">test</span>/readme.md</span><br></pre></td></tr></table></figure></li></ul></li><li><p>git rm 删除</p><ul><li><p>原理</p><p>git rm 删除文件，不但相当于<strong>删除工作区文件 &amp;  而且git add添加到暂存区</strong>。</p><p>所以此时直接<code>git checkout </code>是用暂存区内容覆盖 工作区，显然是没用的。</p></li><li><p>恢复</p><ul><li><p>先恢复暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD <span class="built_in">test</span>/readme.md <span class="comment"># HEAD表示最新版本</span></span><br></pre></td></tr></table></figure></li><li><p>再用暂存区覆盖工作区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- <span class="built_in">test</span>/readme.md</span><br></pre></td></tr></table></figure></li></ul></li><li><p>彻底删除</p><p>如前所述，git rm 已经删除了 ①工作区文件 ② 添加到暂存区，那么此时只需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --m <span class="string">&#x27;彻底删除&#x27;</span>  <span class="comment"># 将③版本库内容也修改</span></span><br></pre></td></tr></table></figure><p>那么文件就会从工作区、暂存区、版本库全部删除。</p></li><li><p>彻底删除恢复</p><p>如果已经commit，那么只能<code>git reset</code>回退版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard  3928</span><br><span class="line">HEAD is now at 3928d9f 第四次修改</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="三、远程仓库">三、远程仓库</h2><h3 id="3-1-添加远程库上传本地文件">3.1 添加远程库上传本地文件</h3><blockquote><p>以下操作基于默认你</p><ul><li>创建好 github 账号 &amp; 创建好一个仓库</li><li>设置好本地ssh -key 而且已经同时在github网页服务端账号设置里添加 ssh -key</li></ul></blockquote><ol><li><p>添加用户信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;hwh&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;380141202@qq.com&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>初始化本地仓库</p><blockquote><p>如果本地仓库从未被初始化才需要，初始化会创建一个隐藏的 .git 文件管理版本。</p></blockquote><ul><li><p>cd切换 + git init</p><p>cd命令切换到后本地仓库；</p><p>git init 初始化本地仓库，会为你创建一个 .git文件，已经初始化不用。</p></li><li><p>手动 bash</p><blockquote><p>⚠️ 很奇怪的是，这样 git add . --&gt; git commit --&gt; git push后，会把整个父文件夹推送上去。</p><p>比如：地址 TEST 文件夹下有 <a href="http://README.md">README.md</a> ，推送后github上显示的 TEST文件夹，而不是我想的README.md文件。</p></blockquote><p>右击本地仓库，选择<code>Git Bash here</code></p></li></ul></li><li><p>把本地仓库添加到版本库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .  <span class="comment"># add . 提交所有新建、修改文件</span></span><br><span class="line">$ git commit -m <span class="string">&#x27;第一次添加本地仓库到版本库&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>本地仓库关联远程库</p><p><code>git remote add &lt;远程库名设置&gt;  &lt;远程仓库地址&gt;</code></p><p>显然这里把<strong>远程仓库地址设置为 origin</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:huangwanghuiYY/gitTest.git</span><br></pre></td></tr></table></figure></li><li><p>推送到远程库</p><p>下面代码表示：将本地<code>master</code>分支推送到远程仓库<code>origin</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master  <span class="comment"># 第一次推送带 -u 参数</span></span><br></pre></td></tr></table></figure><p><code>-u</code>选项指定一个默认主机，这样后面就可以不加任何参数使用<code>git push</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin master</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-2-从远程库克隆">3.2 从远程库克隆</h3><blockquote><p>​       当我们想多人协作时会用到克隆。比如有一个不错的开源项目，你可以克隆到<code>本地仓库</code>进行修改等。</p></blockquote><ol><li><p>确定要克隆的仓库</p><p>比如我的XSurvey项目。</p></li><li><p>git clone 进行克隆</p><p>克隆会在<code>当前文件夹</code>创建克隆的仓库，克隆仓库以XSuery为名，下含项目文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:huangwanghuiYY/XSurvey.git</span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1560943024969.png" alt="1560943024969"></p></li></ol><h2 id="四、分支管理">四、分支管理</h2><h3 id="4-1-创建和合并分支">4.1 创建和合并分支</h3><blockquote><p>这一节，涉及大量图形，<a href="https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424">廖雪峰教程</a>  讲的很好，这里尽量精简记录心得。</p></blockquote><ul><li><p>概述</p><ul><li><p>查看分支：<code>git branch</code></p></li><li><p>创建分支：<code>git branch &lt;name&gt;</code></p></li><li><p>切换分支：<code>git checkout &lt;name&gt;</code></p></li><li><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p></li><li><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p></li><li><p>删除分支：<code>git branch -d &lt;name&gt;</code></p></li></ul></li><li><p>实操记录</p><ul><li><p>主分支</p><p>​       <code>master</code>分支也是一条时间线，每次<strong>提交</strong> master 分支都会向前移动一步，随着不断提交 master分支也就越长。</p><p>⚠️下图有两个指针：<code>HEAD</code> &amp; <code>master</code> ，<code>HEAD</code>严格来说不是指向提交。HEAD指向master，master指向最新分支。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/0" alt="git-br-initial"></p></li><li><p>新分支创建切换</p><ul><li><p>创建新分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git branch dev1   <span class="comment"># 新建分支</span></span><br><span class="line">$ git branch        <span class="comment"># 查看分支</span></span><br><span class="line">  dev1</span><br><span class="line">* master           <span class="comment"># * 表示当前所在的分支（master）</span></span><br></pre></td></tr></table></figure><p>​     当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>指向的提交。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1560997582503.png" alt="1560997582503"></p></li><li><p>切换到当前分支</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev1</span><br></pre></td></tr></table></figure><p>如果checkout 加上 -b参数，表示 创建 &amp; 切换两个操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout dev1</span><br></pre></td></tr></table></figure><p>切换到当前分支，其实把head指向master所指向的提交。</p><p>⚠️这张图，还表示dev分支还执行了<strong>一次提交</strong>。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/0" alt="git-br-dev-fd"></p></li></ul></li><li><p>合并分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master  <span class="comment"># 先切回master分支（即HEAD指向master）</span></span><br><span class="line">$ git merge dev1   <span class="comment"># 表示当前分支（master）合并 dev1分支</span></span><br></pre></td></tr></table></figure><p>根据上图我们可以看到：</p><p>​      <code>dev</code>分支向前走了一步，<code>dev</code>指向了<strong>当前最新</strong>提交，而<code>master</code>指针依然指向<strong>上次</strong>提交。</p><p>​      如果要合并，那么直接<strong>让<code>master</code>指向<code>dev</code>指向的当前提交</strong> 。相当于，master也提交过一次。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/0" alt="git-br-ff-merge"></p></li><li><p>删除分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d dev</span><br><span class="line">Deleted branch dev (was b17d20e).</span><br></pre></td></tr></table></figure><p>​     删除分支，等价于删除创建分支后的提交记录（上图红色线），但由于master指向了最新提交，等价复制dev1的提交记录（蓝色线）。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/0" alt="git-br-rm"></p><p>​</p></li></ul></li></ul><h3 id="4-2-解决同时修改冲突">4.2 解决同时修改冲突</h3><ul><li><p>产生冲突原因</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561001334904.png" alt="1561001334904"></p><ul><li><p>在master分支上</p><ul><li><p>在当前<code>master</code>分支上，创建一个新分支  <code>dev2</code></p></li><li><p>同时master分支上，对README.md文件增加一句话</p><blockquote><p>i said master</p></blockquote></li><li><p>⚠️ 然后，<code>git add  --&gt; git commit</code></p></li></ul></li><li><p>在dev2分支上</p><ul><li><p>checkout切回master分支上，对README.md文件增加一句话</p><blockquote><p>i said dev2</p></blockquote></li><li><p>⚠️ 然后，<code>git add  --&gt; git commit</code></p></li></ul></li><li><p>合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git merge dev2</span><br></pre></td></tr></table></figure><p>显示，README.md文件同时被修改，发生冲突（也可用 <code>git status</code> 查看）</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561001544117.png" alt="1561001544117"></p><p>vim 查看文件显示具体冲突：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim README.md <span class="comment">#当前HEAD指向master，所以下图显示HEAD</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561001684363.png" alt="1561001684363"></p></li></ul></li><li><p>解决冲突</p><p>Ⓜ️此时<strong>两</strong><a href="http://xn--README-ov7i.md">个README.md</a><strong>已经是一个文件了</strong>，文件内容就是上图vim查看的<strong>所有</strong>内容 。</p><p>我们再命令行端口也可以看到，提示我们在 master|MERGING 合并中。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561002765319.png" alt="1561002765319"></p><p>​     我们打开文件，修改文件内容为：（第一句话有误，此时实在master分支上，不用在意）</p><blockquote><p>这是的dev分支，我增加了一句话</p><p>修改冲突，这里变成这样。其实不修改直接提交也解决冲突，只是没解决同时修改。</p></blockquote><p>然后再提交，发现冲突已经解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add README.md </span><br><span class="line">$ git commit -m <span class="string">&#x27;解决冲突&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561002865426.png" alt="1561002865426"></p></li></ul><h3 id="4-3-分支管理策略-–-禁用Fast-forward">4.3 分支管理策略 – 禁用Fast forward</h3><ul><li><p>概览</p><blockquote><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，则直接把 master 的指针直接指向了 dev 分支的最新提交，这样两个分支的最新提交的 commit id 就是一样的。但这种模式下，删除分支后，会丢掉分支信息。</p><p><strong>加上<code>--no-ff</code>参数，强制禁用<code>Fast forward</code>模式，使用普通模式</strong>。Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p></blockquote></li><li><p>实操</p><blockquote><p>默认已经创建好分支 dev3，且修该了文，进行了一次<strong>commit</strong>。</p><p>然后下面都是在 master分支上尝试合并操作</p></blockquote><ol><li><p>切回master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure></li><li><p>合并分支</p><p>–no–ff ： 普通模式合并。</p><p>-m ：由于本次合并<strong>dev</strong>要创建一个新的commit，所以加上<code>-m</code>参数，添加描述。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m <span class="string">&quot;merge with no-ff&quot;</span> dev</span><br></pre></td></tr></table></figure></li><li><p>查看历史</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   e1e9c68 (HEAD -&gt; master) merge with no-ff</span><br><span class="line">|\  </span><br><span class="line">| * f52c633 (dev) add merge</span><br><span class="line">|/  </span><br><span class="line">*   cf810e4 conflict fixed</span><br></pre></td></tr></table></figure></li><li><p>Fast forward模式 &amp; 普通模式 对比</p><blockquote><p>FF模式不用<code>--no-ff</code>，实际上只是将master的指针update成dev分支而已。用的还是dev的commit ID。</p><p>普通模式用，则是重新commit一次，有了新的commit ID，<strong>保留了分支版本记录</strong>。</p></blockquote><ul><li><p>Fast forward模式</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/0" alt="git-br-ff-merge"></p></li><li><p>普通模式</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/0" alt="git-no-ff-mode"></p></li></ul></li></ol></li></ul><h3 id="4-4-BUG分支—git-stash">4.4 BUG分支—git stash</h3><ul><li><p>概览</p><blockquote><p>​      修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>​      当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场。</p></blockquote></li><li><p>实操（应用场景）</p><ol><li><p>master 上面发布的是A的1.0版本</p></li><li><p>dev 上开发的是A的2.0版本 ，<strong>刚刚新建了test文件</strong> &amp;<strong><a href="http://xn--README-2g0js76l.md">修改README.md</a></strong>：</p><blockquote><p>这里是dev分支。</p></blockquote><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561019801527.png" alt="1561019801527"></p></li><li><p>这时，用户反映 1.0版本存在漏洞，有人利用这个漏洞开外挂</p></li><li><p>需要从dev切换到master去填这个漏洞，正常必须先提交dev目前的工作，才能切换。</p><ul><li><p>如果不commit切换分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master </span><br></pre></td></tr></table></figure><p>发现当前工作目录，是dev分支工作目录！</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561018815751.png" alt="1561018815751"></p></li><li><p>解释1</p><blockquote><p>一个本地的git repo只有一个工作区和暂存区，但是有多个分支的提交区，而我们的checkout只是将HEAD指针从一个分支切换到另一个分支。</p></blockquote><p>所以：</p><ol><li><p>切换后工作区内容是branch的工作内容</p></li><li><p>经过测试，如果切回dev分支，进行<code>add --&gt; commi</code>t 再切回master就回到       master工作区。</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561019439523.png" alt="1561019439523"></p></li></ol></li></ul></li><li><p>而dev的工作还未完成，不想提交，所以先把dev的工作stash一下，然后切换到master：</p><ol><li><p>先git add test</p><blockquote><p>⚠️  为什么要先add test文件？</p><p>test文件是新建，还未被git管理！让git add<strong>追踪test文件</strong>，否则即使 git stash ，test文件也依然会出现在master工作目录中！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>git stash 然后切换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561021862083.png" alt="1561021862083"></p></li><li><p>恢复dev工作目录</p><p>简单恢复：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop  <span class="comment"># 恢复的同时把stash内容也删了</span></span><br></pre></td></tr></table></figure><p>有多个因此目录，可以配合下面目录恢复：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list  </span><br><span class="line">stash@&#123;0&#125;: WIP on dev: f52c633 add merge</span><br><span class="line">$ git stash apply stash@&#123;0&#125; <span class="comment"># 恢复不会删除stash内容</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>在master建立分支issue101并切换。</p></li><li><p>在issue101上修复漏洞。</p></li><li><p>修复后，在master上合并issue101  。</p></li><li><p>切回dev，恢复原本工作，继续工作。</p></li></ol></li></ul><h3 id="4-5-删除分支">4.5 删除分支</h3><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p><h3 id="4-6-多人协作">4.6 多人协作</h3><ul><li><p><strong>查看分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v  <span class="comment"># 带-v参数查看更加详细</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561023498006.png" alt="1561023498006"></p></li><li><p><strong>push 推送分支</strong></p><p><code>git push &lt;远程库名&gt; &lt;要推送分支名&gt;</code></p><blockquote><p>​      推送本地主分支master到 origin master，相当用本地master版本覆盖远程origin master版本。</p><p>⚠️ git push 只能用户该项目属于自己的情况，因为要输入账号密码！参与他人开源：</p><ul><li>成为该开源项目贡献者（由项目作者设置）</li><li>fork 该项目 ----&gt; clone到本地----&gt; 修改 ----&gt; 发起 pull requset —&gt; 讨论 &amp; 等待合并</li></ul><p>还有其他更多情况，如产生冲突等，查看：<a href="%5Bhttps://progit.bootcss.com/#_%E5%AF%B9%E9%A1%B9%E7%9B%AE%E5%81%9A%E5%87%BA%E8%B4%A1%E7%8C%AE%5D(https://progit.bootcss.com/#_%E5%AF%B9%E9%A1%B9%E7%9B%AE%E5%81%9A%E5%87%BA%E8%B4%A1%E7%8C%AE)">pro git 中文# 对项目做出贡献</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561024444763.png" alt="1561024444763"></p><blockquote><p>推送其他分支到远程库 ，也可以查看。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin dev</span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561024648502.png" alt="1561024648502"></p></li><li><p>clone 克隆分支工作</p><p>多人协作时，大家都会往<strong>远程库</strong><code>master</code>和<code>dev</code>分支上推送各自的修改。</p><ol><li><p>克隆主分支</p><blockquote><p>⚠️ 克隆只能克隆master分支！！</p></blockquote><p>现在，模拟你的小伙伴，在另一台电脑（注意要把SSH Key添加到GitHub）克隆：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:michaelliao/Python-100-Days</span><br></pre></td></tr></table></figure></li><li><p>克隆远程dev分支开发</p><p>由于只能克隆master分支，而又要在远程dev分支开发，那么：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure><p>之后就可进行修改 —&gt; 提交 ：git push了</p></li></ol></li><li><p><code>git pull</code></p><blockquote><p>一种应用情况：A、B都克隆了项目，在远程分支dev上进行开发（分别在本地也克隆dev分支）</p><ol><li><p>A修改了文件 README，并进行了push提交 。</p></li><li><p>你也修改了README，进行提交修改，会出错，原因是</p><p>⚠️<strong>远程分支比你的本地更新！</strong></p></li><li><p>只有先 pull 最新分支你的分支合并 —&gt; 解决冲突—&gt;提交</p></li></ol></blockquote><p><code>git pull</code>命令的作用是：取回远程主机某个分支的更新，再与本地的指定分支合并，它的完整格式稍稍有点复杂。</p><blockquote><p>在默认模式下，<code>git pull</code>是<code>git fetch</code>后跟<code>git merge FETCH_HEAD</code>的缩写。</p><p>git pull == git fetch+  git merge （默认是检索头部合并到当前分支）</p><p>⚠️ 使用–rebase，它运行<code>git rebase</code>而不是<code>git merge</code>。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull&lt;可选参数&gt; &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span></span><br></pre></td></tr></table></figure><h2 id="示例">示例</h2><p>比如，要取回<code>origin</code>主机的<code>next</code>分支，与本地的<code>master</code>分支合并：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull origin next:master</span></span><br></pre></td></tr></table></figure><ul><li><p>省略当前分支名</p><p>如果远程分支(<code>next</code>)要与当前分支合并，则冒号后面的部分可以省略。上面命令可以简写为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull origin next</span></span><br></pre></td></tr></table></figure><p>上面命令表示，取回<code>origin/next</code>分支，再与当前分支合并。实质上，这等同于先做<code>git fetch</code>，再执行<code>git merge</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git fetch origin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge origin/next</span></span><br></pre></td></tr></table></figure></li><li><p>省略远程分支名</p><blockquote><p>某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在<code>git clone</code>的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的<code>master</code>分支自动”追踪”<code>origin/master</code>分支。</p><p>Git也允许手动建立追踪关系，指定<code>master</code>分支追踪<code>origin/next</code>分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch --set-upstream master origin/next</span></span><br></pre></td></tr></table></figure></blockquote><p>如果当前分支与远程分支存在追踪关系，<code>git pull</code>就可以省略远程分支名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull origin</span></span><br></pre></td></tr></table></figure><p>上面命令表示，本地的当前分支自动与对应的<code>origin</code>主机”追踪分支”(remote-tracking branch)进行合并。</p></li><li><p>省略远程主机名</p><p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>git fetch和git pull的区别</strong></p><ol><li><em>git fetch</em>：相当于是从远程获取最新版本到本地，不会自动合并。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git fetch origin master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p master..origin/master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge origin/master</span></span><br></pre></td></tr></table></figure><p>以上命令的含义：</p><ul><li>首先从远程的<code>origin</code>的<code>master</code>主分支下载最新的版本到<code>origin/master</code>分支上</li><li>然后比较本地的<code>master</code>分支和<code>origin/master</code>分支的差别</li><li>最后进行合并</li></ul><p>上述过程其实可以用以下更清晰的方式来进行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git fetch origin master:tmp</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff tmp</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge tmp</span></span><br></pre></td></tr></table></figure><ol start="2"><li><em>git pull</em>：相当于是从远程获取最新版本并<code>merge</code>到本地</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin maste</span><br></pre></td></tr></table></figure></li></ul><h2 id="五、标签管理">五、标签管理</h2><h3 id="5-1-创建标签">5.1 创建标签</h3><h3 id="5-2-操作标签">5.2 操作标签</h3><h2 id="六、使用Github">六、使用Github</h2><h3 id="6-1-简单上传">6.1 简单上传</h3><ol><li><p>设置用户信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;hwh&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;380141202@qq.com&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>git init 初始化仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></li><li><p>本地创建ssh key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;380141202@qq.com&quot;</span> <span class="comment"># 后面会要求设置密码可不设置</span></span><br></pre></td></tr></table></figure><p>然后会在：C:\Users\80651\.ssh 生成ssh key 文件，其下有一个公钥 <code>id_rsa.pub</code>，记事本打开复制。</p></li><li><p>打开github设置</p><p>打开github 在个人设置中添加**2.**中ssh key。</p><p>可用 <code>ssh -T</code>查看是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></li><li><p>对文件一些操作</p><p>比如，这里以增加一个README文件，然后<strong>git commit 提交</strong>到版本库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add README   <span class="comment"># 也可add . 提交所有新建、修改文件</span></span><br><span class="line">$ git commit -m <span class="string">&#x27;增加readme&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>push 上传到版本库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><blockquote><p>Q : git push 出现错误 ‘’ error: failed to push some refs to git‘’</p><p>A : 一般是因为github中的<code>README.md</code>文件不在本地代码目录中</p><ul><li><p>添加 -f 参数强制覆盖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure></li><li><p>通过如下命令进行github与本地代码合并:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git pull --rebase origin master   <span class="comment"># 先和本地代码合并</span></span><br><span class="line">$ git push    <span class="comment"># 然后再上传</span></span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ol><h3 id="6-2-参与开源项目">6.2 参与开源项目</h3><blockquote><p>可参考：<a href="https://www.zhihu.com/question/21682976/answer/79489643">GitHub的Pull Request 是指什么意思</a></p></blockquote><h2 id="七、自定义Git">七、自定义Git</h2><ol><li><p>服务器端安装Git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install git</span><br></pre></td></tr></table></figure></li><li><p>创建用户 &amp; 组 管理仓库目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ groupadd git</span><br><span class="line">$ useradd git -g git  <span class="comment"># -g 参数表示把用户gituser主组设置为 git</span></span><br></pre></td></tr></table></figure></li><li><p>创建目录</p><p>我们先创建一个目录<code>gitrepo</code>用来管理其下仓库，一般习惯在 /var下创建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /var</span><br><span class="line">$ mkdir gitrepo</span><br></pre></td></tr></table></figure><p>给其设置好用户 &amp; 组，便于管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chown -R gituser:git gitrepo <span class="comment"># 把目录gitrepo 设置用户gituser &amp; 组 git</span></span><br></pre></td></tr></table></figure><p><code>ls -l</code> 查看是否设置成功：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561122220352.png" alt="1561122220352"></p></li><li><p>创建仓库</p><p>创建<code>hwhComputer2Backup.git</code>仓库，并初始化用来上传电脑备份。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> gitrepo  <span class="comment"># 注意先切换到git下</span></span><br><span class="line">$ git init --bare hwhComputer2Backup.git</span><br></pre></td></tr></table></figure></li><li><p>创建证书</p><ul><li><p>在本地电脑上</p><p>执行以下命令创建ssh 公钥。会在：<code>C:\Users\80651\\.ssh</code> 生成ssh key 文件，其下有一个公钥 <code>id_rsa.pub</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;380141202@qq.com&quot;</span> <span class="comment"># 后面会要求设置密码可不设置</span></span><br></pre></td></tr></table></figure></li><li><p>切回服务端</p><blockquote><p>裸机需创建<code>/home/git/.ssh/authorized_keys</code>文件。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> gitrepo/</span><br><span class="line">$ mkdir .ssh</span><br><span class="line">$ touch .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后把本地电脑上公钥复制导入，一行一个（？）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561123680464.png" alt="1561123680464"></p></li></ul></li><li><p>再次修改权限</p><blockquote><p>创建的子目录 用户 &amp; 组 默认是 root root</p></blockquote><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561124160395.png" alt="1561124160395"></p><p>⚠️由于.ssh &amp; 仓库 hwhComputer2Backup.git 都不属于 gituser ，所有还需设置权限。否则进行 push pull 操作 没有足够权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /var</span><br><span class="line">$ chown -R gituser:git gitrepo</span><br></pre></td></tr></table></figure></li><li><p>本地上传文件</p><ol><li><p>添加用户信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;hwh&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;380141202@qq.com&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>初始化本地仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> D:/hwh/uploadToGit</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure></li><li><p>把本地仓库添加到版本库</p><blockquote><p>错误：c#程序练习 does not have a commit checked out</p><p>解决：是因为 c#程序练习 这个文件夹已经被初始化，查看隐藏文件可以发现 .git文件删除其即可。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .  <span class="comment"># add . 提交所有新建、修改文件</span></span><br><span class="line">$ git commit -m <span class="string">&#x27;第一次备份文件&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>本地仓库关联远程库</p><blockquote><p>移除当前远程连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove origin </span><br></pre></td></tr></table></figure></blockquote><p><code>git remote add origin &lt;服务端用户名&gt;@&lt;远程库名地址&gt;:&lt;远程仓库地址&gt;</code></p><p>⚠️<code>&lt;服务端用户名&gt; :</code> 是在服务端的用户！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin gituser@129.28.154.240:/var/gitrepo/hwhComputer2Backup.git</span><br></pre></td></tr></table></figure></li><li><p>推送到远程库</p><blockquote><p>似乎由于 <em>ssh key</em> 设置不对，<em>git push</em> 要输入用户 <em>gituser</em> 的密码 123456？</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master  <span class="comment"># 第一次推送带 -u 参数</span></span><br></pre></td></tr></table></figure><p>等待上传服务器(速度有点慢)：</p><p><img src="https://blog-imgs-1256686095.cos.ap-guangzhou.myqcloud.com/1561128011507.png" alt="1561128011507"></p></li></ol></li></ol><h2 id="八、debug-记录">八、<code>debug</code> 记录</h2><blockquote><p><strong>ERROR</strong>：由于存在 <code>&gt;100M</code> 文件，提交后报错，不允许提交超过<code>100M</code> 文件，进行如下操作：</p><ul><li>压缩并删除<code>&gt;100M</code>文件</li><li>将相应文件加入 <code>.gitignore</code></li><li>再次<code>commit</code>  --&gt; <code>push</code></li></ul><p>依旧报相同错误。</p></blockquote><p>解决办法如下，参考：<a href="https://medium.com/@marcosantonocito/fixing-the-gh001-large-files-detected-you-may-want-to-try-git-large-file-storage-43336b983272">Fixing the “GH001…</a></p><ol><li><p>删除文件</p><blockquote><p>建议可以先回退最近的<code>commit</code> 分支</p></blockquote><p>利用以下命令删除所有在仓库中  <code>&gt;100M</code> 的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch -f --index-filter <span class="string">&#x27;git rm --cached --ignore-unmatch &lt;大于100M文件URL&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>例如，我的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch -f --index-filter <span class="string">&#x27;git rm --cached --ignore-unmatch  Experiment/Ex4_CustomerForecast/src/train.csv&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>再次提交</p><p>为了保险，可以先：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached ./   <span class="comment"># 本地代码不会被删除</span></span><br></pre></td></tr></table></figure><p>接下来正常：<code>git add --&gt; git commit --&gt; git push</code> 即可</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招笔记（九）_计算机基础_相关补充</title>
      <link href="/p/5582/"/>
      <url>/p/5582/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我的校招记录：<a href="https://www.hwh.zone/p/29708/">校招笔记（零）_写在前面</a> ，以下是校招笔记总目录。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法能力（“刷题”）</strong></td><td style="text-align:center">这部分就是耗时间多练习，<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Leetcode-Top100</a> 是很好的选择。</td><td style="text-align:center">补充练习：<a href="https://codetop.cc/">codeTop</a></td></tr><tr><td style="text-align:center"><strong>计算机基础(上)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/51787/">校招笔记（一）__Java_Java入门</a></td><td style="text-align:center">C++后端后续更新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/7257/">校招笔记（一）__Java_面对对象</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/21069/">校招笔记（一）__Java_集合</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/8959/">校招笔记（一）__Java_多线程</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/45493/">校招笔记（一）__Java_锁</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/42516/">校招笔记（一）__Java_JVM</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>计算机基础(下)（“八股”）</strong></td><td style="text-align:center"><a href="http://hwh.zone/p/44980/">校招笔记（二）__计算机基础_Linux&amp;Git</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/46361/">校招笔记（三）__计算机基础_计算机网络</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/15646/">校招笔记（四）__计算机基础_操作系统</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/56848/">校招笔记（五）__计算机基础_MySQL</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/31215/">校招笔记（六）__计算机基础_Redis</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/61434/">校招笔记（七）__计算机基础_数据结构</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="https://hwh.zone/p/31667/">校招笔记（八）__计算机基础_场景&amp;智力题</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://hwh.zone/p/5582/">校招笔记（九）__计算机基础_相关补充</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>项目&amp;实习</strong></td><td style="text-align:center">主要是怎么准备项目，后续更新</td><td style="text-align:center"></td></tr></tbody></table><h1>九、相关补充</h1><h2 id="9-1-（要扩充）设计模式">9.1 （要扩充）设计模式</h2><blockquote><p>没有足够实际代码经验，只好先写这些应付下面试。</p></blockquote><h4 id="1-说说什么是单例模式-手写一个？">1.说说什么是单例模式 ?手写一个？</h4><p>单例模式是一种常用的软件设计模式，在应用这个模式时，单例对象的类必须保证只有一个实例存在，整个系统只能使用一个对象实例。</p><ul><li><p><strong>手写单例模式</strong></p><blockquote><p>参考：<a href="https://www.runoob.com/design-pattern/singleton-pattern.html">https://www.runoob.com/design-pattern/singleton-pattern.html</a></p></blockquote><blockquote><p>记忆：“2private + 1public ”</p></blockquote><ol><li><p><strong>饿汉式</strong></p><p>线程安全 ， 但：类加载时就初始化，浪费内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// 创建 SingleObject 的一个对象</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SingleObject instance = <span class="keyword">new</span> SingleObject();</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// *让构造函数为 private，这样该类就不会被实例化</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">SingleObject</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 获取唯一可用的对象</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>懒汉式（不加锁）</strong></p><p>只有真正调用获取实例对象时，才会创建一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// 调用时才判断</span></span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) </span><br><span class="line">    &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>懒汉式（加锁）</strong></p><p>线程安全，但加锁性能不够高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="comment">// 就是多了个synchronized关键字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>双检锁式</strong></p><p>懒汉式（加锁）虽然可以保证只创建一个单例，但其性能不高，因为每次访问<strong>整个方法都加锁</strong>。</p><p>因此出现双检索式，在<code>instance=new DoubleCheckSingleton();</code> 进行加锁 ， <code>return instance;</code><strong>不加锁</strong>！</p><blockquote><p><strong>为什么要进行两次检查instance==null？</strong></p><ol><li><p>第一层检查作用</p><p>主要为了提高性能。如果没有第一层，上来就要加锁比较耗费性能</p></li><li><p>第二层检查作用</p><p>解决多线程并发问题。假设是第一次开始执行<code>getInstance</code>方法：</p><ol><li>A，B两个线程，此时<code>instance==null</code> ，A，B都通过了第一层检查。</li><li>假设A先拿到锁，往下执行创建一个实例，然后释放了锁；</li><li>此时B也拿到了锁，<strong>如果没有第二层检查，B会进行重新new一个实例</strong>，违背单例模式！</li></ol></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckSingleton</span></span></span><br><span class="line"><span class="class"></span>&#123;      </span><br><span class="line">     <span class="comment">// volitale 关键字修饰，避免指令重排，因为初始化操作是不原子化的 ：</span></span><br><span class="line">    <span class="comment">//  (1) 给DoubleCheckSingleton类的实例instance分配内存</span></span><br><span class="line">    <span class="comment">//  (2) 调用实例instance的构造函数来初始化成员变量</span></span><br><span class="line">    <span class="comment">//  (3) 将instance指向分配的内存地址</span></span><br><span class="line">    <span class="comment">//  在多线程中，A可能是 1→3→2的顺序，执行到1→3，此时另外一个线程看到instance不为null（因为前面线程执行了3）就直接返回实例。而此时并没有被分配内存故可能出现问题。</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">volatile</span> <span class="keyword">static</span> DoubleCheckSingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123; <span class="comment">//第一层检查，是否存在实例</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckSingleton.class)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123; <span class="comment">//第二层检查，防止出现另外一个线程阻塞在synchronized，获得锁后重复创建实例</span></span><br><span class="line"></span><br><span class="line">                    instance=<span class="keyword">new</span> DoubleCheckSingleton();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="2-说说你对代理模式的理解？">2.<strong>说说你对代理模式的理解</strong>？</h4><p>代理模式是给某一个对象提供一个代理，并由<strong>代理对象控制对原对象的引用</strong>。</p><ul><li><strong>优点</strong>：代理模式能够协调调用者和被调用者，<u>在一定程度上降低了系统的<strong>耦合度</strong></u>；可以<u>灵活地隐藏被代理对象的部分功能和服务，也增加额外的功能和服务</u>。</li><li><strong>缺点</strong>：由于使用了代理模式，因此程序的性能<u>没有直接调用性能高</u>；使用代理模式<u>提高了代码的复杂度</u>。</li></ul><h4 id="3-说说简单工厂模式？">3.<strong>说说简单工厂模式</strong>？</h4><p>简单工厂模式又叫静态工厂方法模式，就是建立一个工厂类，<strong>对实现了同一接口的一些类进行实例的创建</strong>。</p><ul><li><p>比如，一台咖啡机就可以理解为一个工厂模式，你只需要按下想喝的咖啡品类的按钮（摩卡或拿铁），它就会给你生产一杯相应的咖啡，你不需要管它内部的具体实现，只要告诉它你的需求即可；</p></li><li><p>【<strong>优点</strong>】<strong>工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例</strong>，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；</p></li><li><p>【<strong>缺点</strong>】 不易拓展，<u>一旦添加新的产品类型，就不得不修改工厂的创建逻辑</u>； 产品类型较多时，工厂的创建逻辑可能过于复杂，一旦出错可能造成所有产品的创建失败，不利于系统的维护。</p></li></ul><h4 id="4-说说抽象工厂模式？">4.<strong>说说抽象工厂模式</strong>？</h4><p>抽象工厂模式是在简单工厂的基础上将未来<strong>可能需要修改的代码抽象出来</strong>，通过继承的方式让子类去做决定。</p><ul><li>【<strong>简单工厂模式缺点</strong>】以上面的咖啡工厂为例，某天我的口味突然变了，<u>不想喝咖啡了想喝啤酒，这个时候如果直接修改简单工厂里面的代码</u>，这种做法不但不够优雅，也不符合软件设计的“开闭原则”，因为每次新增品类都要修改原来的代码。</li><li>【<strong>抽象工厂</strong>】<strong>抽象工厂里只声明方法，具体的实现交给子类（子工厂）去实现</strong>，这个时候再有新增品类的需求，只需要新创建代码即可。如，创建一个啤酒工厂而不是咖啡工厂。</li></ul><h4 id="5-装饰器模式是什么？">5.<strong>装饰器模式是什么</strong>？</h4><blockquote><p>不够深入。</p></blockquote><p>装饰器模式是指<u>动态地给一个对象增加一些额外的功能</u>，同时<strong>又不改变其结构</strong>。</p><h2 id="9-2-分布式问题【校招必问】">9.2 分布式问题【校招必问】</h2><blockquote><p>非常系统的总结文档：<a href="http://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/03%20%20%E9%9D%A2%E8%AF%95%E5%AE%98%E5%A6%82%E4%BD%95%E8%80%83%E5%AF%9F%E4%B8%8E%20CAP%20%E6%9C%89%E5%85%B3%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%EF%BC%9F.md">分布式相关：第一页</a></p></blockquote><p>CAP 理论指的是什么：C（Consistency）是数据一致性、A（Availability）是服务可用性、P（Partition tolerance）是分区容错性。</p><ul><li><p><strong>问题引入</strong></p><p>现在有一个分布式系统 A，它有一个副本 A1，在正常情况下，客户端 Client 写数据到系统 A，然后数据从 A 节点同步到 A1 节点，再返回给 Client 成功状态。</p><p><img src="http://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/assets/CgqCHl_-eW2ALOs5AAFBvaYD4f8199.png" alt="6.png"></p><p>但由于网络是不可靠的，节点 A 和 A1 的网络随时会因为中断而出现分区。所谓网络分区就是由于网络不通导致节点 A 和 A1 被隔离在不同的网络子集中，此时节点 A 的数据就不能及时同步到节点 A1 中了。</p><p><img src="http://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/assets/Ciqc1F_-eXaAcu6nAAE3Pk18sD8666.png" alt="7.png"></p></li></ul><h4 id="9-1-1-在CAP基础上讲讲BASE？举实例说说？">9.1.1 在CAP基础上讲讲BASE？举实例说说？</h4><p>BASE 理论，它是 CAP 理论的延伸。BASE 是 Basically Available（基本可用）、Soft State（软状态）和 Eventually Consistent（最终一致性）三个单词的简写，作用是保证系统的可用性，然后通过<strong>最终一致性来代替强一致性</strong>，它是目前分布式系统设计中最具指导意义的经验总结。</p><p>其实是做了“可用性”方面的妥协，比如：</p><ul><li>电商网站在双十一大促等访问压力较大的时候，关闭商品排行榜等次要功能的展示，从而保证商品交易主流程的可用性，这也是我们常说的<strong>服务降级；</strong></li><li>为了错开双十一高峰期，电商网站会将<strong>预售商品的支付时间</strong>延后十到二十分钟，这就是<strong>流量削峰</strong>；</li><li>在你抢购商品的时候，往往会在队列中等待处理，这也是常用的<strong>延迟队列</strong>。</li></ul><p>软状态和最终一致性指的是允许系统中的数据存在中间状态，这同样是<strong>为了系统可用性而牺牲一段时间窗内的数据一致性</strong>，从而保证最终的数据一致性的做法。</p><h4 id="9-1-2-亿级商品分布式存储问题？">9.1.2 亿级商品分布式存储问题？</h4><h5 id="1-如何设计一个支持海量商品存储的高扩展性架构？">1.如何设计一个支持海量商品存储的高扩展性架构？</h5><p><strong>从这一点出发会考察你Hash（哈希）分片的具体实现原理</strong>。</p><ol><li>以商品 ID 作为关键字进行分片，系统会通过一个 Hash 函数计算商品 ID 的 Hash 值，然后取模，就能得到对应的分片；</li></ol><h5 id="2-在做分库分表时，基于-Hash-取模和一致性-Hash-的数据分片是如何实现的？">2.在做分库分表时，基于 Hash 取模和一致性 Hash 的数据分片是如何实现的？</h5><ol><li><strong>解决 Hash 分片的缺点，既保证数据均匀分布，又保证扩展性</strong> ，最终采用一致性 Hash ：它是指将存储节点和数据都映射到一个首尾相连的哈希环上。</li><li>具体见前，一致性哈希相关算法描述</li></ol><h5 id="3-在电商大促时期，如何对热点商品数据做存储策略-？">3.在电商大促时期，如何对热点商品数据做存储策略 ？</h5><ul><li><p><strong>问题</strong></p><p>一致性 Hash 提升了稳定性，使节点的加入和退出不会造成大规模的数据迁移，但<strong>本质上 Hash 分片是一种静态的分片方式</strong>，必须要提前设定分片的最大规模，<strong>而且无法避免单一热点问题，</strong> 某一数据被海量并发请求后，不论如何进行 Hash，数据也只能存在一个节点上，这势必会带来热点请求问题。</p></li><li><p><strong>解决</strong></p><p><strong>做 Range（范围）分片</strong>。 与 Hash 分片不同的是，Range 分片能结合业务逻辑规则，例如，我们用 “Category（商品类目）” 作为关键字进行<strong>动态分片时</strong>，不是以统一的商品一级类目为标准，而是可以按照一、二、三级类目进行灵活分片。例如，对于京东强势的 3C 品类，可以按照 3C 的三级品类设置分片；对于弱势品类，可以先按照一级品类进行分片，这样会让分片间的数据更加平衡。</p><p><img src="http://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/assets/CgpVE1_-ed6AfUBMAAFtDc6PlH4881.png" alt="15.png"></p></li></ul><p><strong>4.强一致性和最终一致性的数据共识算法是如何实现的</strong>？</p><h4 id="9-1-3-海量并发，分布式事务一致性问题？">9.1.3 海量并发，分布式事务一致性问题？</h4><ul><li><p><strong>什么是分布式事务问题</strong>？</p><p>一次大的操作由多个小操作组成，这些<strong>小的操作分布在不同的服务器上</strong>，分布式事务需要<strong>保证这些小操作要么全部成功，要么全部失败</strong>。</p><p>举一个实例：</p><ul><li>京东旅行系统，拆分成多个子系统，如商品系统、促销系统、订单系统。用户下单时，<strong>订单系统生成订单，商品系统扣减库存，促销系统扣减优惠券</strong>，<strong>只有当三个系统的事务都提交之后，才认为此次下单成功</strong>，否则失败。</li></ul></li><li><p><strong>解决方案</strong></p><p>有两阶段提交协议（Two-Phase Commit，2PC）、3PC 、TCC 和基于消息队列的实现方式。</p><ul><li><p><strong>错误回答</strong>：方案很多，可以选择 2PC ，2PC 实现的流程是…</p></li><li><p><strong>错误原因</strong>： 因为在实际工作中，<strong>很少采用前几种方案（互联网中落地方案代价大）</strong>，基本都是基于 MQ 的可靠消息投递的方式来实现。</p></li><li><p><strong>正确回答</strong>：先介绍目前主流实现分布式系统事务一致性的方案（也就是基于 MQ 的可靠消息投递的机制）然后回答出可实现方案和关键知识点。另外，<strong>为了和面试官进一步交流，你可以提出 2PC 或 TCC</strong> （这是一种交流方案）。</p></li><li><p><strong>回答一、基于 MQ 的可靠消息投递方案</strong></p><ul><li><p><strong>什么是MQ</strong></p><p>核心的五个概念：</p><ol><li><strong>Queue</strong>: 真正存储数据的地方</li><li><strong>Exchange</strong>: 接收请求，转存数据</li><li><strong>Bind:</strong> 收到请求后存储到哪里</li><li><strong>消息生产者</strong>:发送数据的应用</li><li><strong>消息消费者</strong>: 取出数据处理的应用</li></ol></li><li><p><strong>场景实例</strong></p><blockquote><p><strong>订单系统（1）完成订单后，（2）购物车系统减购物车中的商品</strong>。</p></blockquote><p><img src="https://i.loli.net/2021/09/05/B2uKDL8cyfhplis.png" alt="img"></p><ol><li><p>订单系统在<strong>消息队列上</strong>开启一个事务（没有创建订单）；</p></li><li><p>订单系统给消息服务器发送一个“半消息”；</p><blockquote><p>这个半消息不是说消息内容不完整，它包含的内容就是完整的消息内容，半消息和普通消息的唯一区别是，<strong>在事务提交之前，对于消费者来说，这个消息是不可见的</strong>。</p></blockquote></li><li><p>半消息发送成功后，<strong>订单系统就可以执行本地事务了</strong>，在订单库中创建一条订单记录，并提交订单库的数据库事务。</p></li><li><p>然后<strong>根据本地事务的执行结果决定提交或者回滚事务消息</strong>。</p><blockquote><p>如果订单创建成功，那就提交事务消息，购物车系统就可以消费到这条消息继续后续的流程。如果订单创建失败，那就回滚事务消息，购物车系统就不会收到这条消息。</p></blockquote></li><li><p>购物系统消费这条拿到的订单系统消息（<strong>确认了订单系统事务执行完毕</strong>），这样就可以继续下一步购物操作</p></li></ol></li></ul></li></ul></li></ul><h4 id="9-1-4-分布式锁问题">9.1.4 分布式锁问题</h4><blockquote><p><a href="http://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/06%20%20%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%EF%BC%8C%E5%A6%82%E4%BD%95%E5%9B%9E%E7%AD%94%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%9F.md">06 分布式系统中，如何回答锁的实现原理？</a></p></blockquote><p>分布式锁是解决协调分布式系统之间，同步访问共享资源的一种方式。详细来讲：在分布式环境下，<strong>多个系统在同时操作共享资源</strong>（如写数据）时，发起操作的系统通常会通过一种方式去协调其他系统，然后获取访问权限，得到访问权限后才可以写入数据，其他系统必须等待权限释放。</p><img src="https://i.loli.net/2021/09/05/f7Fh83wrnqvH6PK.png" alt="image-20210905232542573" style="zoom:80%;" /><ul><li><p><strong>基于redis的分布式锁</strong></p><p><strong>使用setnx命令加锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wrongGetLock1</span><span class="params">(Jedis jedis, String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 第一步：加锁</span></span><br><span class="line">    Long result = jedis.setnx(lockKey, requestId);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 第二步：设置过期时间</span></span><br><span class="line">        jedis.expire(lockKey, expireTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>setnx命令，意思就是 set if not exist，<strong>如果lockKey不存在，把key存入Redis</strong>，保存成功后如果result返回1，表示设置成功，如果非1，表示失败，别的线程已经设置过了。</p></li><li><p>expire()，设置过期时间，防止死锁，假设，如果一个锁set后，一直不删掉，那这个锁相当于一直存在，产生死锁。</p></li></ul></li></ul><p><strong>解决setnx与expire不是一个原子操作</strong></p><ul><li><p>加锁总共分两步，第一步jedis.setnx，第二步jedis.expire设置过期时间，setnx与expire不是一个原子操作，如果程序执行完第一步后异常了，第二步jedis.expire(lockKey, expireTime)没有得到执行，<strong>相当于这个锁没有过期时间，有产生死锁的可能</strong>。</p></li><li><p>解决方案为：一步操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockDemo</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_IF_NOT_EXIST = <span class="string">&quot;NX&quot;</span>;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_WITH_EXPIRE_TIME = <span class="string">&quot;PX&quot;</span>;   </span><br><span class="line">        <span class="comment">/**     </span></span><br><span class="line"><span class="comment">        * 获取分布式锁    </span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> jedis Redis客户端     </span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> lockKey 锁    </span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> requestId 请求标识     </span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> expireTime 超期时间     </span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span> 是否获取功     */</span>   </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">(Jedis jedis, String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span></span></span><br><span class="line"><span class="function">   </span>&#123;    </span><br><span class="line">           <span class="comment">// 两步合二为一，一行代码加锁并设置 + 过期时间。       </span></span><br><span class="line">     <span class="keyword">if</span> (<span class="number">1</span> == jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime))</span><br><span class="line">      &#123;           </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//加锁成功        </span></span><br><span class="line">      &#125;       </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//加锁失败   </span></span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 解锁：对应del删除key即可</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unLock</span><span class="params">(Jedis jedis, String lockKey, String requestId)</span> </span></span><br><span class="line"><span class="function">  </span>&#123;           </span><br><span class="line">      <span class="comment">// 第一步： 使用 requestId 判断加锁与解锁是不是同一个客户端    </span></span><br><span class="line">      <span class="keyword">if</span> (requestId.equals(jedis.get(lockKey))) </span><br><span class="line">      &#123;       </span><br><span class="line">          <span class="comment">// 第二步： 若在此时，这把锁突然不是这个客户端的，则会误解锁     </span></span><br><span class="line">          jedis.del(lockKey);    </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​</p><ul><li><p><strong>基于Zoopkeeper的分布式锁</strong></p><blockquote><p>sync，lock也只能保证你当前机器线程安全，这样分布式访问还是有问题。</p><p>建议参考：<a href="https://www.cnblogs.com/aobing/p/12650036.html">https://www.cnblogs.com/aobing/p/12650036.html</a></p></blockquote><p>一个机器接收到了请求之后，先获取 zookeeper 上的一把分布式锁（zk会创建一个 znode），执行操作；然后另外一个机器也<strong>尝试去创建</strong>那个 znode，结果发现自己创建不了，因为被别人创建了，那只能等待，等第一个机器执行完了方可拿到锁。</p><p>下面是创建临时顺序节点的情况：</p><ol><li><p>客户端调用create()方法创建名为“/dlm-locks/lockname/lock-”的临时顺序节点。</p></li><li><p>客户端调用getChildren(“lockname”)方法来获取所有已经创建的子节点。</p></li><li><p>客户端获取到所有子节点path之后，如果发现<strong>自己在步骤1中创建的节点是所有节点中序号最小</strong>的，就是看自己创建的序列号是否排第一，如果是第一，那么<strong>就认为这个客户端获得了锁</strong>，在它前面没有别的客户端拿到锁。</p></li><li><p>如果创建的节点不是所有节点中需要最小的，那么则<strong>监视比自己创建节点的序列号小的最大的节点，进入等待</strong>。直到下次监视的<strong>子节点变更的时候</strong>，再进行子节点的获取，判断是否获取锁。</p></li></ol></li><li><p><strong>基于关系型数据库 MySQL 实现分布式锁</strong></p><blockquote><p>参考：<a href="https://juejin.cn/post/6844904137172189198">https://juejin.cn/post/6844904137172189198</a></p></blockquote><p>利用 Mysql 的锁表，创建一张表，设置一个 UNIQUE KEY（如，<strong>利用主键ID的唯一性</strong>） 这个 KEY 就是要锁的 KEY，所以同一个 KEY 在mysql表里只能插入一次了。</p><blockquote><p>这样对锁的竞争就交给了数据库，处理同一个 KEY 数据库保证了只有一个节点能插入成功，其他节点都会插入失败。</p></blockquote><p>定义加锁、解锁代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lock</span> ：  </span></span><br><span class="line"><span class="function">    <span class="title">exec</span> <span class="title">sql</span>:</span> insert into lockedtable (xxx) values (xxx)    </span><br><span class="line">    <span class="keyword">if</span> result == true :       </span><br><span class="line">         <span class="keyword">return</span> true    </span><br><span class="line">    <span class="keyword">else</span> :        </span><br><span class="line">         <span class="keyword">return</span> falsedef </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">unlock</span> ：   # 解锁就是删除</span></span><br><span class="line"><span class="function"> <span class="title">exec</span> <span class="title">sql</span>:</span> delete <span class="keyword">from</span> lockedOrder where order_id=<span class="string">&#x27;order_id&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="9-3-其它问题">9.3 其它问题</h2><h4 id="1-【字节-懂车帝】什么是跨域？">1. 【字节-懂车帝】什么是跨域？</h4><blockquote><p>参考：<a href="https://www.jianshu.com/p/f049ac7e2220">https://www.jianshu.com/p/f049ac7e2220</a></p></blockquote><p>跨域，是指浏览器不能执行其他网站的脚本。它是由<strong>浏览器的同源策略</strong>造成的，是浏览器对JavaScript实施的安全限制。</p><p>同源策略限制了一下行为：</p><ol><li><p>Cookie、LocalStorage 和 IndexDB 无法读取</p></li><li><p>DOM 和 JS 对象无法获取</p></li><li><p>Ajax请求发送不出去</p></li></ol><p>具体的一些实例：</p><ol><li><p><strong>非跨域</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxxyyy.cn/index.html 调用 http://www.xxxyyy.cn/server.php 非跨域</span><br></pre></td></tr></table></figure></li><li><p><strong>跨域：主域不同</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxxyyy.cn/index.html 调用  http://www.xxx.cn/server.php</span><br></pre></td></tr></table></figure></li><li><p><strong>跨域：子域名不同</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://abc.xxxyyy.cn/index.html 调用  http://def.xxx.cn/server.php</span><br></pre></td></tr></table></figure></li><li><p><strong>跨域：端口不同</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxx.cn:**8080**/index.html 调用  http://www.xxx.cn/server.php</span><br></pre></td></tr></table></figure></li><li><p><strong>跨域：协议不同</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**https**://www.xxx.cn/index.html 调用  **http**://www.xxx.cn/server.php</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 校招笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校招 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
